<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小沈同学的随笔日记</title>
      <link href="/posts/2168249802/"/>
      <url>/posts/2168249802/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><blockquote><p>2022年10月4日，又是一夜未眠。我想着我应该写点什么，是的，生活单调平凡，却也少不了一些惊喜。但更多的是我一个人的胡思乱想。</p></blockquote><h1 id="2022年"><a href="#2022年" class="headerlink" title="2022年"></a>2022年</h1><h2 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h2><h3 id="10月5日"><a href="#10月5日" class="headerlink" title="10月5日"></a>10月5日</h3><p>今天九点多起床的，玩了一个小时游戏，去看了电影《万里归途》，将中国撤侨的，感觉还可以；上午就这样过完了。下午本来打算出去转一转的，手表没电了，充完电又不想出去了。正好口琴到了，看着附赠的小册子，无聊的睡着了。后面又是玩游戏，刷抖音，啥都没干。晚上本来打算跑步的，出去转了一圈也没跑了，正好也下雨了。跟着B站的视频教程，能够用口琴吹个《玛丽有只小羊羔》，还挺开心的，但是乐谱啥的看不懂，后面还得学一下。</p><p>今天早点睡，明天开始学习了。</p><h3 id="10月4日"><a href="#10月4日" class="headerlink" title="10月4日"></a>10月4日</h3><p>又是一晚上没睡，放假一个星期了。好像还没有看过书。一直在玩游戏，刷抖音。时间都浪费在这些没用的东西上。白天不起来，晚上不睡觉。仿佛又成了两年前那个颓废的自己。没社交，没有钱。身体也被自己一步步的搞垮。<br>心里想的是要学习的，但是很快就分了心。还是学习的心不够坚定。可能这辈子也就这样了吧。上升无望。一天天的重复这种无聊的日子。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 随想 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows服务器执行自动任务</title>
      <link href="/posts/1754453532/"/>
      <url>/posts/1754453532/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>汇编笔记</title>
      <link href="/posts/3306631997/"/>
      <url>/posts/3306631997/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="第1章-基础知识"><a href="#第1章-基础知识" class="headerlink" title="第1章 基础知识"></a>第1章 基础知识</h1><h2 id="1-1-机器语言"><a href="#1-1-机器语言" class="headerlink" title="1.1 机器语言"></a>1.1 机器语言</h2><ol><li><strong>机器语言</strong>：是机器指令的集合。机器指令展开来讲就是一台机器可以正确执行的命令。电子计算机的机器指令是一列二进制数字。计算机将之转变为一列高低电平，以使计算机的电子器件受到驱动，进行运算。</li><li><strong>计算机</strong>：<ul><li>早期计算机：可以执行机器指令，进行运算的机器；</li><li>现代计算机：在我们常用的PC机中，有一个芯片（CPU，Central Processing Unit,中央处理单元，是一种微处理器）来完成上面所说的早期计算机的功能 ；现代计算机是指由CPU和其他受CPU直接或间接控制的芯片、器件、设备组成的计算机系统。<h2 id="1-3-汇编语言的组成"><a href="#1-3-汇编语言的组成" class="headerlink" title="1.3 汇编语言的组成"></a>1.3 汇编语言的组成</h2>汇编语言发展至今，有以下3类指令组成：</li></ul></li><li>汇编指令：机器码的助记符，有对应的机器码；</li><li>伪指令：没有对应的机器码，由编译器执行，计算机并不执行；</li><li>其它符号：如+、-、*、/ 等，由编译器识别，没有对应的机器码。</li></ol><p><strong>汇编语言的核心是汇编指令，它决定了汇编语言的特性。</strong></p><h2 id="1-4-存储器"><a href="#1-4-存储器" class="headerlink" title="1.4 存储器"></a>1.4 存储器</h2><p>存储器：也就是我们平常说的内存。CPU是计算机的核心部件，它控制整个计算机的运作并进行运算。要想让一个CPU工作，就必须向它提供指令和数据。指令和数据就存储在内存当中。磁盘不同于内存，磁盘中的数据或程序不读到内存中，就无法被CPU使用。</p><h2 id="1-5-指令和数据"><a href="#1-5-指令和数据" class="headerlink" title="1.5 指令和数据"></a>1.5 指令和数据</h2><p>指令和数据是应用上的概念。在内存和磁盘上，指令和数据没有任何区别，<strong>都是二进制信息</strong>。CPU在工作时，把有的信息看作指令，有的信息看作数据。只是为同样的信息赋予了不同的意义。</p><h2 id="1-6-存储单元"><a href="#1-6-存储单元" class="headerlink" title="1.6 存储单元"></a>1.6 存储单元</h2><p>存储器（内存）被划分为若干个存储单元，每个存储单元从0开始编号。<br>电子计算机的最小信息单位是bit（比特），也就是一个二进制位。8个bit组成一个Byte（字节）。<br>微型机的存储器（内存）的存储单元可以存储一个Byte，也就是8个二进制位。一个存储器有128个存储单元，那么它可以存储128Byte。<br>微型存储器的容量是以Byte为最小单位来计算的。对于拥有128个存储单元的存储器来说，我们可以说它的<strong>存储容量</strong>是128字节。</p><blockquote><p>1024B = 1MB,1024MB = 1GB, 1024GB = 1TB</p></blockquote><h2 id="1-7-CPU对存储器的读写"><a href="#1-7-CPU对存储器的读写" class="headerlink" title="1.7 CPU对存储器的读写"></a>1.7 CPU对存储器的读写</h2><p>存储单元在存储器中的编号可以看作是其在存储器中的地址。<br>CPU要从内存中读取数据，首先要指定存储单元的地址。另外，在微机中，不止存储器一种器件，因此CPU在读写数据时，还要指明要对哪一个器件进行操作，进行什么操作（是读数据还是写数据）。</p><p>因此CPU想要读写数据，必须和外部器件（标准说法是<strong>芯片</strong>）进行下面3类信息的交互：</p><ol><li>存储单元的地址（地址信息）；</li><li>器件的选择，读或写的命令（控制信息）；</li><li>读或写的数据（数据信息）。</li></ol><p>那么CPU是通过什么将地址、数据和控制信息传到存储器芯片中的呢？<br>电子计算机能处理、传输的信息都是电信号，电信号当然要用导线传送。<br>计算机中有专门连接CPU和其他芯片的导线，通常称为总线。<br><strong>总线</strong>：从物理上来讲，是一根根导线的集合；从逻辑上，根据传送信息的不同，又可以分为3类：<strong>地址总线、控制总线和数据总线</strong>。</p><p>如何命令计算机进行数据的读写呢？<br>要让一个计算机或微处理器工作，应向它输入能够驱动它进行工作的电平信息(机器码)。</p><h2 id="1-8-地址总线"><a href="#1-8-地址总线" class="headerlink" title="1.8 地址总线"></a>1.8 地址总线</h2><p>CPU通过地址总线来指定存储器单元，可见地址总线能传送多少个信息，CPU就可以对多少个存储单元进行<strong>寻址</strong>。</p><blockquote><p>现假设，一个CPU有10根地址总线，让我们来看一下它的寻址情况。我们知道，在电子计算机中，一根导线可以传送的稳定状态只有两种，高电平或是低电平。用二进制表示就是1或0 ,10 根导线可以传送10 位二进制数据。而10 位二进制数可以表示多少个不同的数据呢？ 2的10次方个。最小数为0,最大数为1023。</p></blockquote><p><strong>一个CPU有N根地址总线，则称这个CPU地址总线的宽度为N。这样的CPU最多可以寻址2<sup>N</sup>个内存单元。</strong></p><h2 id="1-9-数据总线"><a href="#1-9-数据总线" class="headerlink" title="1.9 数据总线"></a>1.9 数据总线</h2><p>CPU与内存或其他器件之间的数据传送是通过数据总线来进行的。数据总线的宽度决定了CPU和外界的数据传送速度。8根数据总线一次可传送8个二进制位，即一个字节。</p><h2 id="1-10-控制总线"><a href="#1-10-控制总线" class="headerlink" title="1.10 控制总线"></a>1.10 控制总线</h2><p>CPU对<strong>外部器件</strong>的控制是通过控制总线来进行的。在这里控制总线是个总称，控制总线是一些控制线的集合。有多少根控制总线，就意味着CPU提供了多少对外部器件的控制。控制总线的宽度决定了CPU对外部器件的控制能力。</p><h2 id="1-11-内存地址空间（概述）"><a href="#1-11-内存地址空间（概述）" class="headerlink" title="1.11 内存地址空间（概述）"></a>1.11 内存地址空间（概述）</h2><p>内存地址空间：举例，一个CPU的地址总线宽度为10，那么可以寻址1024个内存单元，这1024个可寻到的内存单元就构成该CPU的内存地址空间。</p><h2 id="1-12-主板"><a href="#1-12-主板" class="headerlink" title="1.12 主板"></a>1.12 主板</h2><p>在每一台PC中，都有一个主板，主板上有核心器件和一些主要器件，这些器件通过总线（地址总线、数据总线、控制总线）相连，这些器件有CPU，存储器，外围芯片组，扩展插槽等。扩展插槽上一般插有RAM内存条和各类接口卡。</p><h2 id="1-13-接口卡"><a href="#1-13-接口卡" class="headerlink" title="1.13 接口卡"></a>1.13 接口卡</h2><p><strong>计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制</strong>。<strong>CPU对外部设备都不能直接控制</strong>，如显示器、音箱、打印机等。直接控制这些设备进行工作的是插在扩展插槽上的接口卡。扩展插槽通过总线和CPU相连，所以接口卡也通过总线同CPU相连。CPU可以直接控制这些接口卡，从而实现CPU对外设的间接控制。</p><h2 id="1-14-各类存储器芯片"><a href="#1-14-各类存储器芯片" class="headerlink" title="1.14 各类存储器芯片"></a>1.14 各类存储器芯片</h2><p>一台PC机中，装有多个存储器芯片，从物理连接上看，它们是独立的、不同的器件。<br>从读写属性上，可分为：</p><ol><li>随机存储器（RAM，random access memory，也叫随机存取存储器）：可读可写，但必须带电存储，关机后存储的内容丢失；</li><li>只读存储器（ROM，Read-only memory）：只能读取不能写入，关机后其中的内容不丢失。</li></ol><p>从功能和连接上又能分为以下几类：</p><ul><li><p>随机存储器：用于存放供CPU使用的绝大部分程序和数据，<strong>主随机存储器</strong>一般由两个位置上的RAM组成：<strong>装在主板上的RAM和插在扩展插槽上RAM</strong>。</p></li><li><p>装有BIOS的ROM：BIOS是由主板和各类接口卡（如显卡、网卡）厂商提供的系统软件。可通过它利用该硬件进行最基本的输入输出。在主板和某些接口卡上插有存储相应BIOS的ROM。</p></li><li><p>接口卡上的RAM：某些接口卡需要对大批量输入、输出数据进行暂时存储，在其上装有RAM。最典型的是显示卡上的RAM, 一般称为显存。显示卡随时将显存中的数据向显示器上输出。换句话说，我们将需要显示的内容写入显存，就会出现在显示器上。<br><img src="http://pic.buercheng.space/imagesPC%E6%9C%BA%E4%B8%AD%E5%90%84%E7%B1%BB%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E9%80%BB%E8%BE%91%E8%BF%9E%E6%8E%A5.png" alt="PC机中各类存储器的逻辑连接"></p><h2 id="1-15-内存地址空间"><a href="#1-15-内存地址空间" class="headerlink" title="1.15 内存地址空间"></a>1.15 内存地址空间</h2><p>上述存储器，在物理上是独立的器件，但是在以下两点上相同：</p></li><li><p>都和CPU的总线相连；</p></li><li><p>CPU对他们进行读或写的时候都通过控制总线发出内存读写命令。</p></li></ul><p>也就是说，CPU在操控他们的时候，把它们当作内存来对待，把它们总的看作一个由若干存储单元组成的逻辑存储器，这个逻辑存储器就是我们说的内存地址空间。<br><strong>在汇编这门课中，我们面对的就是内存地址空间。</strong><br><img src="http://pic.buercheng.space/images%E5%B0%86%E5%90%84%E7%B1%BB%E5%AD%98%E5%82%A8%E5%99%A8%E7%9C%8B%E4%BD%9C%E4%B8%80%E4%B8%AA%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E5%99%A8.png" alt="将各类存储器看作一个逻辑存储器"></p><h1 id="第2章-寄存器"><a href="#第2章-寄存器" class="headerlink" title="第2章 寄存器"></a>第2章 寄存器</h1><p>一个典型的CPU由<strong>运算器、控制器、寄存器（CPU工作原理）</strong>等器件构成，这些器件靠内部总线连接。</p><ul><li>运算器：进行信息处理；</li><li>控制器：控制各种器件进行工作；</li><li>寄存器：进行信息存储；</li><li>内部总线：连接各种器件，在它们之间进行数据的传送。</li></ul><p>对于汇编程序员来说，<strong>寄存器是CPU中主要的部件</strong>。因为寄存器是CPU中程序员可以用指令读写的部件。程序员通过改变各种寄存器中的内容来实现对CPU的控制。</p><p>不同的CPU，寄存器的结构、个数是不同的。8086CPU有14个寄存器：<strong>AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SSDS、ES、PSW</strong>。</p><h2 id="2-1-通用寄存器"><a href="#2-1-通用寄存器" class="headerlink" title="2.1 通用寄存器"></a>2.1 通用寄存器</h2><p>8086CPU的所有寄存器都是16位的，可以存放两个字节。AX、BX、CX、DX这4个寄存器通常用来存放一般性的，被称为通用寄存器。<br><img src="http://pic.buercheng.space/images16%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png" alt="16位寄存器的逻辑结构"><br>为了兼容8位寄存器，8086CPU的AX，BX,CX,DX可以分为两个可独立使用的8位寄存器来用：</p><ul><li>AX可分为AH和AL；</li><li>BX可分为BH和BL；</li><li>CX可分为CH和CL；</li><li>DX可分为DH和DL。</li></ul><p>以AX为例。AX的低8位（0位~7位）构成了AL寄存器，高8位（8位到15位）构成了AH寄存器    。<br><img src="http://pic.buercheng.space/images16%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E5%88%86%E4%B8%BA%E4%B8%A4%E4%B8%AA8%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8.png" alt="16位寄存器分为两个8位寄存器"></p><p>出于对兼容性的考虑，8086CPU可以一次性处理以下两种尺寸的数据：</p><ul><li>字节：记为byte, —个字节由8个bit组成，可以存在8位寄存器中。</li><li>字：记为word, 一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节。</li></ul><p>AH和AL中的数据，既可以看成是一个字型数据的高8位和低8位，又可以看成是两个独立的字节型数据。</p><h2 id="2-3-几条汇编指令"><a href="#2-3-几条汇编指令" class="headerlink" title="2.3 几条汇编指令"></a>2.3 几条汇编指令</h2><ul><li><code>mov ax,bx</code>:将寄存器bx中的值送入ax；</li><li><code>add ax,bx</code>:将寄存器ax和bx的值相加并存入ax中。</li></ul><h2 id="2-4-物理地址"><a href="#2-4-物理地址" class="headerlink" title="2.4 物理地址"></a>2.4 物理地址</h2><p>CPU访问内存单元时，要给出内存单元的地址。所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存单元在这个空间中都有唯一的地址，我们将这个唯一的地址称为物理地址。</p><p>CPU通过地址总线送入存储器的，必须是一个内存单元的物理地址。在CPU向地址总线上发出物理地址之前，必须要在内部先形成这个物理地址。不同的CPU可以有不同的形成物理地址的方式。</p><h2 id="2-5-16位结构的CPU"><a href="#2-5-16位结构的CPU" class="headerlink" title="2.5 16位结构的CPU"></a>2.5 16位结构的CPU</h2><p>什么是16位结构的CPU呢？<br>1 6 位结构( 1 6 位机、字长为1 6 位等常见说法，与1 6 位结构的含义相同)描述了一个CPU具有下面几方面的结构特性：</p><ul><li>运算器一次最多可以处理16位的数据；</li><li>寄存器的最大宽度为16位；</li><li>寄存器和运算器之间的通路为16位。</li></ul><p>8 0 8 6 是1 6 位结构的C P U , 这也就是说，在8 0 8 6 内部，能够一次性处理、传输、暂时存储的信息的最大长度是16位的。内存单元的地址在送上地址总线之前，必须在CPU中处理、传输、暂时存放，对于16位CPU,能一次性处理、传输、暂时存储16位的地址。</p><h2 id="2-6-8086CPU给出物理地址的方法"><a href="#2-6-8086CPU给出物理地址的方法" class="headerlink" title="2.6 8086CPU给出物理地址的方法"></a>2.6 8086CPU给出物理地址的方法</h2><p>8 0 8 6 CP U有2 0 位地址总线，可以传送2 0 位地址，达到1 MB寻址能力。8086CPU又是1 6 位结构，在内部一次性处理、传输、暂时存储的地址为1 6 位。从8 0 8 6 C P U 的内部结构来看，如果将地址从内部简单地发出，那么它只能送出16位的地址，表现出的寻址能力只有64KB。</p><p><strong>8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。</strong><br> 当8086CPU要读写内存时：</p><ol><li>CPU中的相关部件提供两个16位的地址，一个称为段地址，一个称为偏移地址；</li><li>段地址和偏移地址通过内部总线送入一个叫作地址加法器的部件；</li><li>地址加法器将两个16位地址合成一个20位的物理地址；</li><li>地址加法器将20位的物理地址通过内部总线送入输入输出控制电路；</li><li>输入输出控制电路将20位的物理地址送入地址总线；</li><li>20位物理地址被地址总线送入存储器。</li></ol><p><img src="http://pic.buercheng.space/images8086CPU%E7%9B%B8%E5%85%B3%E9%83%A8%E4%BB%B6%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png" alt="8086CPU相关部件的逻辑结构"></p><p>地址加法器采用<strong>物理地址= 段地址x16+偏移地址</strong>的方法用段地址和偏移地址形成物理地址。</p><h2 id="2-8-段的概念"><a href="#2-8-段的概念" class="headerlink" title="2.8 段的概念"></a>2.8 段的概念</h2><p>内存并没有分段，段的划分来自于C P U , 由于8 0 8 6 C P U 用“基础地址(段地址[SA]x16）+偏移地址[EA]=物理地址”的方式给出内存单元的物理地址，使得我们可以用分段的方式来管理内存。</p><p>以后，在编程时可以根据需要，将若干地址连续的内存单元看作一个段，用段地址X16定位段的起始地址（基础地址），用偏移地址定位段中的内存单元。<br>有两点需要注意：<strong>段地址X16必然是16的倍数，所以一个段的起始地址也一定是16的倍数；偏移地址为16位，16位地址的寻址能力为64KB,所以一个段的长度最大为64KB。</strong></p><p>CPU访问内存单元时，必须向内存提供内存单元的物理地址。</p><p><strong>CPU可以用不同的段地址和偏移地址形成同一个物理地址。</strong></p><p>“数据在21F60H内存单元中。”这句话对于8086PC机一般不这样讲，取而代之的是两种类似的说法：<strong>①数据存在内存2000:1F60单元中；②数据存在内存的2000H段中的1F60H单元中。这两种描述都表示“数据在内存21F60H单元中”。</strong></p><p>可以根据需要，将地址连续、起始地址为16的倍数的一组内存单元定义为一个段。</p><h2 id="2-9-段寄存器"><a href="#2-9-段寄存器" class="headerlink" title="2.9 段寄存器"></a>2.9 段寄存器</h2><p>段寄存器：存放段地址的寄存器。8086CPU有四个段寄存器：CS、DS、SS、ES。</p><h2 id="2-10-CS和IP"><a href="#2-10-CS和IP" class="headerlink" title="2.10 CS和IP"></a>2.10 CS和IP</h2><p>CS和IP是8086CPU最关键的两个寄存器，它们指示了CPU当前要读取的指令的地址。CS为代码段寄存器，IP为指令指针寄存器。</p><p>在8086PC机中，任意时刻，设CS中的内容为M，IP中的内容为N，8086CPU将从内存M x 16 + N开始，读取一条指令并执行。</p><p>也可以这样表述：8086机中，任意时刻，CPU将CS:1P指向的内容当作指令执行。</p><p>8086CPU工作过程简述：</p><ol><li>从CS：IP指向的内存单元读取指令，读取的指令进入指令缓冲器；</li><li>IP= IP+所读取的指令长度，从而指向下一条指令；</li><li>执行指令。转到1，重复这个过程。</li></ol><p>在8086CPU加电启动或复位后(即CPU刚开始工作时)CS和IP被设置为CS=FFFFH, IP=0000H,即在8086PC机刚启动时，CPU从内存FFFF0H单元中读取指令执行，FFFF0H单元中的指令是8086PC机开机后执行的第一条指令。</p><p>CPU根据什么将内存中的信息看作指令？</p><blockquote><p>CPU将CS:IP指向的内存单元中的内容看作指令</p></blockquote><h2 id="2-11-修改CS、IP的指令"><a href="#2-11-修改CS、IP的指令" class="headerlink" title="2.11 修改CS、IP的指令"></a>2.11 修改CS、IP的指令</h2><p>在CPU中，程序员能够用指令读写的部件只有寄存器，程序员可以通过改变寄存器中的内容实现对CPU 的控制。CPU 从何处执行指令是由CS 、IP 中的内容决定的，程序员可以通过改变CS、IP中的内容来控制CPU执行目标指令。</p><p>我们如何改变CS、IP的值呢？<br>能够改变CS、IP的内容的指令被统称为转移指令。<br>jmp指令可以修改CS、IP的值。<br><code>JMP 段地址:偏移地址</code>：能用指令中给出的段地址、偏移地址分别修改CS、IP的值。<br><code>JMP 某一合法寄存器名字</code>:仅修改IP的值。</p><blockquote><p><code>JMP ax</code>:将IP的值改为ax中的值，相当于执行了：<code>MOV IP,ax</code></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WolfRam Language</title>
      <link href="/posts/1760471615/"/>
      <url>/posts/1760471615/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本算术运算"><a href="#1-基本算术运算" class="headerlink" title="1. 基本算术运算"></a>1. 基本算术运算</h1><p>Wolfram Language支持基本的算术运算：+、-、*、/、^。直接输入公式就可以计算了，在电脑上可以使用shift+enter得到结果。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262221617.png" alt="image-20211017203905618"></p><blockquote><p>注意：</p><ol><li><p>输入一个数字，然后添加一个空格，再输另外一个数字，可以在两个数字之间添加×号。</p><p> <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262221392.gif" alt="动画"></p></li><li><p>两个整数做除法，不能整除时，会显示分数；如果想要得到小数形式，可以在被除数和除数后面加上小数点。</p><p> <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262221974.png" alt="image-20211017204756827"></p></li><li><p>当0作除数时，会得到无穷大的符号表示。</p><p> <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262222419.png" alt="image-20211017205650653"></p></li></ol></blockquote><h1 id="2-函数"><a href="#2-函数" class="headerlink" title="2. 函数"></a>2. 函数</h1><p>当你输入2+2的时候，Wolfram Language会将它理解为Plus[2,2]。Plus就是一个函数。Wolfram Language内建超过了5000个函数。</p><p>所有的函数名称都以大写字母开头，用方括号来将参数括起来。</p><p>函数举例：</p><ul><li><p>Plus[]:表示项的和。Plus[]=0;Plus[x]=x.</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262222270.png" alt="image-20211019195153072"></p></li><li><p>Subtrac[]:表示项的差,Sub[x,y]等价于x+(-1) * y,<em>x</em>-<em>y</em> 在输入时被转换为 <em>x</em>+(-1*<em>y</em>)。Subtract[]函数必须有两个参数，且只能有两个参数。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262222440.png" alt="image-20211019195853954"></p></li><li><p>Times[]:表示项的乘积。Times[]=1;Times[x]=x。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262222611.png" alt="image-20211019200214330"></p></li><li><p>Divide[]:表示项的除法，等价于x * y^-1，在输入中x/y被转换成x * y^-1。Divide[]函数必须有两个参数，且只能为两个参数。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262222636.png" alt="image-20211019200722426"></p></li><li><p>Power[]:Power[x,y]给出x的y次幂。Power[x,y,z]等价于Power[x,Power[y,z]]。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262222496.png" alt="image-20211019201400169"></p></li><li><p>Max[]:Max[x<sub>1</sub>,x<sub>2</sub>,x<sub>3</sub>…]给出x<sub>i</sub>中的最大值；Max[{x<sub>1</sub>,x<sub>2</sub>…},{y<sub>1</sub>}…]给出所有列表中的最大元素。Max[]返回-Infinity。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262222668.png" alt="image-20211019202032454"></p></li><li><p>Min[]:Min[x<sub>1</sub>,x<sub>2</sub>,x<sub>3</sub>…]给出x<sub>i</sub>中的最小值；Min[{x<sub>1</sub>,x<sub>2</sub>…},{y<sub>1</sub>}…]给出所有列表中的最小元素。Min[]会给出Infinity。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262222991.png" alt="image-20211019202545548"></p></li><li><p>RandomInteger[]:</p><ul><li><p>RandomInteger[{i<sub>min</sub>,i<sub>max</sub>}]:给出{i<sub>min</sub>,i<sub>max</sub>}范围内的伪随机整数。</p></li><li><p>RandomInteger[i<sub>max</sub>]：给出{0…i<sub>max</sub>}范围内的伪随机整数。</p></li><li><p>RandomInteger[]:伪随机的给出0或1。</p></li><li><p>RandomInteger[range,n]:给出n个伪随机数组成的列表。随机数大小在0-range之间。</p></li><li><p>RandomInteger[range,{n<sub>1</sub>,n<sub>2</sub>…}]:给出由伪随机整数组成的n<sub>1</sub>×n<sub>2</sub>×…的数组。随机数大小在0-range之间。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262223218.png" alt="image-20211019204030191"></p></li></ul></li></ul><h1 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h1><p>List(列表)是Wolfram Language里面用来表示元素集合的基础方式。{1,2,3}是一个数字列表，它本身不能干任何事，只是存储元素的一种方式，当你输入一个列表时，会原样的输出。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262223968.png" alt="image-20211019205023158"></p><ul><li><p>ListPlot[]:用来将数字列表绘制成图像的函数。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262223759.png" alt="image-20211019205353209"></p></li><li><p>Range[]:一个可以产生数字列表的函数。</p><ul><li><p>Range[i<sub>max</sub>]:生成列表{1,2,…i<sub>max</sub>}。</p></li><li><p>Range[i<sub>min</sub>,i<sub>max</sub>]:生成列表{i<sub>min</sub>…i<sub>max</sub>}。</p><ul><li>Range[-1,3]:生成列表{-1,0,1,2,3}；</li><li>Range[2,-2]:生成列表{};</li><li>Range[2,-2,-1]生成列表{2,1,0,-1,-2};</li></ul></li><li><p>Range[i<sub>min</sub>,i<sub>max</sub>,d]:以步长d生成列表。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262223603.png" alt="image-20211019210339879"></p></li></ul></li><li><p>生成一个数字列表，然后把它绘制出来：</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262223637.png" alt="image-20211019210448596"></p></li><li><p>Reverse[]:可以将列表中的元素顺序翻转过来。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262223704.png" alt="image-20211019210720859"></p></li><li><p>Join[]:可以将多个列表连接成一个列表。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262223561.png" alt="image-20211019211007834"></p></li></ul><blockquote><p>注意：{a,b,c}和{c,b,a}表示两个不同的列表。</p></blockquote><h1 id="4-展示列表"><a href="#4-展示列表" class="headerlink" title="4. 展示列表"></a>4. 展示列表</h1><p>ListPlot是一种展示或者可视化数字列表的方法。另外还有许多其他方法。</p><ul><li><p>ListLinePlot[]:可以绘制列表，并把每个点连起来形成折线图。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262223630.png" alt="image-20211019212243536"></p></li><li><p>BarChart[]:可以将列表转换成柱状图。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262224589.png" alt="image-20211019212550316"></p></li><li><p>PieChart[]：可以将列表转换成饼图。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262224711.png" alt="image-20211019212659486"></p></li><li><p>NumberLinePlot[]:在数轴上将列表数字绘制出来。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262224893.png" alt="image-20211019213118011"></p></li><li><p>Column[]:将列表元素以垂直方向展示。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262224233.png" alt="image-20211019215705890"></p></li><li><p>列表可以包含任何东西，包括图像。所以你可以把图像组合放到List里面。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262224897.png" alt="image-20211019215857868"></p></li></ul><h1 id="5-对列表的操作"><a href="#5-对列表的操作" class="headerlink" title="5. 对列表的操作"></a>5. 对列表的操作</h1><p>Wolfram Language中有数千种函数可以对列表进行操作。</p><ol><li><p>可以对列表进行算术运算</p><ul><li><p>加法：</p><ul><li><p>列表+数字：直接将列表中每个数字加上该数字，得到新列表。“{}”:没有任何元素的list叫作null list或是empty list。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262224979.png" alt="image-20211019220724053"></p></li><li><p>列表+列表：列表的长度必须相同，依次将各个同一顺序的元素相加即可。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262225292.png" alt="image-20211019220903399"></p></li></ul></li><li><p>减法：与加法一致</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262225977.png" alt="image-20211019221024380"></p></li><li><p>乘法：</p><ul><li>列表*数字：各个元素与数字相乘得到新列表。</li><li>列表* 列表：相同顺序的元素相乘。</li></ul></li><li><p>除法：</p><ul><li>列表/数字：各个元素除以数字。</li><li>列表/列表：相同顺序元素相除。</li></ul></li><li><p>对列表求方：</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262225755.png" alt="image-20211019221549242"></p></li></ul></li><li><p>其他函数</p><ul><li><p>Sort[]:可以对列表进行排序。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262225545.png" alt="image-20211019221754349"></p></li><li><p>Length[]:返回列表的长度。</p></li><li><p>Total[]：返回列表所有元素相加的和。</p></li><li><p>Count[list,a]:返回元素a在list中出现的次数。</p></li><li><p>First[]：返回列表第一个元素。First[Sort[list]] = Min[list]</p></li><li><p>Last[]：返回列表最后一个元素。</p></li><li><p>Part[list,n]:返回列表特定位置的元素。</p></li><li><p>IntegerDigits[]:可以将数字各个位拆成列表的一个元素。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262225112.png" alt="image-20211019222209227"></p></li><li><p>IntegerDigits[number,base]:IntegerDigits[number]返回的是以10为基数的数字形式，base可以是任意值，返回的就是以base为基数的结果。</p></li><li><p>FromDigits[List[]]:IntegerDigits[]的反函数，返回列表中数字组成的整数。</p></li><li><p>Rest[list]:返回列表中除第一个外所有元素组成的列表。</p></li><li><p>Most[list]:返回列表中除最后一个元素外所有元素组成的列表。</p></li><li><p>Take[list,n]:返回从list第一个元素开始，到第指定个元素的列表。</p></li><li><p>Drop[list,n]:删掉list第一个元素到指定位元素。</p></li></ul></li></ol><h1 id="6-创建表"><a href="#6-创建表" class="headerlink" title="6. 创建表"></a>6. 创建表</h1><p>我们可以直接使用{a,b,c..}的形式、使用Range函数、IntegerDigits函数来生成列表，但是一个更通用更灵活的方法是使用Table函数。</p><p>Table函数最简单的形式是：Table[number,times]:生成一个由times个number组成的列表。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262225152.png" alt="image-20211026200146422"></p><p>也可以对列表进行重复:Table[list,times]:</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262225318.png" alt="image-20211026200330426"></p><p>当然，可以对任何对象进行重复:</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262226228.png" alt="image-20211026200459300"></p><p>如果想要对不同的元素进行重复应该怎么做？这需要引入另一个变量，然后对该变量进行迭代。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262226140.png" alt="image-20211026201711178"></p><p>利用Table函数生成前十个数的平方：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262226982.png" alt="image-20211026201821697"></p><p>Table函数可以使用任何元素：</p><ol><li><p>生成连续长度的列表组成的表</p><p> <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262226840.png" alt="image-20211026202103149"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262226134.png" alt="image-20211026202311077"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262226833.png" alt="image-20211026202411537"></p></li></ol><p>Table[f[n],{n,3,5}]:表示n从3开始迭代到5：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262226273.png" alt="image-20211026202815333"></p><p>Table[f[n],{n,4,20,2}]:表示n从4开始以2的步长迭代到20：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227035.png" alt="image-20211026202951041"></p><p>Table总是会对输入的列表进行分开计算–在Table函数中使用RandomInteger函数时，可以看到这个过程：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227058.png" alt="image-20211026203626394"></p><p>生成了20个不同的伪随机数。</p><h1 id="7-颜色和格式"><a href="#7-颜色和格式" class="headerlink" title="7. 颜色和格式"></a>7. 颜色和格式</h1><p>WolfRam Language不仅仅可以处理数字，还可以处理颜色。我们可以使用名字来获得常用颜色。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227038.png" alt="image-20211026211855410"></p><p>创建一个颜色列表：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227296.png" alt="image-20211026212108391"></p><p>ColorNegate函数可以生成一种颜色的补充色：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227166.png" alt="image-20211026212713786"></p><p>Blend函数可以将<strong>列表中</strong>的颜色进行混合：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227292.png" alt="image-20211026212838660"></p><p>RGBColor[]函数可以通过指定红色，绿色，蓝色的值，来指定一个颜色，可取的值得范围为0到1.</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227245.png" alt="image-20211026213126077"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227437.png" alt="image-20211026213606954"></p><p>有时候用hue(色调)来描述颜色，比直接用颜色的名字来描述比较方便。函数Hue就可以达到这个目的。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227934.png" alt="image-20211026214002652"></p><p>有时候，只想要一个随机的颜色，RandomColor函数可以做到这一点，该函数不需要任何参数即可执行。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262227866.png" alt="image-20211026214437390"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262228628.png" alt="image-20211026214528761"></p><p>我们可以在任何地方使用颜色。比方，我们可以使用Style函数对输出的数字加上颜色。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262228610.png" alt="image-20211026214859538"></p><p>我们也可以在Style函数中指定输出的元素的大小：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262228992.png" alt="image-20211026215245833"></p><p>也可以同时指定元素的颜色和大小：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/202110262228642.png" alt="image-20211026215759550"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用函数</title>
      <link href="/posts/1865743498/"/>
      <url>/posts/1865743498/</url>
      
        <content type="html"><![CDATA[<h1 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h1><h2 id="length计算长度"><a href="#length计算长度" class="headerlink" title="length计算长度"></a>length计算长度</h2><h3 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>LENGTH()</code>方法返回字符串的长度，以字节为单位。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LENGTH(string)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>string</code>：必选。需要计算字节长度的字符串。</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询系统使用的字符集。在ascll编码中，汉字占两个字节；在utf-8中，汉字占三个字节；在utf-16中汉字占两个字节。</span><br><span class="line">SHOW VARIABLES LIKE &#x27;%char%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426214822430.png" alt="image-20210426214822430"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(&quot;中国&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426214957079.png" alt="image-20210426214957079"></p><h2 id="substr截取子串"><a href="#substr截取子串" class="headerlink" title="substr截取子串"></a>substr截取子串</h2><h3 id="定义和使用-1"><a href="#定义和使用-1" class="headerlink" title="定义和使用"></a>定义和使用</h3><p>substring()方法从一个字符串中提取子串（从任意位置开始）</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substring(string,start,length)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substring(string FROM start FOR length)</span><br></pre></td></tr></table></figure><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><p><code>string</code>：必选。需要提取子串的字符串。</p><p><code>start</code>：必选。<strong>不能为0</strong>，可以是负数，可以是正数。如果为正数，则从开头开始（数start位）提取；为负数则从末尾开始。</p><p><code>length</code>：可选。如果为空，则默认提取start开始后的所有字符。</p><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING(&quot;I love China&quot;,3,10);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425170534410.png" alt="image-20210425170534410"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING(&quot;I love China&quot; FROM 3 FOR 10);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425204219329.png" alt="image-20210425204219329"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING(&quot;I love China&quot;,-1,10); # 从-1位也就是倒数第一位开始数10位，这时候已到末尾，因此只有倒数第一位a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425205203224.png" alt="image-20210425205203224"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTRING(&quot;I love China&quot; FROM -10 FOR 10);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425205848706.png" alt="image-20210425205848706"></p><h3 id="相同的函数"><a href="#相同的函数" class="headerlink" title="相同的函数"></a>相同的函数</h3><p><code>SUBSTR()</code>和<code>MID()</code>函数的功能与<code>SUBSTRING()</code>是一样的。</p><p><code>SUBSTR()、MID()</code>与<code>SUBSTRING()</code>的用法完全一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUBSTR(str,start,length)</span><br><span class="line">MID(str,start,length)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUBSTR(str FROM start FOR length)</span><br><span class="line">MID(str FROM start FOR length)</span><br></pre></td></tr></table></figure><h2 id="upper将字符串转为大写形式"><a href="#upper将字符串转为大写形式" class="headerlink" title="upper将字符串转为大写形式"></a>upper将字符串转为大写形式</h2><h3 id="定义和使用-2"><a href="#定义和使用-2" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>UPPER()</code>函数将一个字符串转为大写形式。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPPER(text)</span><br></pre></td></tr></table></figure><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><p><code>text</code>:必选。需要转换的字符串。</p><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT UPPER(&quot;aBcdEFGHijklmnopqRsTUvwXyz&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425211713047.png" alt="image-20210425211713047"></p><h3 id="相同的函数-1"><a href="#相同的函数-1" class="headerlink" title="相同的函数"></a>相同的函数</h3><p><code>UCASE()</code>函数的用法与<code>UPPER()</code>函数一致。</p><h2 id="lower将字符串转为小写形式"><a href="#lower将字符串转为小写形式" class="headerlink" title="lower将字符串转为小写形式"></a>lower将字符串转为小写形式</h2><p>参见<code>UPPER()</code>函数。</p><p><code>LCASE()</code>函数与<code>LOWER()</code>函数的功能和使用一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT LOWER(first_name) FROM employees;</span><br><span class="line">SELECT first_name FROM employees;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425212516339.png" alt="image-20210425212516339"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425212533559.png" alt="image-20210425212533559"></p><h2 id="trim去除前后指定的空格或字符"><a href="#trim去除前后指定的空格或字符" class="headerlink" title="trim去除前后指定的空格或字符"></a>trim去除前后指定的空格或字符</h2><h3 id="定义和使用-3"><a href="#定义和使用-3" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>TRIM()</code>可以去除字符串中前导和结尾的空格或指定字符。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p><code>TRIM([&#123;BOTH|LEADING|TRAILING&#125; [removed_string] FROM] string)</code></p><h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><p><code>BOTH|LEADING|TRAILING</code>：都是可选的。缺省为BOTH，即首尾皆删除。LEADING表示删除指定前导字符或是前导空格；TRAILING表示删除指定后缀字符或是后缀空格。</p><p><code>removed_string:</code>可选。缺省为空格。表示需要删除的前导、后缀字符。</p><p><code>TRIM(string)</code>：删除string前后的空格，并返回去掉空格后的字符串。string也可以是字段。</p><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRIM(&quot;   I love China   &quot;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425215829308.png" alt="image-20210425215829308"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRIM(&#x27;_&#x27; FROM &quot;__I am here    __&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425220028451.png" alt="image-20210425220028451"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRIM(LEADING &#x27;&amp;&#x27; FROM &quot;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;I am here&amp;&amp;&amp;&amp;&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210425220150837.png" alt="image-20210425220150837"></p><h2 id="ltrim、rtrim分别去掉前导和后缀空格"><a href="#ltrim、rtrim分别去掉前导和后缀空格" class="headerlink" title="ltrim、rtrim分别去掉前导和后缀空格"></a>ltrim、rtrim分别去掉前导和后缀空格</h2><p>如果只需要去掉空格可以使用<code>LTRIM()</code>和<code>RTRIM()</code>函数</p><h2 id="replace替换字符"><a href="#replace替换字符" class="headerlink" title="replace替换字符"></a>replace替换字符</h2><h3 id="定义和使用-4"><a href="#定义和使用-4" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>REPLACE()</code>函数可以使用一个新的字符串代替某字符串中出现的所有指定的子串。</p><blockquote><p>注意，该函数大小写敏感。</p></blockquote><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(String,from_string,to_string); # String 也可以是字段</span><br></pre></td></tr></table></figure><h3 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h3><p><code>String</code>：必选。原始字符串。</p><p><code>from_string</code>：必选。需要替换的子串。</p><p><code>to_string</code>：必选。替换串。</p><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE(&quot;something,someone,somebody,somewhere,sometime&quot;,&quot;some&quot;,&quot;any&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426085053656.png" alt="image-20210426085053656"></p><h2 id="lpad左填充、rpad右填充"><a href="#lpad左填充、rpad右填充" class="headerlink" title="lpad左填充、rpad右填充"></a>lpad左填充、rpad右填充</h2><h3 id="定义和使用-5"><a href="#定义和使用-5" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>LPAD()</code>:用一个指定的字符串左填充给定字符串，扩充字符串到指定长度。</p><p><code>RPAD()</code>：用一个指定的字符串右填充给定字符串，扩充字符串到指定长度。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LPAD(string,length,lpad_string);</span><br><span class="line">RPAD(string,length,rpad_string);</span><br></pre></td></tr></table></figure><h3 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h3><p><code>string</code>:必选。待填充的字符串。</p><p><code>length</code>:必选。需要扩充到的长度。包括原始字符串的长度。</p><p><code>lpad_string</code>:必选。用来填充的字符串。</p><p><code>rpad_string</code>:必选。用来填充的字符串。</p><h3 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LPAD(first_name,20,&quot;#@*&quot;) FROM employees;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426095216847.png" alt="image-20210426095216847"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT RPAD(LPAD(&#x27;a&#x27;,10,&#x27;l&#x27;),21,&#x27;r&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426095452986.png" alt="image-20210426095452986"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LPAD(&quot;aaaaa&quot;,2,&#x27;b&#x27;);# 指定的长度小于原字符串的长度，字符串会被截断</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426220357465.png" alt="image-20210426220357465"></p><h2 id="instr返回子串第一次出现的索引"><a href="#instr返回子串第一次出现的索引" class="headerlink" title="instr返回子串第一次出现的索引"></a>instr返回子串第一次出现的索引</h2><h3 id="定义和使用-6"><a href="#定义和使用-6" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>instr()</code>：返回某一字符串在另一字符串中第一次出现的位置。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instr(string1,substring)</span><br></pre></td></tr></table></figure><h3 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h3><p><code>string</code>:必选。待查字符串。</p><p><code>substring</code>:必选。需要在<code>string</code>中查找的子串。</p><p>返回值：<code>substring</code>在<code>string</code>中首次出现的位置。如果没有找到，则返回0。</p><h3 id="代码演示-6"><a href="#代码演示-6" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&quot;abcabcdefacddefddf&quot;,&quot;ddf&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426100810456.png" alt="image-20210426100810456"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&quot;abcd&quot;,&#x27;e&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426100929159.png" alt="image-20210426100929159"></p><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><p><code>CURRENT_DATE()</code>:返回年月日。</p><p><code>CURRENT_TIME()</code>:返回时分秒。</p><p><code>CURRENT_TIMESTAMP()</code>:返回当前时间。包括年月日时分秒。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426102107190.png" alt="image-20210426102107190"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426101642130.png" alt="image-20210426101642130"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426101731308.png" alt="image-20210426101731308"></p><h1 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h1><h2 id="ceil向上取整"><a href="#ceil向上取整" class="headerlink" title="ceil向上取整"></a>ceil向上取整</h2><h3 id="定义和使用-7"><a href="#定义和使用-7" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>CEIL()</code>函数返回大于或等于某数的最小整数。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CEIL(number)</span><br></pre></td></tr></table></figure><h3 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h3><p><code>number</code>:必选。数值型数据。</p><h3 id="代码演示-7"><a href="#代码演示-7" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT CEIL(2);</span><br><span class="line">SELECT CEIL(2.34);</span><br><span class="line">SELECT CEIL(-1.1);</span><br><span class="line">SELECT CEIL(-1);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426105600331.png" alt="image-20210426105600331"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426105637044.png" alt="image-20210426105637044"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426110530438.png" alt="image-20210426110530438"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426110632052.png" alt="image-20210426110632052"></p><blockquote><p><code>CELING()</code>函数与<code>CEIL()</code>函数功能和使用方法一致。</p></blockquote><h2 id="floor向下取整"><a href="#floor向下取整" class="headerlink" title="floor向下取整"></a>floor向下取整</h2><h3 id="定义和使用-8"><a href="#定义和使用-8" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>FLOOR()</code>函数返回小于或等于某数的最大整数。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLOOR(number)</span><br></pre></td></tr></table></figure><h3 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h3><p><code>number</code>:必选。数值型数据。</p><h3 id="代码演示-8"><a href="#代码演示-8" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT FLOOR(2.5);</span><br><span class="line">SELECT FLOOR(2);</span><br><span class="line">SELECT FLOOR(-3.4);</span><br><span class="line">SELECT FLOOR(-5);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426112128441.png" alt="image-20210426112128441"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426112209061.png" alt="image-20210426112209061"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426112302977.png" alt="image-20210426112302977"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426112333720.png" alt="image-20210426112333720"></p><h2 id="round四舍五入"><a href="#round四舍五入" class="headerlink" title="round四舍五入"></a>round四舍五入</h2><h3 id="定义和使用-9"><a href="#定义和使用-9" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>ROUND()</code>函数将数字四舍五入到指定的小数位数。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROUND(number,decimals)</span><br></pre></td></tr></table></figure><h3 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h3><p><code>number</code>：必选。需要进行舍入的数字。</p><p><code>decimals</code>：可选。<code>number</code>需要舍入到的小数的位数。缺省时，不保留小数位，返回整数类型。</p><h3 id="代码演示-9"><a href="#代码演示-9" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT ROUND(233.123,2);</span><br><span class="line">SELECT ROUND(233.567,2);</span><br><span class="line">SELECT ROUND(123.4);</span><br><span class="line">SELECT ROUND(123.7);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426113625956.png" alt="image-20210426113625956"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426113746253.png" alt="image-20210426113746253"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426113909533.png" alt="image-20210426113909533"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426114017392.png" alt="image-20210426114017392"></p><h2 id="truncate截断"><a href="#truncate截断" class="headerlink" title="truncate截断"></a>truncate截断</h2><h3 id="定义和使用-10"><a href="#定义和使用-10" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>TRUNCATE()</code>函数可以将一个数截断成指定的小数位数。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUCATE(number,decimals)</span><br></pre></td></tr></table></figure><h3 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h3><p><code>number</code>:必选。需要截断的数字。</p><p><code>decimals</code>：必选。需要截断的小数位数。</p><h3 id="代码演示-10"><a href="#代码演示-10" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRUNCATE(123.45678,2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426115207539.png" alt="image-20210426115207539"></p><h2 id="取余函数"><a href="#取余函数" class="headerlink" title="取余函数"></a>取余函数</h2><h3 id="定义和使用-11"><a href="#定义和使用-11" class="headerlink" title="定义和使用"></a>定义和使用</h3><p>MOD()函数可以返回一个数除以另一个数的余数。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOD(x,y) # x mod y = x- x/y * y</span><br><span class="line">或</span><br><span class="line">x MOD y</span><br><span class="line">或</span><br><span class="line">x % y</span><br></pre></td></tr></table></figure><h3 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h3><p><code>x</code>:必选。被除数。</p><p><code>y</code>：必选。除数。</p><h3 id="代码演示-11"><a href="#代码演示-11" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT MOD(5,2);</span><br><span class="line">SELECT 5 MOD 2;</span><br><span class="line">SELECT 5 % 2;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426132851907.png" alt="image-20210426132851907"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426133011212.png" alt="image-20210426133011212"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426133101551.png" alt="image-20210426133101551"></p><h2 id="rand取随机数"><a href="#rand取随机数" class="headerlink" title="rand取随机数"></a>rand取随机数</h2><h3 id="定义和使用-12"><a href="#定义和使用-12" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>RAND()</code>函数返回一个0（包含）到1（不包含）的随机数。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RAND(seed)</span><br></pre></td></tr></table></figure><h3 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h3><p><code>seed</code>：可选。表示种子数。如果设定了种子数，则每次生成随机数都是相等的。没有种子数则生成完全随机数。</p><h3 id="代码演示-12"><a href="#代码演示-12" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT RAND();</span><br><span class="line">SELECT RAND()*10; # 生成1（包括）-10（不包括）的随机数</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426134040809.png" alt="image-20210426134040809"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426134229398.png" alt="image-20210426134229398"></p><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ul><li><p><code>NOW()</code>:返回当前日期+时间。与<a href="#%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0">CURRENTTIMESTAMP()</a>函数效果一致。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426134623494.png" alt="image-20210426134623494"></p></li><li><p><code>CURDATE()</code>：返回当前日期。与<a href="#%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0">CURRENTDATE()</a>函数效果一致。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426135637716.png" alt="image-20210426135637716"></p><ul><li><code>CURTIME()</code>：返回当前时间。与<a href="#%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0">CURRENTTIME()</a>效果一致。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426135855051.png" alt="image-20210426135855051"></p><ul><li><p><code>YEAR(date)</code>:返回一个日期中的年份。（从1000-9999）。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426140713874.png"></p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426141107826.png" alt="image-20210426141107826"></p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426141202714.png" alt="image-20210426141202714"></p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426141635354.png" alt="image-20210426141635354"></p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426142955892.png" alt="image-20210426142955892"></p><ul><li><p><code>MONTH(date)</code>：返回给定日期中的月份(1-12)，用法与<code>YEAR(date)</code>一致。</p></li><li><p><code>DAY(date)</code>：返回给定日期中的月份(1-30)，用法与<code>YEAR(date)</code>一致。<code>DAYOFMONTH()</code>函数与此函数用法和功能一致。</p></li><li><p><code>DATE_FORMATE(date,formate)</code>:将参数日期转化为指定的格式。</p><p>  formate可以选如下一种或几种：</p><table><thead><tr><th align="center">格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">%a</td><td align="center">缩写的星期几（从SUN到SAT）</td></tr><tr><td align="center">%b</td><td align="center">缩写的月份名(从Jan到Dec)</td></tr><tr><td align="center">%c</td><td align="center">数字化的月份名(0-12)</td></tr><tr><td align="center">%D</td><td align="center">当月的第几天，跟上英语序数词后缀(1st,2nd,…)</td></tr><tr><td align="center">%d</td><td align="center">当月第几天，数字格式(00-31)</td></tr><tr><td align="center">%e</td><td align="center">当月第几天，数字格式(0-31)</td></tr><tr><td align="center">%f</td><td align="center">微秒(000000-999999)</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p><code>STR_TO_DATE(string,formate)</code>:返回一个基于参数字符串和格式的日期。</p></li><li><p><code>MONTHNAME(date)</code>：返回一个日期中的月份的完整英文名称。</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426145845933.png" alt="image-20210426145845933"></p></li><li><p><code>HOUR(date)</code>:返回一个日期中的小时部分，（0-838）。</p></li><li><p><code>MINUTE(date)</code>:返回一个日期或时间中的分钟部分，（0-59）。</p></li><li><p><code>SECOND(date)</code>:返回一个日期或时间中的秒钟部分，（0-59）。</p></li><li><p><code>DATEDIFF(date1,date2)</code>:返回两个日期之间相隔的天数。(date1-date2)</p></li></ul></li></ul><h1 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h1><ol><li><p><code>version():</code>返回当前MySQL数据库的版本类型。</p><p> <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426150903933.png" alt="image-20210426150903933"></p></li><li><p><code>user()</code>：返回当前MySQL连接的用户名和主机名。</p><p> <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426151359076.png" alt="image-20210426151359076"></p><p> <code>SESSION_USER()</code>和 <code>SYSTEM_USER() </code>的功能和效果与该函数一致。</p></li><li><p><code>password(string)</code>:加密字符串。<strong>5.7.5</strong>之后已废弃。</p></li><li><p><code> MD5(string)</code>:返回md5加密后的字符串。</p></li></ol><h1 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><h3 id="定义和使用-13"><a href="#定义和使用-13" class="headerlink" title="定义和使用"></a>定义和使用</h3><p><code>if()</code>函数当条件为true时返回一个值，为false时返回另一个值。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(condition,value_if_true,value_if_false)</span><br></pre></td></tr></table></figure><h3 id="参数-13"><a href="#参数-13" class="headerlink" title="参数"></a>参数</h3><p><code>condition</code>:必选。需要测试的条件。</p><p><code>value_if_true</code>:必选。当条件为true时返回的值。</p><p><code>value_if_false</code>:必选。当条件为false时返回的值。</p><h3 id="代码演示-13"><a href="#代码演示-13" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(STRCMP(&quot;hello&quot;,&quot;mysql&quot;)=0,&#x27;true&#x27;,&#x27;false&#x27;); # 判断两个字符串是否相等。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426154855550.png" alt="image-20210426154855550"></p><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><h3 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h3><p>相当于switch结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case 变量或表达式或字段</span><br><span class="line">when 常量1 then 值1[或语句;] #表达式不需要分号，语句的话需要分号</span><br><span class="line">when 常量2 then 值2[或语句;]</span><br><span class="line">...</span><br><span class="line">else 值n # 相当于default</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><blockquote><p>查询员工工资，要求</p><ul><li>部门号=30，显示的工资为原工资1.1倍；</li><li>部门号=40，显示的工资为原工资1.2倍；</li><li>部门号=50，显示的工资为原工资1.3倍；</li><li>其他部门，现实的工资为原工资</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary 原工资,</span><br><span class="line">CASE department_id</span><br><span class="line">WHEN 30 THEN salary * 1.1</span><br><span class="line">WHEN 40 THEN salary * 1.2</span><br><span class="line">WHEN 50 THEN salary * 1.3</span><br><span class="line">ELSE salary</span><br><span class="line">END 显示工资</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426224856785.png" alt="image-20210426224856785"></p><h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h3><p>相当于if-else结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case</span><br><span class="line">when 条件1 then 值1[或语句1;] #语句要加分号。</span><br><span class="line">when 条件2 then 值2[或语句2;]</span><br><span class="line">...</span><br><span class="line">else 值n</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><blockquote><p>查询员工工资情况</p><ul><li>大于20000，显示A级别；</li><li>大于15000，显示B级别；</li><li>大于10000，显示C级别；</li><li>否则，显示D级别。</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,salary,</span><br><span class="line">CASE </span><br><span class="line">WHEN salary &gt; 20000 THEN &quot;A级别&quot;</span><br><span class="line">WHEN salary &gt; 15000 THEN &quot;B级别&quot;</span><br><span class="line">WHEN salary &gt; 10000 THEN &quot;C级别&quot;</span><br><span class="line">ELSE &quot;D级别&quot;</span><br><span class="line">END 工资级别</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210426225839842.png" alt="image-20210426225839842"></p><h1 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h1><h2 id="DATE-ADD函数"><a href="#DATE-ADD函数" class="headerlink" title="DATE_ADD函数"></a>DATE_ADD函数</h2><h3 id="定义和使用-14"><a href="#定义和使用-14" class="headerlink" title="定义和使用"></a>定义和使用</h3><p>MySQL的DATE_ADD()函数用于在指定的日期加上特定的时间间隔或日期间隔，得到一个新的日期。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATE_ADD(date,INTERVAL value addUnit)</span><br></pre></td></tr></table></figure><ul><li><code>date</code>:给定的DATE类型的日期参数；</li><li><code>value</code>:时间间隔，可以是正数也可以是负数；</li><li><code>addUnit</code>:可选以下值（常用的）：<code>SECOND</code>、<code>MINUTE</code>、<code>HOUR</code>、<code>DAY</code>、<code>MONTH</code>、<code>YEAR</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类</title>
      <link href="/posts/3742615103/"/>
      <url>/posts/3742615103/</url>
      
        <content type="html"><![CDATA[<h1 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>可以实现键盘输入数据到程序中。</p><h3 id="引用类型的一般使用步骤："><a href="#引用类型的一般使用步骤：" class="headerlink" title="引用类型的一般使用步骤："></a>引用类型的一般使用步骤：</h3><h4 id="1、导包："><a href="#1、导包：" class="headerlink" title="1、导包："></a>1、导包：</h4><p>​    <code>import 包路径.类名称</code></p><p>​    如果需要使用的目标类和当前类位于同一个包，则可以省略导包语句。只有java.lang包下的内容不需要导包，其他的包都需要import语句</p><h4 id="2、创建："><a href="#2、创建：" class="headerlink" title="2、创建："></a>2、创建：</h4><p>​    <code>类名称 对象名 = new 类名称(参数列表);</code></p><h4 id="3、使用："><a href="#3、使用：" class="headerlink" title="3、使用："></a>3、使用：</h4><p>​    对象名.成员方法名()</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>导包：<code>import java.util.Scanner</code></p></li><li><p>构造方法：<code>Scanner sc = new Scanner(System.in);//没有无参构造，参数System.in表示从键盘读取输入</code></p></li><li><p>成员方法：</p><ul><li><code>sc.nextInt();//读入键盘输入的整数值</code></li><li><code>sc.next();//读入键盘输入的字符串</code></li></ul></li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="1-求和"><a href="#1-求和" class="headerlink" title="1.求和"></a>1.求和</h3><blockquote><p>键盘录入两个数据并求和</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个整数：&quot;</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> sum = a + b;</span><br><span class="line">        System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;的和是：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210301224741217.png" alt="image-20210301224741217"></p><h3 id="2-求三个数中最大值"><a href="#2-求三个数中最大值" class="headerlink" title="2.求三个数中最大值"></a>2.求三个数中最大值</h3><blockquote><p>键盘录入三个数据并获取最大值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxInThree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第三个数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> c = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> max = (a &gt; b) ? a : b;</span><br><span class="line">        max = (max &gt; c) ? max : c;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值是:&quot;</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210301224959292.png" alt="image-20210301224959292"></p><h1 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>创建对象时，只有创建对象的语句，却没有把对象地址值赋值给某个变量。虽然是创建对象的简化写法，但是应用<br>场景非常有限。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名(参数列表);</span><br></pre></td></tr></table></figure><p>比如：<code>new Scanner(System.in);</code></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li><p>创建匿名对象直接调用方法，没有变量名。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br></pre></td></tr></table></figure></li><li><p>一旦调用两次方法，就是创建了两个对象，造成浪费，请看如下代码。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br></pre></td></tr></table></figure><blockquote><p>一个匿名对象，只能使用一次。</p></blockquote></li><li><p>匿名对象可以作为方法的参数和返回值。</p><ul><li><p>作为参数</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 普通方式</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">input(sc);</span><br><span class="line"><span class="comment">//匿名对象作为方法接收的参数</span></span><br><span class="line">input(<span class="keyword">new</span> Scanner(System.in));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Scanner sc)</span></span>&#123;</span><br><span class="line">System.out.println(sc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210301230616695.png" alt="image-20210301230616695"></p></li><li><p>作为返回值</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 普通方式</span></span><br><span class="line">Scanner sc = getScanner();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">getScanner</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//普通方式</span></span><br><span class="line"><span class="comment">//Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">//return sc;</span></span><br><span class="line"><span class="comment">//匿名对象作为方法返回值</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210301231514922.png" alt="image-20210301231514922"></p></li></ul></li></ol><h1 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h1><h2 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h2><p>此类的实例用于生成伪随机数。</p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><ul><li><p>导包：<code>import java.util.Random</code></p></li><li><p>构造方法：</p><ul><li><p><code>public Random()</code>:</p></li><li><p><code>public Random(long seed)</code>:同一种子生成随机数是一样的</p></li></ul></li><li><p>成员方法：</p><ul><li><code>public int nextInt()</code>:返回伪随机整数。</li><li><code>public int nextInt(int n)</code>:返回一个伪随机数，范围在0（包括）和指定值n（不包括）之间的<br>  int 值。</li></ul></li></ul><h2 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="1-生成三个十以内的整数"><a href="#1-生成三个十以内的整数" class="headerlink" title="1.生成三个十以内的整数"></a>1.生成三个十以内的整数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRandom2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">//        System.out.println(&quot;第一个十以内随机整数&quot; + random.nextInt(10)) ;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;第二个十以内随机整数&quot; + random.nextInt(10)) ;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;第三个十以内随机整数&quot; + random.nextInt(10)) ;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span>;i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;个十以内随机整数:&quot;</span> + random.nextInt(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210303202621072.png" alt="image-20210303202621072"></p><h3 id="2-猜数字小游戏"><a href="#2-猜数字小游戏" class="headerlink" title="2.猜数字小游戏"></a>2.猜数字小游戏</h3><blockquote><p>游戏开始时，会随机生成一个1-100之间的整数<code>number</code> 。玩家猜测一个数字<code>guessNumber</code> ，会与<code>number</code>作比<br>较，系统提示大了或者小了，直到玩家猜中，游戏结束。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRandom3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//生成一个随机数</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> number = random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;生成的随机数是:&quot;</span> + number);</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> guessNumber;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你认为的数字:&quot;</span>);</span><br><span class="line">            guessNumber = sc.nextInt();</span><br><span class="line">            <span class="comment">// 如果用户猜测小于随机数</span></span><br><span class="line">            <span class="keyword">if</span> (guessNumber &lt; number) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你猜的数小了。&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果用户猜测大于随机数</span></span><br><span class="line">            <span class="keyword">if</span> (guessNumber &gt; number) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你猜的数大了。&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果用户猜测等于随机数</span></span><br><span class="line">            <span class="keyword">if</span> (guessNumber == number) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜你，猜对了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210303205932148.png" alt="image-20210303205932148"></p><h1 id="ArrayList集合类"><a href="#ArrayList集合类" class="headerlink" title="ArrayList集合类"></a>ArrayList集合类</h1><h2 id="引入—对象数组"><a href="#引入—对象数组" class="headerlink" title="引入—对象数组"></a>引入—对象数组</h2><p>使用学生数组，存储三个学生对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student</span></span><br><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;刘备&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;关羽&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        Student[] students = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line">        students[<span class="number">0</span>] = s1;</span><br><span class="line">        students[<span class="number">1</span>] = s2;</span><br><span class="line">        students[<span class="number">2</span>] = s3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; students.length;i++) &#123;</span><br><span class="line">            System.out.println(students[i].getName() + <span class="string">&quot;---&quot;</span> + students[i].getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210303212335559.png" alt="image-20210303212335559"></p><p>到目前为止，我们想存储对象数据，选择的容器，只有对象数组。而数组的长度是固定的，无法适应数据变化的需<br>求。为了解决这个问题，Java提供了另一个容器<code>java.util.ArrayList</code> 集合类,让我们可以更便捷的存储和操作对<br>象数据。</p><h2 id="什么是ArrayList"><a href="#什么是ArrayList" class="headerlink" title="什么是ArrayList"></a>什么是ArrayList</h2><p><code>java.util.ArrayList</code> 是大小可变的数组的实现，存储在内的数据称为元素。此类提供一些方法来操作内部存储的元素。  ArrayList 中可不断添加元素，其大小也自动增长。</p><p>数组的长度不可以发生改变，但是ArrayList集合的长度是可以随意变化的。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/Screenshot_20200624_164629.png" alt="Screenshot_20200624_164629"></p><p>上图的 <code>&lt;E&gt;</code> 表示泛型。</p><p>泛型只能是<strong>引用类型</strong>，不能是基础类型。</p><p>泛型就是定义一种模板，例如<code>ArrayList&lt;T&gt;</code>，然后在代码中为用到的类创建对应的<code>ArrayList&lt;类型&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T e)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建可以存储String的ArrayList:</span></span><br><span class="line">ArrayList&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 创建可以存储Float的ArrayList:</span></span><br><span class="line">ArrayList&lt;Float&gt; floatList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line"><span class="comment">// 创建可以存储Person的ArrayList:</span></span><br><span class="line">ArrayList&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br></pre></td></tr></table></figure><p>对于ArrayList来说，直接打印得到的不是地址值，而是其中的内容；如果ArrayList为空，则得到的是:<strong>[]</strong></p><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><ul><li>导包：<code>java.util.ArrayList</code></li><li>构造方法：<code>public ArrayList() </code><ul><li><code>ArrayList&lt;E&gt; list = new ArrayList&lt;E&gt;();</code></li><li>在JDK 7后,右侧泛型的尖括号之内可以留空，但是&lt;&gt;仍然要写。简化格式：<ul><li><code>ArrayList&lt;E&gt; list = new ArrayList&lt;&gt;();</code></li></ul></li></ul></li><li>成员方法：见下</li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><p><code>public boolean add(E e):</code>向集合中添加元素。参数类型和泛型一致。</p><p>​        <strong>对于ArrayList的add方法来说，添加元素一定是成功的，返回值可用可不用，但是对于其他集合来说，添加元素不一定成功</strong></p><p><code>public E  get(int index):</code>从集合中获取元素，参数是索引编号。</p><p><code>public E  remove(int index):</code>从集合中删除元素。</p><p><code>public int size():</code>获取集合的尺寸长度，返回值时集合中元素个数。</p><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayList2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;is&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;interesting&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;interesting&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取集合大小</span></span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除元素</span></span><br><span class="line">        String rmStr = list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(rmStr);</span><br><span class="line">        <span class="comment">// 获取集合大小</span></span><br><span class="line">        size = list.size();</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取索引元素</span></span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210303221044643.png" alt="image-20210303221044643"></p><h2 id="如何存储基本数据类型"><a href="#如何存储基本数据类型" class="headerlink" title="如何存储基本数据类型"></a>如何存储基本数据类型</h2><p>ArrayList对象不能存储基本类型，只能存储引用类型的数据。类似<int> 不能写，但是存储基本数据类型对应的<br>包装类型是可以的。所以，想要存储基本类型数据， &lt;&gt; 中的数据类型，必须转换后才能编写，转换写法如下：</p><table><thead><tr><th align="center">基本类型</th><th align="center">基本包装类型</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table><h2 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="1-数值添加到集合"><a href="#1-数值添加到集合" class="headerlink" title="1.数值添加到集合"></a>1.数值添加到集合</h3><blockquote><p>生成6个1~33之间的随机整数,添加到集合,并遍历</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayList3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 生成6个1-33的随机整数，并添加到集合</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        ArrayList&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> number;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            number = random.nextInt(<span class="number">33</span>) + <span class="number">1</span>;</span><br><span class="line">            numbers.add(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Integer num : numbers) &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210304113328560.png" alt="image-20210304113328560"></p><h3 id="2-对象添加到集合"><a href="#2-对象添加到集合" class="headerlink" title="2.对象添加到集合"></a>2.对象添加到集合</h3><blockquote><p>自定义4个学生对象,添加到集合,并遍历</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayList4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义4个学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;唐僧&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">1500</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;沙和尚&quot;</span>, <span class="number">800</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ArrayList</span></span><br><span class="line">        ArrayList&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        students.add(s1);</span><br><span class="line">        students.add(s2);</span><br><span class="line">        students.add(s3);</span><br><span class="line">        students.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student.getName() + <span class="string">&quot;---&quot;</span> + student.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210304113830425-1614831522073.png" alt="image-20210304113830425"></p><h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><h2 id="String类概述"><a href="#String类概述" class="headerlink" title="String类概述"></a>String类概述</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>java.lang.String</code>类代表字符串。Java程序中所有的字符串文字（例如”abc” ）都可以被看作是实现此类的实<br>例。<br>类<code>String</code>中包括用于检查各个字符串的方法，比如用于比较字符串，搜索字符串，提取子字符串…</p><h3 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h3><ol><li><p>字符串的内容永不可变</p><ul><li><pre><code class="java">  String s1 = &quot;abc&quot;;  s1 += &quot;d&quot;;  System.out.println(s1); // &quot;abcd&quot;  // 内存中有&quot;abc&quot;，&quot;abcd&quot;两个对象，s1从指向&quot;abc&quot;，改变指向，指向了&quot;abcd&quot;。  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 因为字符串不可变，所以字符串可以共享使用</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">String s1 = &quot;abc&quot;;</span><br><span class="line">String s2 = &quot;abc&quot;;</span><br><span class="line">// 内存中只有一个&quot;abc&quot;对象被创建，同时被s1和s2共享。</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>字符串效果上相当于char数组，但是底层实现是byte数组</p><ul><li><p><code>&quot;abc&quot;</code> 等效于 <code>char[] data=&#123; &#39;a&#39; , &#39;b&#39; , &#39;c&#39; &#125;</code> 。</p></li><li><pre><code class="java">  String str = &quot;abc&quot;;  等价于  char[] data = &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;;  String str = new String(data);  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 使用</span><br><span class="line"></span><br><span class="line">- 导包：String类位于`java.lang`包下，无需导包即可使用。</span><br><span class="line">- 构造方法：</span><br><span class="line">- `public String()`:初始化创建新的String对象，以使其表示空字符串。</span><br><span class="line">- `public String(char[] values)`:通过当前参数的字符数组来创建新的字符串。</span><br><span class="line">- `public String(byte[] values)`:通过当前参数的byte数组来创建新的字符串。</span><br><span class="line">- 成员方法：见下</span><br><span class="line"></span><br><span class="line">## 常用方法</span><br><span class="line"></span><br><span class="line">### 判断功能的方法</span><br><span class="line"></span><br><span class="line">1. `public boolean equals(Object anObject):`将此字符串与指定对象进行比较。当且仅当指定对象不为空且为字符序列与比较字符串一致的String对象时，返回true；其他情况返回false。</span><br><span class="line">2. `public boolean equalsIgnoreCase(String str):`将此字符串于指定字符串进行比较。</span><br><span class="line"></span><br><span class="line">### 代码演示</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package cn.shenzc.java;</span><br><span class="line"></span><br><span class="line">public class TestString1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 三种构造方法</span><br><span class="line">        String str1 = new String(); // 创建空字符串</span><br><span class="line">        System.out.println(&quot;str1 = &quot; + str1);</span><br><span class="line">        char[] data = &#123;&#x27;d&#x27;, &#x27;a&#x27;, &#x27;t&#x27;, &#x27;a&#x27;&#125;;</span><br><span class="line">        String str2 = new String(data);</span><br><span class="line">        System.out.println(&quot;str2 = &quot; + str2);</span><br><span class="line">        byte[] number = &#123;97, 98&#125;; // 数字转换成对应的ASCII值</span><br><span class="line">        String str3 = new String(number);</span><br><span class="line">        System.out.println(&quot;str3 = &quot; + str3);</span><br><span class="line"></span><br><span class="line">        // 直接生成字符串</span><br><span class="line">        String str4 = &quot;Hello Java!&quot;;</span><br><span class="line"></span><br><span class="line">        // 判断功能的方法</span><br><span class="line">        System.out.println(str4.equals(&quot;Hello Java&quot;));</span><br><span class="line">        System.out.println(&quot;Hello java!&quot;.equals(str4));// 推荐写法，因为对象可能为null，会抛出NPE</span><br><span class="line">        System.out.println(&quot;hello java!&quot;.equalsIgnoreCase(str4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210304153815835.png" alt="image-20210304153815835"></p><h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ol><li><code>public int length()</code>:返回字符串的长度。</li><li><code>public String concat(String str)</code>:将指定字符串连接到字符串末尾。</li><li><code>public char charAt(int index)</code>:返回索引处的char值。</li><li><code>public int indexOf(String str)</code>:返回指定子字符串在此字符串中第一次出现的索引值。</li><li><code>public String substring(int beginIndex)</code>:返回从beginIndex开始直到字符串末尾的子字符串。</li><li><code>public String substring(int beginIndex, int endIndex)</code>:返回beginIndex（包括）与endIndex（不包括）之间的子字符串。</li></ol><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;str的长度为：&quot;</span> + str.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;str第20位的字符为：&quot;</span> + str.charAt(<span class="number">19</span>)); <span class="comment">// 索引从零开始</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i第一次出现的位置为：&quot;</span> + (str.indexOf(<span class="string">&#x27;i&#x27;</span>) + <span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;第6位到结尾的子字符串为：&quot;</span> + str.substring(<span class="number">5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;第7位到12位的子字符串为：&quot;</span> + str.substring(<span class="number">7</span>, <span class="number">13</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;将str与123连接后的字符串为：&quot;</span> + str.concat(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210304202117487.png" alt="image-20210304202117487"></p><h3 id="转换功能的方法"><a href="#转换功能的方法" class="headerlink" title="转换功能的方法"></a>转换功能的方法</h3><ol><li><code>public char[] toCharArray()</code>:将此字符串转换为新的字符数组。</li><li><code>public byte[] getBytes()</code>:使用平台的默认字符集将该 String编码转换为新的字节数组。</li><li><code>public String replace(CharSequence target, CharSequence replacement)</code>:将与target字符串匹配的子字符串用replacement替换。</li></ol><h3 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;TestString&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> aChar : chars) &#123;</span><br><span class="line">            System.out.print(aChar + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = str.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> aByte : bytes) &#123;</span><br><span class="line">            System.out.print(aByte + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;原始字符串：&quot;</span> + str);</span><br><span class="line">        String replace = str.replace(<span class="string">&quot;String&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;替换后的字符串：&quot;</span> + replace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210304204600802.png" alt="image-20210304204600802"></p><h3 id="分割功能的方法"><a href="#分割功能的方法" class="headerlink" title="分割功能的方法"></a>分割功能的方法</h3><ul><li><code>public String[] split(String regex)</code>:将字符串按照指定的regex（规则）拆分为字符串数组。</li></ul><h3 id="代码演示-6"><a href="#代码演示-6" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;aabacadaea&quot;</span>;</span><br><span class="line">        String[] as = str.split(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String a : as) &#123;</span><br><span class="line">            System.out.print(a + <span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        String str2 = <span class="string">&quot;a-b-c-d--e---f&quot;</span>;</span><br><span class="line">        String[] split = str2.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            System.out.print(s + <span class="string">&quot;+&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210304205507768.png" alt="image-20210304205507768"></p><h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><p>由于字符串是不可变的，所以字符串是可以共享的，由此引出字符串常量池。只要是直接用双引号生成的字符串都位于字符串常量池中，是可以共享的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStringPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;Shen&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;Shen&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span>[] c = &#123;<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;n&#x27;</span>&#125;;</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(c);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">        System.out.println(s1 == s3);</span><br><span class="line">        System.out.println(s2 == s3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:%5CGitHub%5Chexo%5Csource%5C_posts%5CJava%E5%B8%B8%E7%94%A8%E7%B1%BB.assets%5Cimage-20200624220304046.png"></p><p>对于基本类型来说，==是进行值比较；对于引用类型来说是地址比较。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200624222535093.png" alt="image-20200624222535093"></p><h2 id="代码演示-7"><a href="#代码演示-7" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="1-拼接字符串"><a href="#1-拼接字符串" class="headerlink" title="1.拼接字符串"></a>1.拼接字符串</h3><blockquote><p>定义一个方法，把数组{1,2,3}按照指定格式拼接成一个字符串。格式参照如下：<code>[word1#word2#word3]</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        String s = arrayToString(numbers);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == (arr.length - <span class="number">1</span>)) &#123;</span><br><span class="line">                str = str.concat(arr[i] + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str = str.concat(arr[i] + <span class="string">&quot;#&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210304212500806.png" alt="image-20210304212500806"></p><h3 id="2-统计字符个数"><a href="#2-统计字符个数" class="headerlink" title="2.统计字符个数"></a>2.统计字符个数</h3><blockquote><p>键盘录入一个字符串，统计字符串中大小写字母及数字字符个数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str = sc.nextLine();</span><br><span class="line">        <span class="keyword">int</span> upper = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lower = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> others = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> element;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            element = str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(element &gt;= <span class="number">48</span> &amp;&amp; element &lt;= <span class="number">57</span>) &#123;  <span class="comment">// 直接用&#x27;0&#x27;和&#x27;9&#x27;代替即可</span></span><br><span class="line">                number++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element &gt;= <span class="number">65</span> &amp;&amp; element &lt;= <span class="number">90</span>) &#123;  <span class="comment">// 直接用&#x27;A&#x27;和&#x27;Z&#x27;代替即可</span></span><br><span class="line">                upper++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element &gt;= <span class="number">97</span> &amp;&amp; element &lt;= <span class="number">122</span>) &#123;  <span class="comment">// 直接用&#x27;a&#x27;和&#x27;z&#x27;代替即可</span></span><br><span class="line">                lower++;</span><br><span class="line">            &#125; <span class="keyword">else</span> others++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;在字符串&quot;</span> + str + <span class="string">&quot;中\n，数字出现了&quot;</span> + number + <span class="string">&quot;次，小写字母出现了&quot;</span> +</span><br><span class="line">                lower + <span class="string">&quot;次，大写字母出现了&quot;</span> + upper + <span class="string">&quot;次，其他字符出现了&quot;</span> + others + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210304223956949.png" alt="image-20210304223956949"></p><h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>static 关键字，可以用来修饰成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属<br>于某个对象的。也就是说，既然属于类，就可以不靠创建对象来调用了。</p><h2 id="static修饰成员变量"><a href="#static修饰成员变量" class="headerlink" title="static修饰成员变量"></a>static修饰成员变量</h2><p>当 static 修饰成员变量时，该变量称为<strong>类变量</strong>。该类的每个对象都共享同一个类变量的值。任何对象都可以更改<br>该类变量的值，也可以在不创建该类的对象的情况下对类变量进行操作。</p><h3 id="定义格式："><a href="#定义格式：" class="headerlink" title="定义格式："></a>定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> 数据类型 变量名;</span><br></pre></td></tr></table></figure><h2 id="static修饰成员方法"><a href="#static修饰成员方法" class="headerlink" title="static修饰成员方法"></a>static修饰成员方法</h2><p>用static修饰的成员方法，叫作类方法，更习惯叫作静态方法。静态方法在声明中有static ，建议使用类名来调用，而不需要创建类的对象。调用方式非常简单。</p><h3 id="定义格式：-1"><a href="#定义格式：-1" class="headerlink" title="定义格式："></a>定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> 返回值 方法名(参数列表) &#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>静态不能直接访问非静态内容，但可以访问静态内容（静态变量和方法）。因为在内存中先有静态内容，后有非静态内容。但是非静态的成员方法可以访问静态变量和方法。</li><li>对于本类当中的静态方法，可以省略类名称。</li><li>静态方法中不能使用this关键字。因为this代表当前对象。</li><li>推荐使用  类名.静态成员  的方法调用静态成员。</li></ol><h2 id="static修饰代码块"><a href="#static修饰代码块" class="headerlink" title="static修饰代码块"></a>static修饰代码块</h2><p>定义在成员位置，用static修饰的代码块叫作静态代码块。随着类的加载而执行且只执行一次，优先于main方法和构造方法的执行。其作用是给静态变量赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123; </span><br><span class="line"><span class="comment">//静态代码块内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组工具类Arrays"><a href="#数组工具类Arrays" class="headerlink" title="数组工具类Arrays"></a>数组工具类Arrays</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p><code>java.util.Arrays</code>是一个与数组相关的工具类，提供了大量的静态方法，用来实现数组常见的操作，如搜索、排序。</p><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="public-static-String-toString-int-arr"><a href="#public-static-String-toString-int-arr" class="headerlink" title="public static String toString(int[]  arr):"></a>public static String toString(int[]  arr):</h3><p>将参数数组变成字符串。格式：[元素1，元素2，…]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array1 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">76</span>,<span class="number">34</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(array1));</span><br><span class="line">        String[] array2 = &#123;<span class="string">&quot;shen&quot;</span>,<span class="string">&quot;zhi&quot;</span>,<span class="string">&quot;cheng&quot;</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(array2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200626145233749.png" alt="image-20200626145233749"></p><h3 id="public-static-void-sort-int-arr-："><a href="#public-static-void-sort-int-arr-：" class="headerlink" title="public static void sort(int[] arr)："></a>public static void sort(int[] arr)：</h3><p>按照默认升序对数组元素进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array1 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">76</span>,<span class="number">34</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(array1));</span><br><span class="line">        String[] array2 = &#123;<span class="string">&quot;shen&quot;</span>,<span class="string">&quot;zhi&quot;</span>,<span class="string">&quot;cheng&quot;</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(array2));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序：&quot;</span>);</span><br><span class="line">        Arrays.sort(array1);</span><br><span class="line">        System.out.println(Arrays.toString(array1));</span><br><span class="line">        Arrays.sort(array2);</span><br><span class="line">        System.out.println(Arrays.toString(array2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200626171303463.png" alt="image-20200626171303463"></p><h2 id="代码演示-8"><a href="#代码演示-8" class="headerlink" title="代码演示"></a>代码演示</h2><blockquote><p>使用Arrays 相关的API，将一个随机字符串中的所有字符升序排列，并倒序打印。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 随机字符串</span></span><br><span class="line">        String str = <span class="string">&quot;dcvajhgyi&quot;</span>;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        <span class="comment">// 先转化为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        <span class="comment">// 倒序输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = chars.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.print(chars[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(chars[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210304233719551.png" alt="image-20210304233719551"></p><h1 id="数学工具类Math"><a href="#数学工具类Math" class="headerlink" title="数学工具类Math"></a>数学工具类Math</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p><code>java.lang.Math</code>是数学相关的工具类，提供了大量的静态方法，完成与数学相关的操作。</p><h2 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>public static double abs(double num):</code>获取绝对值</li><li><code>public static double ceil(double num):</code>向上取整。返回大于等于参数的最小整数。</li><li><code>public static double floor(double num):</code>向下取整。返回小于等于参数的最小整数。</li><li><code>public static long round(double num):</code>四舍五入。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX笔记</title>
      <link href="/posts/4276076626/"/>
      <url>/posts/4276076626/</url>
      
        <content type="html"><![CDATA[<h1 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h1><p>LaTeX中能够出现的字符:</p><ul><li>26个英文字母，包括大小写；</li><li>0-9十个数字；</li><li>出现在input file的十六个标点符号：<ul><li><code>. , ; : ! ? ‘ ’ ( ) [ ] / - * @</code></li><li>注意单引号的输入方式：左边输入`，右边输入’；</li></ul></li><li>出现在command中的十个特殊符号：<ul><li><code>~ # $ % ^ &amp; _ \ &#123; &#125;</code></li><li>大多数LaTeX command会以 <code>\</code> 开头；</li></ul></li><li>用于数学公式的五个符号：<ul><li><code>+ = | &lt; &gt;</code></li><li><code>+</code>和 <code>=</code> 也能用于原始文本；</li></ul></li><li><code>&quot;</code>极少使用；</li><li>不可见字符如空格和回车，统一视作空格；<ul><li>输入的多个空格只视作一个空格；</li></ul></li><li>空行，只包括空格的行，会被LaTeX解译为一段的结束。</li></ul><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>大多数LaTeX命令描述了文档的逻辑结构。要了解这些命令，必须知道LaTeX是怎样感知逻辑结构的。一个文档包含了不同大小的逻辑结构，先从非常熟悉的中间大小的结构–句子和段落谈起。</p><h2 id="句子和段落"><a href="#句子和段落" class="headerlink" title="句子和段落"></a>句子和段落</h2><p>简单的句子和段落对LaTeX来说是没有任何问题的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125; </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">The ends of words and setences are marked by spaces. It doesn&#x27;t matter how many spaces     you</span><br><span class="line">type; one is as good as 100.</span><br><span class="line"></span><br><span class="line">One or more   blank lines denote the end of a paragraph.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210119151439436.png" alt="sentences"></p><h3 id="引号（Quotation-Marks）"><a href="#引号（Quotation-Marks）" class="headerlink" title="引号（Quotation Marks）"></a>引号（Quotation Marks）</h3><p>LaTeX中有四个引号：左右单引号，左右双引号。双引号可以由两个单引号得到。</p><p>左单引号可以使用 `得到；右单引号可以使用’得到；</p><p>左双引号可以使用``得到；右双引号可以使用’’得到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125; </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">单引号： 左单引号`，右单引号&#x27;</span><br><span class="line"></span><br><span class="line">双引号： 左双引号``，右双引号&#x27;&#x27;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210119152200905.png" alt="引号示例"></p><p>双引号后面跟着一个单引号，或者单引号后跟着一个双引号，碰到这种情况时，```，会让我们觉得模棱两可。解决的办法是，在两个符号之间添加一个命令 ,(反斜杠加一个逗号)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125; </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">``\,`十一&#x27;还是`十二&#x27;\,&#x27;&#x27;他问道。</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210120093323050.png" alt="单双引号同时出现"></p><h3 id="破折号（Dashes）"><a href="#破折号（Dashes）" class="headerlink" title="破折号（Dashes）"></a>破折号（Dashes）</h3><p>可以使用三种大小的破折号：</p><ul><li>用于字母间的连字符，由一个 - 表示；</li><li>用于表示数字的范围，由两个 – 表示；</li><li>用于标点的长破折号，由三个 — 表示。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125; </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">用于字母间的连字符：X-Ray</span><br><span class="line"></span><br><span class="line">用于表示数字范围：1--2</span><br><span class="line"></span><br><span class="line">用于表示标点的长破折号： 就像这样---</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210120094516722.png" alt="三种破折号"></p><p>注意：通常在破折号之前和之后都没有空格；破折号不是减号，减号只能用于数学公式中。</p><h3 id="句点（Period）后的空格"><a href="#句点（Period）后的空格" class="headerlink" title="句点（Period）后的空格"></a>句点（Period）后的空格</h3><p>排字工人通常会在一句话的结尾的句点（.）处添加一些额外的空格，来表示句子的结束。对于人类来说，这是很容易的，但是对于TeX来说，就不那么容易了。因为它无法判断一个句点是否位于句子的结尾。TeX简单的将一个未跟在大写字母后的句点当作句子的结尾。大多数情况下，这样是可行的。但是，当面对一些简写，例如”etc.”，这样处理就会产生问题。你可以在句点后使用 \space（\后跟空格或者是一行的结尾）命令告诉TeX，这个句点不是句子的结尾。反斜杠之后无论多少个空格都是可行的，但是不能在句点和反斜杠之间添加空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125; </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">This is a sentence.This another sentence. % 未跟在大写字母后，也没有使用\space命令，表示是一句话的结尾</span><br><span class="line"></span><br><span class="line">This is a sentencE.you know.  % 跟在大写字母后，表示不是一句话的结尾</span><br><span class="line"></span><br><span class="line">There just one sentence.\ not two. % 使用了\space 命令，表示不是一句话的结尾</span><br><span class="line"></span><br><span class="line">There is another example.\</span><br><span class="line">hahaha</span><br><span class="line"></span><br><span class="line">test. \ oh</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210120102310753.png" alt="image-20210120102310753"></p><p>在某些情况下，即使句点是跟在大写字母后，也表示句子的结束。此情况下，你需要在句点前使用@命令告诉TeX句点位于句子的结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125; </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">The Romans wrote I + I = II\@.Really!</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210120104404943.png" alt="image-20210120104404943"></p><p>如果表示句子结尾的句点后面跟了右圆括号，或者右引号（单、双），需要在圆括号或者引号后边添加多余的空格（使用\space命令)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125; </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">``Beans (lima,etc.)\  hava vitamin B\@.&#x27;&#x27;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210120105509841.png" alt="image-20210120105509841"></p><p><code>? ! :</code>也需要在它们的后面添加额外的空格，除非它们跟在一个大写字母之后。\space和@和在句点中的使用方法是一致的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小鹅通课程下载</title>
      <link href="/posts/2986382156/"/>
      <url>/posts/2986382156/</url>
      
        <content type="html"><![CDATA[<h1 id="登录获取链接"><a href="#登录获取链接" class="headerlink" title="登录获取链接"></a>登录获取链接</h1><p>1、微信中登录打开相关课程页面</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107123506231.png" alt="课程首页"></p><p>2、点击右上角，打开微信的分享页面</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107125035590.png" alt="share"></p><p>4.点击复制链接</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107125122664.png" alt="copylink"></p><h1 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h1><p>大部分浏览器，如：QQ浏览器，VIA浏览器等都具有嗅探下载的功能。这里以VIA为例。</p><p>1、打开VIA，粘贴上一步中复制的课程链接。需要使用手机号登录小鹅通。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107125205923.png" alt="嗅探"></p><p>2、点进课程，点击播放</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107125301958.png" alt="play"></p><p>3、打开VIA的菜单，选择工具箱</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107125409085.png" alt="toolbox"></p><p>4、选择资源嗅探</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107125453997.png" alt="Snipper"></p><p>5、得到一个m3u8串流地址</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107125548355.png" alt="m3u8"></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下载的方式也是多种多样。实际操作发现直接使用via的下载功能下载是下载不了的：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107125853384.png" alt="copym3u8"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107125924735.png" alt="viadownload"></p><p>这里介绍几种我使用的方法，大体能够下载m3u8的视频下载器都可以下载，可以百度m3u8下载器。</p><p>1、复制via嗅探出来的m3u8地址，打开idm+，选择剪贴板导入链接，亲测下载成功。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107130229731.png" alt="idmdownload"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107130239814.png" alt="idmdownloadcompleted"></p><p>2、QQ浏览器无脑下载</p><ul><li><p>粘贴从微信复制到的课程链接，在QQ浏览器打开登录</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107131422425.png" alt="qqbrowsercourse"></p></li><li><p>点进课程，点击播放</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107131522649.png" alt="qqplay"></p></li><li><p>打开QQ浏览器菜单，选择更多工具</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107131634956.png" alt="qqtools"></p></li><li><p>然后选择资源嗅探，选择下载</p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107131739446.png" alt="qqsnipper"></p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107131751783.png" alt="qqdownloading"></p><p>  <img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20210107131808606.png" alt="qqdownloadcomplete"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小鹅通 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/posts/1503359168/"/>
      <url>/posts/1503359168/</url>
      
        <content type="html"><![CDATA[<h1 id="概念及优点"><a href="#概念及优点" class="headerlink" title="概念及优点"></a>概念及优点</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>css：Cascading Style Sheets 层叠样式表。</li><li>层叠：多个样式可以作用在同一个html的元素上，同时生效</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><p>功能强大</p></li><li><p>将内容展示和样式控制分离</p><ul><li><p>降低耦合度。解耦</p></li><li><p>让分工协作更容易</p></li><li><p>提高开发效率</p></li></ul></li></ul><h1 id="CSS的使用"><a href="#CSS的使用" class="headerlink" title="CSS的使用"></a>CSS的使用</h1><h2 id="CSS与HTML结合"><a href="#CSS与HTML结合" class="headerlink" title="CSS与HTML结合"></a>CSS与HTML结合</h2><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>在<strong>标签内</strong>使用<strong>style</strong>属性指定css代码。此方式不常用。</p><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><p> 在<strong>head标签</strong>内，定义<strong>style</strong>标签，style标签的标签体内容就是css代码。常用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="css">   &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello css<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h2><p>定义css资源文件。在head标签内，定义link标签，引入外部的资源文件。常用。</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* waibu.css*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>外部样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/waibu.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>外部样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>外部样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="keyword">@import</span> <span class="string">&quot;css/waibu.css&quot;</span>;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>外部样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201214190047324.png" alt="image-20201214190047324"></p><h1 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h1><h2 id="基础格式"><a href="#基础格式" class="headerlink" title="基础格式"></a>基础格式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">属性名<span class="number">1</span>:属性值<span class="number">1</span>;</span><br><span class="line">属性名<span class="number">2</span>:属性值<span class="number">2</span>; <span class="comment">/* 每一对属性用分号;分隔，最后一个可加可不加*/</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>筛选具有相似特征的元素。</p><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><ol><li><strong>ID选择器</strong>：选择具体的id属性值的元素.建议在一个html页面中id值唯一。<ul><li>语法：<code>#id属性值&#123;&#125;</code></li></ul></li><li><strong>元素选择器</strong>：选择具有相同标签名称的元素。<ul><li>语法：<code>标签名称&#123;&#125;</code></li><li>注意：ID选择器优先级高于元素选择器。</li></ul></li><li><strong>类选择器</strong>：选择具有相同的class属性值的元素。<ul><li> 语法：<code>.class属性值&#123;&#125;</code></li><li>注意：类选择器优先级高于元素选择器。</li></ul></li></ol><h3 id="扩展选择器"><a href="#扩展选择器" class="headerlink" title="扩展选择器"></a>扩展选择器</h3><ol><li><p>选择所有元素。</p><ul><li>语法：<code>*&#123;&#125;</code></li></ul></li><li><p>并集选择器：</p><ul><li>语法：<code>选择器1,选择器2&#123;&#125;</code></li></ul></li><li><p>子选择器：筛选选择器1元素下的所有子选择器2元素</p><ul><li>语法：<code>选择器1 选择器2&#123;&#125;</code></li></ul></li><li><p>父选择器：筛选选择器2元素的父选择器1元素</p><ul><li>语法：<code>选择器1 &gt; 选择器2&#123;&#125;</code></li></ul></li><li><p>属性选择器：选择属性名称，属性名=属性值的元素</p><ul><li>语法：<code>属性名称[属性名 = 属性值] &#123;&#125;</code></li></ul></li><li><p>伪类选择器：选择一些元素具有的状态。</p><ul><li><p>语法：<code>元素：状态&#123;&#125;</code></p></li><li><p>例如：<code>&lt;a&gt;</code>标签元素具有以下几种状态：</p><ul><li><p>link：初始化的状态</p></li><li><p>visited：被访问过的状态</p></li><li><p>active：正在访问状态</p></li><li><p>hover：鼠标悬浮状态。</p><p>可以使用：<code>a:link&#123;&#125;</code>的形式指定连接样式。</p></li></ul></li></ul></li></ol><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>以下是常用属性。</p><h3 id="字体、文本"><a href="#字体、文本" class="headerlink" title="字体、文本"></a>字体、文本</h3><ul><li>font-size：字体大小</li><li>color：文本颜色</li><li>text-align：对其方式</li><li>line-height：行高 </li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>background</li></ul><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><ul><li>border</li></ul><h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><ul><li>height：高度</li><li>width：宽度</li></ul><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ul><li><p>margin：外边距</p></li><li><p>padding：内边距</p><ul><li>默认情况下内边距会影响整个盒子的大小</li><li>box-sizing: border-box;  设置盒子的属性，让width和height就是最终盒子的大小</li></ul></li><li><p>float：浮动</p><ul><li>left</li><li>right</li></ul></li></ul><h1 id="CSS注册页面"><a href="#CSS注册页面" class="headerlink" title="CSS注册页面"></a>CSS注册页面</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/register.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;cn_info&quot;</span>&gt;</span>新用户注册<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;en_info&quot;</span>&gt;</span>USER REGISTER<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;register&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;u_name&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;paw&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;em&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;nam&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;mobilephone&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;mobilephone&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mobilephone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;birth&quot;</span>&gt;</span>出生日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">id</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;captcha&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;captcha&quot;</span> <span class="attr">id</span>=<span class="string">&quot;captcha&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/verify_code.jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;captcha_pic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;register_button&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">        已有账号？<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: aliceblue <span class="built_in">url</span>(<span class="string">&quot;../img/register_bg.png&quot;</span>) no-repeat fixed center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid darkgray;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cn_info</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: darkorange;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.en_info</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#u_name</span>, <span class="selector-id">#paw</span>, <span class="selector-id">#em</span>, <span class="selector-id">#nam</span>, <span class="selector-id">#tel</span>, <span class="selector-id">#sex</span>, <span class="selector-id">#birth</span>, <span class="selector-id">#code</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#username</span>, <span class="selector-id">#password</span>, <span class="selector-id">#email</span>, <span class="selector-id">#name</span>, <span class="selector-id">#mobilephone</span>, <span class="selector-id">#birthday</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid darkgray;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0.4em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#captcha</span>, <span class="selector-id">#captcha_pic</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid darkgray;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0.4em</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#register_button</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/regbtn.jpg&quot;</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">101px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: coral;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201214183345704.png" alt="image-20201214183345704"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP套接字</title>
      <link href="/posts/1692463639/"/>
      <url>/posts/1692463639/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Java为TCP通信提供了两个类：<code> java.net.Socket</code>和<code>java.net.ServerSocket</code>。一个Socket对象代表一个TCP连接中的一端。一个TCP连接是一个抽象的双向信道，他的两端由IP地址和端口号来进行识别。要进行TCP通信，TCP连接要进行一系列的活动：首先，客户端TCP向服务端TCP发送请求，要求建立TCP连接；服务端存在一个ServerSocket的实例，用来监听来自客户端的所有TCP连接的请求，并且对每一个进入的连接创建一个Socket对象来处理其请求。因此，客户端只需要使用Socket对象即可，服务端则需要处理ServerSocket和Socket两者的对象。</p><h1 id="创建一个TCP客户端"><a href="#创建一个TCP客户端" class="headerlink" title="创建一个TCP客户端"></a>创建一个TCP客户端</h1><p>客户端与一个积极等待连接的服务端初始化通信，TCP客户端一般要经过以下几个步骤：</p><ol><li>构造一个Socket类的实例：构造器与指定的远程主机和端口建立一个TCP连接。</li><li>通过Socket的IO流进行通信：建立连接后的Socket实例包含一个InputStream和OutputStream，这两个IO流可以像其他IO流一样使用。</li><li>使用Socket的close()方法关闭连接。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPEchoClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">2</span> || args.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Parameter(s): &lt;Server&gt; &lt;Word&gt; [&lt;Port&gt;]&quot;</span>);</span><br><span class="line">            <span class="comment">// 如果参数不是：服务器（ip或域名） 描述信息 端口号（可选）的格式，则抛出非法参数异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        String server = args[<span class="number">0</span>]; <span class="comment">// 服务器名或IP地址</span></span><br><span class="line">        <span class="comment">//利用String类的getBytes()方法将描述信息转为byte数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] data = args[<span class="number">1</span>].getBytes();</span><br><span class="line">        <span class="comment">//如果输入的参数包含端口号就将其赋值给port，否则默认port为7</span></span><br><span class="line">        <span class="keyword">int</span> servPort = (args.length == <span class="number">3</span>) ? Integer.parseInt(args[<span class="number">2</span>]) : <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接指定服务器端口的套接字</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(server, servPort);</span><br><span class="line">        System.out.println(<span class="string">&quot;Connected to server...sending echo string&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每一个被连接的Socket实例都有一个InputStream和一个OutputStream，它们可以向其他Java I/O流一样使用</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        out.write(data); <span class="comment">//发送描述信息给服务器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从服务器接收相同的描述信息</span></span><br><span class="line">        <span class="keyword">int</span> totalBytesRcvd = <span class="number">0</span>;<span class="comment">// 当前接收到的字节总数</span></span><br><span class="line">        <span class="keyword">int</span> bytesRcvd;<span class="comment">// 最后一次read接收到的字节数</span></span><br><span class="line">        <span class="keyword">while</span> (totalBytesRcvd &lt; data.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((bytesRcvd = in.read(data, totalBytesRcvd, data.length) - totalBytesRcvd) == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">&quot;Connection closed prematurely&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            totalBytesRcvd += bytesRcvd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Received:&quot;</span> + <span class="keyword">new</span> String(data));</span><br><span class="line"></span><br><span class="line">        socket.close();<span class="comment">// 关闭连接</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Socket方法详解"><a href="#Socket方法详解" class="headerlink" title="Socket方法详解"></a>Socket方法详解</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><code>public Socket()</code>：创建一个未连接的Socket对象。如果该应用指定了客户端TCP socket的实现，则调用该实现类的<code>createSocketImpl</code>方法来创建该Socket对象。如果没有则使用系统默认的socket实现类来创建该对象。在进行通信之前，必须通过connect()方法显式的建立连接。</li></ul><hr><ul><li><code>public Socket(String host,int port) throws UnknownHostException,IOException</code>：创建一个流式TCP套接字，并连接到指定主机的指定端口。如果指定主机为null，相当于调用了<code>InetAddress.getByName(null)</code>,也就是说，将地址指定为回环接口。不能确定主机的IP地址时，抛出<code>UnknownHostException</code> ；创建socket时发生IO错误，抛出<code>IOException</code>;端口号不在正确范围内（0~65535）时，抛出<code>IllegalArgumentException</code>。</li></ul><hr><ul><li><code>public Socket(String host,int port,InetAddress localAddr,int localPort) throws IOException</code>：创建一个TCP socket，与给定的主机和端口号相连接，并且也会将socket绑定（<code>bind()</code>）到指定的本地地址和端口。如果指定主机为null，相当于调用了<code>InetAddress.getByName(null)</code>,也就是说，将地址指定为回环接口。如果本地端口号为0，则由系统自动分配一个可用的端口。<code>localAddr</code>为null时，可以是任意本地（anyLocal）地址。创建socket时发生IO错误，抛出<code>IOException</code>;端口号不在正确范围内（0~65535）时，抛出<code>IllegalArgumentException</code>。</li></ul><hr><ul><li><code>public Socket(InetAddress addr,int port) throws IOException</code>：<code>addr</code>为IP地址。创建一个流式TCP socket并将其连接到指定IP地址的指定端口。如果该应用指定了客户端socket的实现，则调用该实现类的<code>createSocketImpl</code>方法来创建该Socket对象。如果没有则使用系统默认的socket实现类来创建该对象。创建socket时发生IO错误，抛出<code>IOException</code>;端口号不在正确范围内（0~65535）时，抛出<code>IllegalArgumentException</code>。<code>addr</code>为null时，抛出 <code>NullPointerException</code>。</li></ul><hr><ul><li><code>public Socket(InetAddress addr,int port,InetAddress localAddr,int localPort)throws IOException</code>：创建一个TCP socket并且与给定的远程地址和远程端口相连接。并且也会将socket绑定（<code>bind()</code>）到指定的本地地址和端口。如果<code>localAddr</code>为null，相当于将地址指定为任意本地地址（ <code>InetAddress.isAnyLocalAddress()</code>）。如果本地端口号为0，则由系统自动分配一个可用的端口。创建socket时发生IO错误，抛出<code>IOException</code>;端口号不在正确范围内（0~65535）时，抛出<code>IllegalArgumentException</code>。<code>addr</code>为null时，抛出 <code>NullPointerException</code>。</li></ul><hr><h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><ul><li><code>public void connect(SocketAddress endPoint)throws IOException</code>:将此socket连接到指定服务器。如果在连接过程中发生错误，抛出<code>IOException</code>；如果该socket有一个关联的信道，并且该信道处于非阻塞（non-blocking）状态，则抛出<code>IllegalBlockingModeException</code>;如果 <code>endPoint</code>为null或是不受此socket支持的SocketAddress的子类，则抛出<code>IllegalArgumentException</code>。</li><li><code>public void connect(SocketAddress endPoint,int timeout)throws IOException</code>:将此socket连接到指定服务器，并指定超时值（timeout value，以毫秒为单位）。timeout为0时代表永不超时。连接将会处于阻塞状态，直到连接建立或是发生错误。</li><li><code>InputStream getInputStream()</code>:返回一个输入流给该socket。如果该socket与某一信道相关联，则输入流的操作都将交给此信道。如果该信道处于非阻塞状态，那么该输入流的read操作将会抛出<code>IllegalBlockingModeException</code>。</li><li><code>OutputStream getOutputStream()</code>：返回一个输出流给该socket。</li><li><code>void close()</code>：关闭socket以及其关联的输入输出流。</li><li><code>void shutdownInput()</code>：在输入流一端关闭TCP连接。任意未读数据将会被丢弃，包括socket缓存的数据，运输中的数据以及将来到达的数据。此后任何尝试从此socket读取数据的行为都将抛出异常。</li><li><code>void shutdownOutput()</code>：在输出流一端关闭连接。但此方法会确保已经写入socket输出流的数据已经传输到另一端。</li><li><code>InetAddress getInetAddress()</code>:</li><li><code>int getPort()</code>:</li><li><code>InetAddress getLocalAddress()</code>:</li><li><code>int getLocalPort()</code>:</li><li><code>SocketAddress getRemoteSocketAddress()</code>:</li><li><code>SocketAddress getLocalSocketAddress()</code>:</li></ul><h1 id="SocketAddress抽象类以及InetSocketAddress类"><a href="#SocketAddress抽象类以及InetSocketAddress类" class="headerlink" title="SocketAddress抽象类以及InetSocketAddress类"></a>SocketAddress抽象类以及InetSocketAddress类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketAddress</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>这个类位于<code>java.net</code>包下，代表一个无协议的Socket 地址。因为是抽象类，所以需要一个带指定协议的子类来实现：<strong>InetSocketAddress</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetSocketAddress</span> <span class="keyword">extends</span> <span class="title">SocketAddress</span></span></span><br></pre></td></tr></table></figure><p>这个类位于<code>java.net</code>包下，这个类实现了SocketAddress类，代表了一个IP类型的Socket地址（IP地址+端口)，也可以是域名+端口的形式。它提供了一个不可变对象，以供socket对象来绑定（binding)、连接(connecting)或返回(return value) 。wildcard指的是一个特定的本地地址，他通常意味着“any”，并且只能用于绑定</p><h2 id="InetSocketAddress方法"><a href="#InetSocketAddress方法" class="headerlink" title="InetSocketAddress方法"></a>InetSocketAddress方法</h2><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public InetSocketAddress(int port)</code>：创建一个socket地址，它的IP是一个wildcard地址，端口是port参数。</li><li><code>public InetSocketAddress(String hostname, int port)</code>：从给定的域名和端口号创建一个socket address。会尝试把域名解析为IP地址，如果解析失败，会把域名标记为<em>unresolved</em>。端口为0，自动分配。</li><li><code>public InetSocketAddress(InetAddress addr, int port)</code>：从给定的IP地址和端口号创建一个socket address。IP地址为null时，指派wildcard地址。端口为0，自动分配。</li></ul><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul><li><code>public static InetSocketAddress createUnresolved(String host,   int port)</code>：利用给定的域名和端口号创建一个unresolved socket 地址，不会对域名进行解析，直接将域名标记为<em>unresolved</em>。</li><li><code>public final boolean isUnresolved()</code>：判断地址是否是<em>unresolved</em>。</li><li><code>public final InetAddress getAddress()</code>:获取InetAddress。如果为<em>unresolved</em>则返回null。</li><li><code>int getPort()</code>:获取端口号</li><li><code>String getHostName()</code>:返回域名。如果socket地址是用IP地址创建的，可能会反向域名解析查找域名。</li><li><code>String toString()</code>：返回该InetSocketAddress的字符串形式，调用了InetAddress的toString()方法并通过冒号加上端口号。如果地址是<em>unresolved</em>，那么将会在地址处显示 <code>&lt;unresolved&gt;</code> 。</li></ul><h1 id="创建一个TCP服务端"><a href="#创建一个TCP服务端" class="headerlink" title="创建一个TCP服务端"></a>创建一个TCP服务端</h1><p>TCP服务端的任务是设置另一个通信端点，并且积极的等待来自客户端的连接。典型的服务端创建过程如下：</p><ol><li>指定端口号，构造一个ServerSocket的实例，这个实例监听该端口的所有连接。</li><li>重复执行以下任务：<ol><li>调用ServerSocket对象的accept()方法，获得下一个来自客户端的连接。一旦一个来自客户端的新连接建立完成，accept()方法创建了一个Socket对象并返回；</li><li>通过返回的Socket对象的InputStream和OutputStream通客户端进行通信；</li><li>通信完成后，调用Socket对象的close()方法关闭连接。</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPEchoServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFSIZE = <span class="number">32</span>; <span class="comment">// size of receive buffer</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Parameter(s): &lt;Port&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> servPort = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个服务端socket接收客户端的请求</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(servPort);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> recvMsgSize;<span class="comment">// 接受的消息的大小</span></span><br><span class="line">        <span class="keyword">byte</span>[] recvBuff = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFSIZE];<span class="comment">//接收 缓存</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; <span class="comment">//一直运行，接收并处理来自客户端的连接</span></span><br><span class="line">            Socket clinSock = serverSocket.accept();<span class="comment">// 接受来自客户端的连接</span></span><br><span class="line">            SocketAddress clientAddress = clinSock.getRemoteSocketAddress(); <span class="comment">// 获取客户端地址</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Handling client at &quot;</span> + clientAddress);</span><br><span class="line"></span><br><span class="line">            InputStream in = clinSock.getInputStream();<span class="comment">//</span></span><br><span class="line">            OutputStream out = clinSock.getOutputStream();<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//一直接收，直到客户端关闭连接，当结果为-1时返回</span></span><br><span class="line">            <span class="keyword">while</span> ((recvMsgSize = in.read(recvBuff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(recvBuff,<span class="number">0</span>,recvMsgSize);</span><br><span class="line">            &#125;</span><br><span class="line">            clinSock.close();<span class="comment">//关闭socket，与客户端连接断开</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ServerSocket方法"><a href="#ServerSocket方法" class="headerlink" title="ServerSocket方法"></a>ServerSocket方法</h1><h2 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><code>public ServerSocket() throws IOException</code>：创建一个未绑定的server socket；该对象未绑定任何端口，在使用前必须使用bind()方法绑定端口。</li><li><code>public ServerSocket(int port) throws IOException</code>:创建一个与指定端口绑定的server socket。端口号为0，随机指定一个未分派端口，一般是临时端口ephemeral port。指定的端口号可以通过getLocalPort()方法获取。该方法创建的对象将连接队列大小设置为50，当待连接的数量超过50时，会拒绝其连接。</li><li><code>public ServerSocket(int port,int backlog) throws IOException</code>：backlog表示能够请求的连接的最大数量。该方法创建的对象指定了能够连接的数量大小。</li><li><code>public ServerSocket(int port,int backlog,InetAddress bindAddr) throws IOException</code>：bindAddr表示该socket绑定的本地InetAddress。bindAddr参数对多宿主主机（multi-homed host）创建ServerSocket很有用，但只会分配其中一个地址给它。多宿主主机指的是有多个网络接口的主机。</li></ul><h2 id="其他方法-1"><a href="#其他方法-1" class="headerlink" title="其他方法"></a>其他方法</h2><ul><li><code>void bind(SocketAddress endPoint) throws IOException</code>：将此ServerSocket绑定到指定SocketAddress（IP地址加端口号）。如果地址为空，系统会分配一个临时端口和有效的本地地址给这个socket。</li><li><code>void bind(SocketAddress endPoint，int backlog)throws IOException</code>:指定能连接的最大值。</li><li><code>Socket accept()</code>:监听连接到此socket的连接并接受它。这个方法处于阻塞状态，直到一个连接建立。</li><li><code>void close()</code>:关闭此socket。</li><li><code>InetAddress getInetAddress()</code>:返回此server socket 的本地地址。未绑定地址时，返回null。</li><li><code>SocketAddress getLocalSocketAddress()</code>:返回此server socket绑定的本地socket address。未绑定地址时，返回null。</li><li><code>int getLocalPort()</code>:返回此server socket监听的端口，如果尚未监听端口则返回-1。</li></ul><h1 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h1><p>从以上例子可以看出，Java中为TCP套接字提供的基础IO模型是流（stream）的抽象类；一个流就是一串有序的字节序列。Java输入流（input stream）支持读取字节，输出流（output stream）支持写入字节。</p><p>OutputStream是所有输出流的抽象父类。使用OutputStream我们可以write、flush、close。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStream</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Closeable</span>, <span class="title">Flushable</span> //<span class="title">java</span>.<span class="title">io</span></span></span><br></pre></td></tr></table></figure><p>InputStream是所有输入流的抽象父类。使用InputStream我们可以从输入流读取字节，关闭输入流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Closeable</span>//<span class="title">java</span>.<span class="title">io</span></span></span><br></pre></td></tr></table></figure><h2 id="OutputStream的方法"><a href="#OutputStream的方法" class="headerlink" title="OutputStream的方法"></a>OutputStream的方法</h2><ul><li><code>abstract void write(int b) throws IOException</code>：将指定字节写入到该输出流。参数b的低八位字节将会写入到输出流，高24位将会被省略。OutputStream的子类必须实现该方法。</li><li><code>void write(byte[] b) throws IOException</code>：将指定字节数组b的b.length个字节写入到输出流。实现效果应该与调用<code>write(b,0,b.length)</code>一致。</li><li><code>void write(byte[] b,int off,int len) throws IOException</code>：将指定字节数组b中从off开始的len个字节写入到输出流。b[off]是第一个写入的字节，b[off+len]是最后一个写入的字节。OutputStream中的这个方法是，每次写入一个字节都调用一次只有一个参数的write(int b)方法，子类应该更好的实现该方法。如果b为null，抛出NullPointerException；如果off为负，或者len为负，或者off+len大于b.length，抛出IndexOutOfBoundException。</li><li><code> void flush() throws IOException</code>：刷新输出流，强制写出所有缓存的字节，如果此输出流的实现已经缓冲了以前写入的任何字节，则调用此方法指示应将这些字节立即写入它们预期的目标。如果此流的预期目标是由基础操作系统提供的一个抽象（如一个文件），则刷新此流只能保证将以前写入到流的字节传递给操作系统进行写入，但不保证能将这些字节实际写入到物理设备（如磁盘驱动器）。<br>  OutputStream 的 flush 方法不执行任何操作。 </li><li><code>void close()throws IOException</code>:关闭输出流并释放占用的系统资源，关闭后的输出流不能执行任何操作也不能被重启。OutputStream的close方法不执行任何操作。</li></ul><h2 id="InputStream的方法"><a href="#InputStream的方法" class="headerlink" title="InputStream的方法"></a>InputStream的方法</h2><ul><li><p><code>abstract int read() throws IOException</code>：从输入流读取下一个数据字节。字节值返回的是一个0-255的int类型。如果到达输入流终点而没有字节可以读取，则返回-1；这个方法处于阻塞状态，直到输入数据是可读取的、检测到输入流的终点或是抛出了异常。</p></li><li><p><code>int read(byte[] b) throws IOException</code>：读取输入流的一系列字节，并将其存储到缓存数组b，读取的字节数以int形式返回。这个方法处于阻塞状态，直到输入数据是可读取的、检测到输入流的终点或是抛出了异常。如果b的长度为零，则没有数据被读取，返回0；否则，至少尝试读取一个字节。如果因为输入流到达了文件的尾部而没有字节可以读取，返回-1；否则至少读取一个字节并存储到b。该方法的实现应该等效于read(b, 0, b.length)。</p></li><li><p><code>int read(byte[] b,int off,int len) throws IOException</code>：至多从输入流读取len个字节存储到byte数组b中，off代表从b中哪个位置开始存储。虽然传入参数是len，但可能实际读取的字节数少于len，并且读取的字节个数以int形式返回。这个方法处于阻塞状态，直到输入数据是可读取的、检测到输入流的终点或是抛出了异常。如果len为0，没有字节被读取，返回0；否则，至少尝试读取一个字节。如果因为输入流到达了文件的尾部而没有字节可以读取，返回-1；否则至少读取一个字节并存储到b。第一个被读取的字节存储到b[off],第二个被读取的数据存储到b[off+1],以此类推。读取的字节数最多为len。</p></li><li><p><code>int available() throws IOException</code>：返回此输入流下一个方法调用可以不受阻塞地从此输入流读取（或跳过）的估计字节数；如果到达输入流末尾，则返回 0。下一个调用可能是同一个线程，也可能是另一个线程。一次读取或跳过此估计数个字节不会受阻塞，但读取或跳过的字节数可能小于该数。</p><p>  注意，有些 InputStream 的实现将返回流中的字节总数，但也有很多实现不会这样做。试图使用此方法的返回值分配缓冲区，以保存此流所有数据的做法是不正确的。</p></li><li><p><code>void close() throws IOException</code>:关闭输入流并释放占用的系统资源。InputStream的close方法不执行任何操作。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 计算机网络 </category>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> java基础 </tag>
            
            <tag> JAVA SOCKET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML复习</title>
      <link href="/posts/3779978381/"/>
      <url>/posts/3779978381/</url>
      
        <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>HTML中基本的语法单位为<strong>标签tag</strong>。一般来说，标签用于指定内容的类别。对于每个类别，针对特定的内容，浏览器都有默认的显示方式。标签的语法是利用一对尖括号“&lt;&gt;”将标签名包围起来。大部分标签都是成对出现的，包括开始标签和结束标签。结束标签的名称就是在对应的开始标签名称前面添加一个斜杠“/”组成。开始标签和结束标签之间包含的信息称为标签的<strong>内容content</strong>。浏览器显示的HTML文档实际上就是显示了文档中所有标签的内容，<strong>标签未必都包含内容</strong>。</p><p>开始标签和结束标签就是为他们所包含的内容指定了一个<strong>容器container</strong>，容器及其内容一起称为<strong>元素element</strong>。</p><p><strong>属性Attribute</strong>用于指定标签的含义，可以在开始标签名称及其右半边尖括号之间指定，它们是以键值的形式进行指定的：首先是属性的名称，接下来是一个等号，最后是属性值，属性值必须以双引号进行界定（数字可以不用双引号）。</p><p>注释格式：<code>&lt;!--  --&gt;</code>,可以用于单行或多行注释。</p><p>除注释外，还有一些其他类型的2文本可以出现在HTML文档中，但却会被浏览器忽略：无法识别的标签，空行（要使用空行，只能通过标签实现），多个空行或是制表符（也需要通过标签实现）。</p><h1 id="HTML文档的标准结构"><a href="#HTML文档的标准结构" class="headerlink" title="HTML文档的标准结构"></a>HTML文档的标准结构</h1><p>每个HTML文档的第一行都是一个DOCTYPE，它指定了该文档所遵循的特定SGML文档类型定义（Document-Type Definition，DTD）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML文档必须包含以下四组标签：<code>&lt;html&gt;、&lt;head&gt;、&lt;title&gt;、&lt;body&gt;</code>。</p><p>标签<code>&lt;html&gt;</code>识别文档的根元素。因此在DOCTYPE命令之后，HTML文档中总是紧接着一个<code>&lt;html&gt;</code>标签，它包含一个属性，lang，用于指定编写文档所用的语言。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个HTML文档包含两部分：头(head)部分和主体(body)部分。</p><p><code>&lt;head&gt;</code>元素包含了文档的头部分，该部分提供了文档的相关信息，而没有提供文档内容。他总是由两部分组成：一个标题元素和一个meta元素。meta元素用于提供关于文档的额外信息，他不包含任何内容，而是通过属性指定信息，meta标签至少要指定编写文档所用的字符集。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>标题元素的内容是在浏览器的顶部，通常是浏览器窗口的标题栏显示的。</p><p>文档的主体部分提供了文档的内容。</p><p>以下是HTML文档的基本结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        主体</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基本的文本标记"><a href="#基本的文本标记" class="headerlink" title="基本的文本标记"></a>基本的文本标记</h1><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>一般情况下，文档主体中的文本采用多个段落的形式进行显示。段落元素是通过标签<code>&lt;p&gt;</code>指定的。嵌入文本中的换行符将被浏览器忽略，多个空格将被一个空格所替换。多个段落标签之间，将插入一个空白行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span> 多个空格会被忽略为一个，</span><br><span class="line">    空格也会被忽略</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105160917282.png" alt="image-20201105160917282"></p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>换行标签：<code>&lt;br /&gt;</code>。</p><h2 id="保留空白字符"><a href="#保留空白字符" class="headerlink" title="保留空白字符"></a>保留空白字符</h2><p>有时希望在文本中保留空白字符，也就是阻止浏览器取消多个空格和忽略嵌入的换行符，可以使用<code>&lt;pre&gt;</code>标签来指定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span> </span><br><span class="line">            原始格式      会  保  留</span><br><span class="line">                 这样，</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            再这样</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105161238021.png" alt="image-20201105161238021"></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>HTML中，一共有六级标题，分别用以下标签表示：<code>&lt;h1&gt; &lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt; &lt;h6&gt;</code>。绝大部分浏览器中 <code>&lt;h1&gt; &lt;h2&gt; &lt;h3&gt;</code>使用的字体要比默认文字大，<code>&lt;h4&gt;</code>使用默认文本字体大小，<code>&lt;h5&gt; &lt;h6&gt;</code>使用字体比默认小。</p><h2 id="文本块引用"><a href="#文本块引用" class="headerlink" title="文本块引用"></a>文本块引用</h2><p>可以使用<code>&lt;blockquote&gt;</code>标签来表示引用文本。大部分情况下，这种引用文本块只是简单地双向缩进。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    这是正文部分</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">        这是引用文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105162134230.png" alt="image-20201105162134230"></p><h2 id="字体样式与大小"><a href="#字体样式与大小" class="headerlink" title="字体样式与大小"></a>字体样式与大小</h2><p>早先可以使用标签集来设置字体样式和大小，例如<code>&lt;i&gt;</code>指定斜体，<code>&lt;b&gt;</code>指定粗体。但有了层叠样式表，这些标签就变得过时了。但仍存在几个广泛使用的字体标签，称为基于内容的样式标签。之所以说基于内容，是因为标签指出了其内容中出现的文本的特定类型。下面描述三种最常用的基于内容的标签：强调标签 <code>&lt;em&gt; &lt;strong&gt;</code>和代码标签 <code>&lt;code&gt;</code>。</p><p><code>&lt;em&gt;</code> 标签指定它的文本内容是特殊的，应该以能够表明这一点的某种方式来显示。大多数浏览器对这样的内容使用斜体。</p><p><code>&lt;strong&gt;</code>标签类似于<code>&lt;em&gt;</code> 标签，但强调程度更强一些，经常被设置为粗体。</p><p><code>&lt;code&gt;</code>用来指定等宽字体，通常用于程序代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    展示基于内容的标签：</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    em标签:<span class="tag">&lt;<span class="name">em</span>&gt;</span>强调，字体一般是斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    strong标签:<span class="tag">&lt;<span class="name">strong</span>&gt;</span>强调，字体一般是粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    code标签:</span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>显示等宽字体，一般用于程序代码</span><br><span class="line">    #include<span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span><br><span class="line">        int main(void)&#123;</span><br><span class="line">        printf();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105163931465.png" alt="image-20201105163931465"></p><p>可以使用 <code>&lt;sub&gt; &lt;sup&gt;</code>标签来指定下标和上标字符，这些标签不是基于内容的标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   x<span class="tag">&lt;<span class="name">sub</span>&gt;</span>1<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> + y<span class="tag">&lt;<span class="name">sub</span>&gt;</span>1<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> = x<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105164238853.png" alt="image-20201105164238853"></p><p>当基于内容的标签与块引用标签发生冲突时，块引用标签将会影响到这些标签的显示效果。</p><p>标签分为块标签和行内标签。行内标签的内容（如果能够放到当前行中）在当前行中进行显示，因此行内标签并不隐式包含一个换行，一个例外是换行标签。</p><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><p>HTML提供了一组特殊字符，这些字符有时会出现在文档中，但不能以本身的样式进行拼写。这些特殊字符称为实体，是字符的代码。以下是最常用的字符实体。</p><table><thead><tr><th>字符</th><th>实体</th><th>含义</th></tr></thead><tbody><tr><td>&amp;</td><td><code>&amp;amp;</code></td><td>&amp;的记号</td></tr><tr><td>&lt;</td><td><code>&amp;lt;</code></td><td>小于号</td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td><td>大于号</td></tr><tr><td>“</td><td><code>&amp;quot;</code></td><td>双引号</td></tr><tr><td>‘</td><td><code>&amp;apos;</code></td><td>单引号</td></tr><tr><td>1/4</td><td><code>&amp;frac14;</code></td><td>四分之一</td></tr><tr><td>1/2</td><td><code>&amp;frac12;</code></td><td>二分之一</td></tr><tr><td>3/4</td><td><code>&amp;frace34;</code></td><td>四分之三</td></tr><tr><td>°</td><td><code>&amp;deg;</code></td><td>度</td></tr><tr><td>(space)</td><td><code>&amp;nbsp;</code></td><td>非换行空格</td></tr><tr><td>©</td><td><code>&amp;copy;</code></td><td>版权符号</td></tr><tr><td>€</td><td><code>&amp;euro;</code></td><td>欧元符号</td></tr></tbody></table><h2 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h2><p><code>&lt;hr /&gt;</code>标签可以用来绘制水平分割线。一般是3像素。它是一个块标签。</p><h2 id="meta元素的其他用法"><a href="#meta元素的其他用法" class="headerlink" title="meta元素的其他用法"></a>meta元素的其他用法</h2><p>meta元素用于提供文档的一些附加信息，主要供搜索引擎使用。除了前面用于指定字符集的charset属性，meta标签还可以使用：name属性，指定一个名称，最常用的名称是keywords；content属性，指定相关信息，与keywords相关系的content属性值被文档作者用来表示文档的特征，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">&quot;keywords&quot;</span> <span class="attr">content</span> = <span class="string">&quot;binary trees,linked lists,stacks&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片元素的标签是 <code>&lt;img /&gt;</code>,是一个行内元素，用于指定将要显示在文档中的图片。在最简单的情况下，该标签只包含两个属性：src和alt。通过src可以指定包含图片的文件；通过alt可以指定当图片无法显示时，提醒的文本内容。</p><p>img中还有两个可选属性，width和height，可以用来指定图片的宽度和高度。可以为图片的宽度或高度指定一个百分比值，表示图片将占据显示屏宽度或高度的百分之多少。</p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>所有链接都通过锚元素<code>&lt;a&gt;</code>中的属性指定，它也是一个行内元素。锚标签也包含很多不同的属性，但为了创建链接，只有一个属性是必须的，即href(超文本引用，hypertext reference)。href的值指定了连接的目标文档。</p><p>如果某些元素包含一个id属性，可以使用锚标签来访问该目标元素。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span> = <span class="string">&quot;title2&quot;</span>&gt;</span>Title 2 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;#title2&quot;</span>&gt;</span>在id值前加一个#来访问同一文档中的元素<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问其他文档的一个元素可以使用<code>URL#id值</code>得方式来访问。</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>HTML中可以使用块标签 <code>&lt;ul&gt;</code>来创建无序列表。列表中每个项目都是通过标签 <code>&lt;li&gt;</code> 指定的。所有标签都可以出现在列表项目中，包括嵌套的列表。在显示时，每个列表项目之前都对应着一个项目符号。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>普通文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>嵌套强调<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>嵌套无序列表<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>嵌套内容1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>嵌套内容2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>嵌套内容3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>嵌套超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;404.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span>&gt;</span>嵌套图片<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105180805990.png" alt="image-20201105180805990"></p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表可以通过块标签 <code>&lt;ol&gt;</code>创建。列表项目的指定与无序列表一样，有序列表项目前是一个顺序值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>普通文字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>嵌套无序列表</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        嵌套有序列表</span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表元素<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105181304869.png" alt="image-20201105181304869"></p><p>学习CSS之后可以指定不同级别的有序列表使用不同格式的数字。</p><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><p>定义列表是指用于指定术语及其定义的列表。定义列表可以使用块标签 <code>&lt;dl&gt;</code> 来指定。定义列表中的每个术语是作为 <code>&lt;dt&gt;</code>元素的内容指定的，而定义本身是作为 <code>&lt;dd&gt;</code> 元素的内容指定的。一般，定义列表中定义的术语显示在左边缘，而定义通常成行的位于术语下方，并缩进显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>定义列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>China<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>America<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>这里是术语内容<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>这里是术语的定义内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105213044170.png" alt="image-20201105213044170"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>表格是单元格构成的矩阵。顶行单元格常常包含列标签，最左边列的单元格常常包含行标签，绝大部分其余的单元格包含表格数据。单元格中的信息几乎可以是任何形式的文档元素，如文本、标题、水平线、图片或嵌套的表格。表格用 <code>&lt;table&gt;</code>标签来创建。</p><h2 id="基本的表格标签"><a href="#基本的表格标签" class="headerlink" title="基本的表格标签"></a>基本的表格标签</h2><p>绝大多数情况下，表格之前有标题，标题是在元素 <code>&lt;caption&gt;</code>的内容中指定的，他可以紧跟在开始标签 <code>&lt;table&gt;</code>之后。<strong>表格的单元格是一行一行指定的</strong>，表格中的每一行是通过行标签 <code>&lt;tr&gt;</code>指定的。在每一行，行标签是通过表头标签 <code>&lt;th&gt;</code>指定的。每一行的数据单元格是通过表格数据标签 <code>&lt;td&gt;</code>指定的。表格的首行通常指定了表格的列标签，例如，如果一个表格具有三个数据列，列标题分别为Apple、Orange、Screwdriver，那么可以按以下方式指定该表格的首行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span> Apple <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span> Orange <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span> Screwdriver <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表格中每一个数据行都是通过一个标题标签和针对每个数据列的数据标签指定的。对于那些既有行标签又有列标签的表格而言，表格的左上角单元格一般是空的。这个空的单元格是通过不含内容的表头标签指定的（<code>&lt;th&gt;&lt;/th&gt; 或 &lt;th/&gt;</code>。</p><p>下面是一个完整表格的示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>定义表格<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一行第一个为空 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>民族<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>住址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>汉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>汉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>汉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105220318174.png" alt="image-20201105220318174"></p><h2 id="rowspan与colspan属性"><a href="#rowspan与colspan属性" class="headerlink" title="rowspan与colspan属性"></a>rowspan与colspan属性</h2><p>很多情况下，表格具有多级行标签或者列标签。其中一个标签覆盖了两个或多个二级标签。可通过rowspan和colspan属性指定多级标签。</p><p>colspan属性是在表头或者表格数据标签中指定的，该属性命令浏览器将所在单元格的宽度扩展为等于下方行中指定数量的单元格宽度。</p><p>例如如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>定义表格<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>Fruit Juice Drinks<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Orange<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Screwdriver<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201105221349290.png" alt="image-20201105221349290"></p><p>Fruit Juice Drinks这一列包含了Apple、Orange、Screwdriver三列。</p><p>如果扩展单元格的上一行或下一行的单元格数目小于属性colspan指定的值，那么浏览器将把这些单元格的数目扩展到指定的数目，并为表格增加相应地列。表头标签和表格数据标签的属性rowspan表示跨越多行，其作用与colspan相似。</p><p>一个拥有两级列标签和行标签的表格，其左上角的单元格一定是空白，这个单元格既跨越了列中的多行标签，又跨越了多列。这种单元格是通过属性colspan和rowspan共同指定的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>定义表格<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>果汁饮料<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>苹果汁<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>橘子汁<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>草莓汁<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>早餐<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>中餐<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>晚餐<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106093134190.png" alt="image-20201106093134190"></p><h2 id="表格分块"><a href="#表格分块" class="headerlink" title="表格分块"></a>表格分块</h2><p>可以很自然的将表格分成两部分，有时候也可能是三部分：表头、主体以及表尾（不一定有表尾）。可以使用thead，tbody，tfoot元素来表示这三部分。表头包括列标签，而不管这些标签有多少级。主体包含了表格的数据部分，包含行标签。如果有表尾，表尾一般出现在主体之后，重复包含列标签。<code>&lt;thead&gt;</code> 元素内部必须包含一个或者多个 <code>&lt;tr&gt;</code> 标签。在 HTML 5 中，不再支持 HTML 4.01 中 <code>&lt;thead&gt;</code>&gt; 标签的任何属性。<code>&lt;thead&gt;、&lt;tbody&gt; 和 &lt;tfoot&gt;</code>元素默认不会影响表格的布局。不过，您可以使用 CSS 来为这些元素定义样式，从而改变表格的外观。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题在这里<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>定义表格<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">            Fruit Juice Drinks</span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Orange juice<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Apple juice<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Screwdriver juice<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            Breakfast</span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            Lunch</span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            Dinner</span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106094745542.png" alt="image-20201106094745542"></p><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>用户通过Web浏览器与服务器之间进行通信的最常用手段是使用表单。HTML提供了一些标签以生成屏幕表单中最常用的对象。这些对象称为控件、小组件、组件。HTML中定义了多种控件：单行和多行的文本框、复选框、单选按钮以及菜单等。所有控件标签都是行内标签。绝大部分控件都是以文本或者按钮选择的形式来收集用户信息。每个控件都可以拥有一个值，通常是通过用户输入给定的。一个表单中所有控件的值合起来称为表单数据。每个表单都需要一个提交按钮。当用户单击提交按钮时，表单数据将被编码并发送到Web服务器进行处理。</p><h2 id="form元素"><a href="#form元素" class="headerlink" title="form元素"></a>form元素</h2><p>一个表单中所有控件都必须在标签form元素的内容中指定。 <code>&lt;form&gt;</code>是一个块标签，它有多个不同属性。属性action指定了Web服务器上一个应用程序的URL，当用户单击提交按钮，将调用这个应用程序。method属性的可选为get和post，这两种方法用于将表单数据发送给服务器；默认选择为get。<strong>表单项数据若想提交，必须指定相应表单项标签的name属性</strong>。</p><p>若使用get，浏览器会把查询字符串附加到HTTP请求的URL中。get方法可以在不使用表单的情况下传送参数给服务器，而post无法做到这一点。get方法的主要缺点是，服务器会对URL字符串长度进行限制，把超过长度的字符截去；会直接在地址中显示密码等敏感数据。</p><p>使用post方法，会有其他方法将查询字符串传递给表单处理程序。post方法对查询字符串长度没有限制，也不会暴露敏感信息。</p><ul><li><p>get：</p><ol><li>请求参数会在地址栏中显示。</li><li>会封装到请求行中(HTTP协议后讲解)。请求参数大小是有限制的。</li><li>不太安全。</li></ol></li><li><p>post：</p><ol><li>请求参数不会再地址栏中显示。会封装在请求体中(HTTP协议后讲解) </li><li>请求参数的大小没有限制。</li><li>较为安全。</li></ol></li></ul><h2 id="input元素"><a href="#input元素" class="headerlink" title="input元素"></a>input元素</h2><p>许多常用控件都是利用行内标签 <code>&lt;input&gt;</code>指定的，这种标签可以指定文本框（text）、密码框（password）、复选框（checkbox）、单选按钮(radio)以及plain buttons、 ranges of numbers、 URLs、 electronic mailaddresses、reset、submit、image和button等动作按钮。</p><p>标签<code>&lt;input&gt;</code>必须使用的一个属性是type。这个属性用于指定控件的类型。除了submit和reset外，前述控件还需要name属性，其值将包含在表单数据中发送给服务器。复选框和单选按钮还需指定属性value，它用于初始化控件的值。当单击提交按钮时，这些控件的值作为表单数据发送给服务器。很多时候，客户端代码中也会引用控件，主要是为了进行客户端验证，客户端代码通过控件的id属性值引用它们，因此，常见做法时在表单控件元素中同时包含name和id属性。</p><p>通常文本控件称为文本框，该控件能创建一个水平框，用户可以在框中输入文本。文本框常用于收集用户信息。文本框默认长度一般为20个字符。我们可以通过 <code>&lt;input&gt;</code>标签的size属性来指定文本框的长度。如果用户输入的字符长度超出了文本框的空间，则文本框将可以滚动，如果不希望文本框滚动，可以在<code>&lt;input&gt;</code>标签中添加属性maxlength，该属性指定了浏览器允许该文本框能够接受的最大字符数目，将忽略多余数目。placehold属性可以添加提示信息，当输入信息时，该提示信息会自动清空。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;404.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text_field&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106154040557.png" alt="默认"></p><blockquote><p>未添加size属性和maxsize属性，文本框大小，此时文本框可以无限制输入任意文本。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;404.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text_field&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106154226323.png" alt="添加size属性"></p><blockquote><p>添加size属性后，文本框宽度便化，此时依旧可以无限制输入文本。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;404.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text_field&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;25&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106154427484.png" alt="添加maxsize属性"></p><blockquote><p>添加maxsize属性后，其值大小后面的字符都不会再显示。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  表单要想提交必须指定name属性  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> &gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span>&gt;</span>密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="D:%5CGitHub%5Chexo%5Csource%5C_posts%5CHTML%E5%A4%8D%E4%B9%A0.assets%5Cimage-20201114204737915.png" alt="image-20201114204737915"></p><blockquote><p>placehold属性用于显示提示信息。value属性可指定该字段的默认值，但是输入时不会自动清空。</p></blockquote><p>如果想让用户在为文本框输入内容时隐藏输入的内容，就需要用到密码控件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;404.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">size</span>=<span class="string">&quot;25&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106154752019.png" alt="密码表单"></p><p>文本框以及其他大多数控件元素都应该有标签。只需将文本插入到表单中适当的位置，就可以完成添加标签任务，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phone:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;thePhone&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>另外可以通过将控件及其标签放置到标签元素的内容中，将控件和他的标签联系起来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Phone:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;thePhone&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;404.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">size</span>=<span class="string">&quot;25&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">size</span>=<span class="string">&quot;25&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106155032264.png" alt="标签元素"></p><p>复选框和单选按钮控件用来收集用户的多重选择输入。复选框控件是一个按钮，表示开或者关，即选中与否。每个复选框对应的input标签必须具有属性name和value。如果一个复选框处于选中状态，该按钮name的值就是指派给value的字符串。如果未选中，则表单中没有其信息。如果存在属性checked，且checked的值为checked，那么表示这个复选框默认选中。通常多个复选框以列表形式显示，每个按钮的name都是相同的。复选框也应该出现在标签元素中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;404.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;play_game&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reading&quot;</span>&gt;</span>阅读<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;watch_movie&quot;</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交表单&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106162233997.png" alt="复选框"></p><p>单选按钮与复选按钮类似。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;404.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交表单&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106162529577.png" alt="单选按钮"></p><ul><li><p>radio:单选框<br>注意：</p><pre><code>1. 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。2. 一般会给每一个单选框提供value属性，指定其被选中后提交的值3. checked属性，可以指定默认值</code></pre><ul><li>checkbox：复选框<br>  注意：<ol><li>一般会给每一个单选框提供value属性，指定其被选中后提交的值</li><li>checked属性，可以指定默认值</li></ol></li></ul></li></ul><p>label标签可用于指定输入项的文字描述信息，它的for属性一般与input的id属性值对应。如果对应了，则点击label区域，会让input输入框获取焦点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  表单要想提交必须指定name属性  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> &gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="D:%5CGitHub%5Chexo%5Csource%5C_posts%5CHTML%E5%A4%8D%E4%B9%A0.assets%5Cimage-20201114205636332.png" alt="image-20201114205636332"></p><blockquote><p>当点击用户名或密码时，光标（输入焦点）会跳到用户名或密码输入框。</p></blockquote><p>简单按钮（plain button）可以使用button来指定。按钮可以触发JavaScript活动。</p><h2 id="select元素"><a href="#select元素" class="headerlink" title="select元素"></a>select元素</h2><p>复选框和单选框是收集用户多重选择数据的有效方式，但是当选择数目较大时，表单将难以显示，此时可以使用菜单。菜单是通过标签 <code>&lt;select&gt;</code>指定的。菜单有两种类型：一次只能选择一个菜单项的菜单（默认）和一次可以选择多个菜单项的菜单（在select中添加属性multiple，并将值设置为multiple即可使用）。<code>&lt;select&gt;</code>的name属性是必需的。还可以包含size属性用于指定为用户现实的菜单项的数目，未指定size时，默认为1。如果size的值为1，但未指定multiple属性，就显示一个带有向下滚动箭头的菜单项，单击滚动箭头，菜单将弹出显示。如果指定了multiple属性，或者size的值大于1，那么菜单通常为一个滚动列表。</p><p>菜单中每个条目是通过标签 <code>&lt;option&gt;</code>指定的，他嵌套在<code>&lt;select&gt;</code>元素中，其内容就是菜单项的值，只能是文本，不能包含其他标签；属性有selected，如果将其值设为selected，则表示该条目默认已经选中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Select<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">size</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106164743266.png" alt="未设置multiple"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Select<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>湖北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106164900449.png" alt="设置multiple"></p><p>设置了multiple属性可以选中多个。</p><h2 id="textarea元素"><a href="#textarea元素" class="headerlink" title="textarea元素"></a>textarea元素</h2><p>可以使用标签 <code>&lt;textarea&gt;</code>创建一个能够输入多行文本的区域。可以使用属性rows和cols为其设置适当大小。也可以在其中添加一些默认文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TextArea<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;40&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">        这里是默认文本</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106165530118.png" alt="image-20201106165530118"></p><h2 id="动作按钮"><a href="#动作按钮" class="headerlink" title="动作按钮"></a>动作按钮</h2><p>重置按钮可以将表单所有控件恢复到初始状态。提交按钮的作用分为两步，首先将表单数据编码并发送到服务器，然后请求服务器执行驻留在服务器中的通过标签<code>&lt;form&gt;</code>的action指定的程序。提交按钮和重置按钮都是通过 <code>&lt;input&gt;</code>创建的，其value属性可以指定在按钮显示的文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;404.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106170039912.png" alt="image-20201106170039912"></p><h2 id="一个表单例子"><a href="#一个表单例子" class="headerlink" title="一个表单例子"></a>一个表单例子</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Popcorn<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to Millenium Gynmastics Booster Club Popcorn Sales<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Buyer&#x27;s name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;40&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Street Address: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;40&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>City,State,Zip: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;40&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">                Product Name</span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">                Price</span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span> Quantity<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Unpopped Popcorn(1 lb)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$3.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Caramel Popcorn(2 lb cannister)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$3.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Caramel Nut Popcorn(2 lb cannister)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$4.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Toffey Nut Popcorn(2 lb cannister)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Payment Method<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;payment_method&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>Visa<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;payment_method&quot;</span>&gt;</span>Master Card<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;payment_method&quot;</span>&gt;</span>Discover<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;payment_method&quot;</span>&gt;</span>Check<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit Order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Clear Order Form&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106173257134.png" alt="image-20201106173257134"></p><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="audio元素"><a href="#audio元素" class="headerlink" title="audio元素"></a>audio元素</h2><p>audio元素唯一的常用属性是controls，他总是被设置为controls，该属性会显示一个开始/停止按钮，一个时钟，一个播放进度条，文件的总时长以及一个音量控制滑动条。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Audio<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;someMusic.mp3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;someMusic.ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;someMusic.wav&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106202040956.png" alt="image-20201106202040956"></p><h2 id="video元素"><a href="#video元素" class="headerlink" title="video元素"></a>video元素</h2><p>video元素有几个属性，并且与audio元素一样可以包含多个嵌套的source元素。width和height属性以像素为单位设置视频屏幕的宽度和高度；autoplay属性指定在准备好后自动播放；preload属性告诉浏览器在文档加载时就载入视频；controls属性在视频播放时显示开始、暂停和音量条；loops属性指定视频是否循环播放。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TextArea<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;720&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106213708505.png" alt="image-20201106213708505"></p><h2 id="组织元素"><a href="#组织元素" class="headerlink" title="组织元素"></a>组织元素</h2><p>HTML4.01实现大纲的唯一方式时使用标题，但是符合逻辑的做法是一个文档中只使用一个h1标题。而且h2，h3等标题元素必须按照编号进行嵌套。HTML5提供了一些新的元素来帮助组织文档和文档的大纲。</p><p>许多文档的第一个部分是标题，如果标题只包含一个短语，那么可以是一个h1元素，但文档的标题经常包含更多的信息，很多时候还包含第二个短语，或者叫做标语（tagline）。HTML5的header元素可以包含文档的整个标题，这样就更容易看出标题包含哪些部分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TextArea<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>普通的一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>普通的二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>在header元素中的一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>在header元素中的二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文档的开始部分可能在主体的前面包含更多信息，如一个目录，可以使用hgroup元素包含标题和主体前面的其他信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TextArea<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    ----文档主体部分----</span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>footer元素用于包含文档中的页脚内容，例如作者和版权数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TextArea<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>----在这里插入文档主体----<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span>不二承 2018-2020</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201106220537204.png" alt="image-20201106220537204"></p><p>section元素用于包含文档的各节，footer可以包含一节或多节；article元素用于容纳来自外部的某个文档的独立部分。一个article元素可以包含一个header、一个footer和多个section。</p><p>adise元素用于与文档的主要信息关系不大的内容。</p><p>nav元素用于包含导航部分，也就是可以导航到文档不同部分的链接列表。</p><h2 id="time元素"><a href="#time元素" class="headerlink" title="time元素"></a>time元素</h2><p>time元素用于给文章或文档添加时间戳。该元素包含一个文本部分和一个机器可读部分。文本部分的时间和或日期信息可以是任意格式的，但是机器可读部分必须有严格的格式化。机器可读部分是time元素可选属性datetime的值。datetime的date部分的格式是：一个有4位数字表示的年份，横线，一个有两位数字表示的月份，横线和一个两位数字表示的天，例如2020-11-06；如果机器可读的数据中包含时间，则要在日期后面加上大写T，后面是小时冒号分钟冒号和秒。如果秒为0，可以省略。小时，分钟，秒必须以两位数字表示。time元素还有另一个可选的属性pubdate。如果time元素没有嵌套在一个article元素内，那么pubdate指定的时间戳是文档的发布日期。如果嵌套在article元素内，则是文章的发布日期。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础套接字</title>
      <link href="/posts/4210682641/"/>
      <url>/posts/4210682641/</url>
      
        <content type="html"><![CDATA[<h1 id="套接字地址"><a href="#套接字地址" class="headerlink" title="套接字地址"></a>套接字地址</h1><p>在初始化通信的时候，客户端必须指定一个运行服务端程序的主机的IP地址。在Java中，<strong>地址</strong>可以是数字地址（如IPV4的点分法表示的地址：<code>192.168.43.1</code>；IPV6用冒号隔开的地址：<code>fe20:12a0::0abc:1234</code>）组成的<strong>字符串</strong>，也可以是由名字（如<code>www.baidu.com</code>)组成的字符串。用名字组成的地址时，该名字必须能被DNS解析到指定主机，不然会报异常。</p><p>Java中的<code>java.net.InetAddress</code>类代表了一个网络目的地，其中包含了名字和地址信息。它有两个子类<code>Inet4Address</code>和<code>Inet6Address</code>，分别代表了IPV4和IPV6。<code>InetAddress</code>的实例是不可变的，一旦被创建只能指向同一个地址。<code>InetAddress</code>的实例由IP地址和可能存在的与IP绑定的域名组成(格式为域名/IP地址）。</p><p>下面的例子，打印了与本地主机相关联的所有IPV4和IPV6地址。</p><p>想要获得本地主机的地址，首先需要借用Java的<strong>网络接口类（Network Interface）</strong>：<code>java.net.NetworkInterface</code>（是一个final类）。这个类的方法可以访问一个主机所有的接口信息，这是非常有用的，可以利用它将一个程序的地址告诉另一个程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前主机的网络接口以及对应的地址，一个接口可能有多个地址</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            Enumeration&lt;NetworkInterface&gt; interfaceList = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">            <span class="keyword">if</span> (interfaceList == <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;--- There is no INTERFACE&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(interfaceList.hasMoreElements())&#123;</span><br><span class="line">                    NetworkInterface networkInterface = interfaceList.nextElement();</span><br><span class="line">                    System.out.println(<span class="string">&quot;Interface &quot;</span> + networkInterface.getName() + <span class="string">&quot;:&quot;</span>);</span><br><span class="line">                    Enumeration&lt;InetAddress&gt; inetAddresses = networkInterface.getInetAddresses();</span><br><span class="line">                    <span class="keyword">if</span>(!inetAddresses.hasMoreElements())&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Has no address bound to this interface&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (inetAddresses.hasMoreElements())&#123;</span><br><span class="line">                        InetAddress inet = inetAddresses.nextElement();</span><br><span class="line">                        System.out.print(<span class="string">&quot;\tAddress&quot;</span> +</span><br><span class="line">                                ((inet <span class="keyword">instanceof</span> Inet4Address ? <span class="string">&quot;(v4)&quot;</span> :</span><br><span class="line">                                (inet <span class="keyword">instanceof</span> Inet6Address ? <span class="string">&quot;(v6)&quot;</span> : <span class="string">&quot;(?)&quot;</span>))));</span><br><span class="line">                        System.out.println(<span class="string">&quot;:&quot;</span> + inet.getHostAddress());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkInterface</span> <span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure><p>此类表示由名称和分配给此接口的IP地址列表组成的网络接口。它用于标识多播组加入的本地接口。接口通常以诸如“le0”之类的名称而为人所知。</p><p><code>static Enumeration&lt;NetworkInterface&gt;    getNetworkInterfaces()</code>：返回此计算机上所有的接口。</p><p><code>static NetworkInterface getByInetAddress(InetAddress addr):</code>方便的查找绑定了指定IP的接口。</p><p><code>static NetworkInterface getByName(String name)</code>:查找绑定了指定名称的接口。</p><p><code>String getName()</code>  ：获取此接口的名称。This generally consists of an alphabetic string followed by a numeric part, for example eth0. The loopback interface is named lo0 on many systems.</p><p><code>Enumeration&lt;InetAddress&gt; getInetAddresses()</code>  返回绑定到此接口的全部或部分网络地址。</p><p>The first method above is quite useful, making it easy to learn an IP address of the host a program is running on: you get the list of interfaces with <code>getNetworkInterfaces()</code>, and use the <code>getInetAddresses()</code> instance method to get all the addresses of each. （<em>the list contains all the interfaces of the host, including the loopback virtual interface, which cannot send or receive messages to the rest of the network. Similarly, the list of addresses may contain link￾local addresses that also are not globally reachable. Since the order is unspecified, you cannot simply take the first address of the first interface and assume it can be reached from the Internet; instead, use the property-checking methods of InetAddress (see below) to find one that is not loopback, not link-local, etc</em>.）</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enumeration</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Enumeration接口中定义了一些方法，通过这些方法可以枚举（一次获得一个）对象集合中的元素。这种传统接口已被迭代器取代，虽然Enumeration 还未被遗弃，但在现代代码中已经被很少使用了。尽管如此，它还是使用在诸如Vector和Properties这些传统类所定义的方法中，除此之外，还用在一些API类，并且在应用程序中也广泛被使用。 下表总结了一些Enumeration声明的方法：</p><p><code>boolean hasMoreElements()</code>  测试此枚举是否包含更多元素</p><p><code>Object nextElement()</code>  如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201030180733509.png" alt="获取到的本地接口及地址"></p><p>下面的例子展示了从命令行获取的host对应的名字和地址信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> host : args)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(host + <span class="string">&quot;:&quot;</span>);</span><br><span class="line">                InetAddress[] address = InetAddress.getAllByName(host);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> add : address)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;\t&quot;</span> + add.getHostName()</span><br><span class="line">                                        + <span class="string">&quot;/&quot;</span> + add.getHostAddress());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\tUnable to find address for &quot;</span> + host);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令行参数:www.baidu.com 127.0.0.1 blah.blah blog.buercheng.space</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201030183851922.png" alt="通过命令行参数获取主机的名字和地址"></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.net</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddress</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>这个类代表一个IP地址，格式：<code>hostname / literal IP address</code>。也可能不包含主机名。</p><ul><li><p>创建和获取InetAddress</p><ul><li><code>static InetAddress[] getAllByName(String host)</code>:给定一个主机域名，返回绑定在这个域名的所有IP地址。</li><li><code>static InetAddress getByName(String host)</code>:给定一个主机域名，返回其IP地址。</li><li><code>static InetAddress getLocalHost()</code>:返回本地主机的域名。</li><li><code>byte[] getAddress()</code>:返回当前对象的IP地址的字节数组格式，IPV4为四个字节，IPV6为16位。</li></ul></li><li><p>获取字符串类型的InetAddress</p><ul><li><p><code>String toString()</code>:重写了toString()方法，将IP地址转换为字符串类型。返回的格式：<code>hostname /literal IP address</code>。如果没有机名，则不会进行反向解析，<code>hostname</code>字段返回空。</p></li><li><p><code>String getHostAddress()</code>:仅返回IP地址的字符串格式。</p></li><li><p><code>String getHostName()</code>:仅返回主机名。如果初始化该实例时，只给定了一个域名，则直接返回该域名，而不会进行解析。否则，该方法只会返回地址信息中的主机名。</p></li><li><p><code>String getCanonicalHostName()</code>:仅返回主机名。与上一个方法不同，该方法尝试获取该地址的<strong>绝对域名（fully qualified domain name）</strong>，注意此方法返回的主机名可能与调用的对象的主机名不同。</p><p>  以上方法，如果未指定名字，则返回IP地址。</p></li></ul></li><li><p>InetAddress还有支持<strong>检查原子特性checking for properties</strong>的方法：检查是否是特殊域名（如私有域名）及可达性reachability。</p><ul><li><code>boolean isAnyLocalAddress():</code>检测是否是通配符地址wildcard addres。</li><li><code>boolean isLinkLocalAddress():</code>检测是否是链路本地地址。</li><li><code>boolean isLoopbackAddress():</code>检测是否是回环地址。</li><li><code>boolean isMulticastAddress():</code>检测是否是多播地址</li><li>the <code>isMC...()</code> methods check for various scopes of multicast address.The scope determines, roughly, how far packets addressed to that destination can travel from<br>  their origin.<ul><li><code>boolean isMCGlobal():</code>检测是否是全局范围的多播地址。</li><li><code>boolean isMCLinkLocal():</code>检测多播地址是否包含链路本地地址</li><li><code>boolean isMCNodeLocal():</code>检测多播地址是否包含node地址</li><li><code>boolean isMCOrgLocal():</code>检测多播地址是否包含organization地址</li><li><code>boolean isMCSiteLocal():</code>检测多播地址是否包含site地址</li></ul></li><li>检测是否能够同该InetAddress指定的主机进行包交换。Note that, unlike the other methods, which involve simple syntactic checks, these methods cause the networking system to take action, namely sending packets. The system attempts to send a packet until the specified number of milliseconds passes. The latter form is more specific: it determines whetherthe destination can be contacted by sending packets out over the specified NetworkInterface, with the specified time-to-live (TTL) value. The TTL limits the distance a packet can travel through the network. Effectiveness of these last two methods may be limited by the security manager configuration.<ul><li><code>boolean isReachable(int timeout):</code></li><li><code>boolean isReachable(NetworkInterface netif, int ttl, int timeout):</code></li></ul></li></ul></li></ul></blockquote><h1 id="InetAddress类常用方法演示"><a href="#InetAddress类常用方法演示" class="headerlink" title="InetAddress类常用方法演示"></a>InetAddress类常用方法演示</h1><h2 id="创建InetAddress实例的方法"><a href="#创建InetAddress实例的方法" class="headerlink" title="创建InetAddress实例的方法"></a>创建InetAddress实例的方法</h2><ul><li><code>public static InetAddress getByName(String host)  throws UnknownHostException</code></li><li><code>static InetAddress[]    getAllByName(String host)   throws UnknownHostException</code></li><li><code>public static InetAddress getByAddress(byte[] addr)  throws UnknownHostException</code></li><li><code>public static InetAddress getByAddress(String host,byte[] addr)throws UnknownHostException</code></li><li><code>public static InetAddress getLocalHost()  throws UnknownHostException</code></li><li><code>public static InetAddress getLoopbackAddress()</code></li></ul><h3 id="getByName-String-host"><a href="#getByName-String-host" class="headerlink" title="getByName(String host)"></a>getByName(String host)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title">getByName</span><span class="params">(String host)</span>  <span class="keyword">throws</span> UnknownHostException</span></span><br></pre></td></tr></table></figure><blockquote><p>给定主机名，返回该主机IP地址。主机名可以是域名，比如”<a href="http://www.baidu.com&quot;;也可以是ip地址的字符串形式.如果给定的是ip地址,只检查其格式是否正确.如果给定主机名是null或者`host.length()==0,`那么则返回回环地址.如果给定主机无ip绑定,或者给定的是一个ipv6的范围地址(/">www.baidu.com&quot;;也可以是IP地址的字符串形式。如果给定的是IP地址，只检查其格式是否正确。如果给定主机名是null或者`host.length()==0,`那么则返回回环地址。如果给定主机无IP绑定，或者给定的是一个IPV6的范围地址（</a> scoped address），抛出异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetByName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//InetAddress getByName(String host)</span></span><br><span class="line">        <span class="comment">//给定主机名，获取其IP地址。主机名可以是域名，可以是IP地址</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//主机名为域名</span></span><br><span class="line">            InetAddress address1 = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            System.out.println(address1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//主机名为IP</span></span><br><span class="line">            InetAddress address2 = InetAddress.getByName(<span class="string">&quot;14.215.177.38&quot;</span>);</span><br><span class="line">            System.out.println(address2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//主机名为空</span></span><br><span class="line">            InetAddress address3 = InetAddress.getByName(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(address3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//主机名为null</span></span><br><span class="line">            InetAddress address4 = InetAddress.getByName(<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(address4);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//主机名未绑定IP</span></span><br><span class="line">            InetAddress address5 = InetAddress.getByName(<span class="string">&quot;www.buercheng.space&quot;</span>);</span><br><span class="line">            System.out.println(address5);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201101193927456.png" alt="image-20201101193927456"></p><h3 id="getAllByName-String-host"><a href="#getAllByName-String-host" class="headerlink" title="getAllByName(String host)"></a>getAllByName(String host)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> InetAddress[]getAllByName(String host)   <span class="keyword">throws</span> UnknownHostException</span><br></pre></td></tr></table></figure><blockquote><p>给定主机名字（可以是IP地址，可以是域名），返回与其绑定的所有IP地址组成的数组（IP地址由系统配置的域名服务提供）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInetAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//主机名为域名</span></span><br><span class="line">        String host = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress[] addresses = InetAddress.getAllByName(host);</span><br><span class="line">            <span class="keyword">for</span> (InetAddress address : addresses) &#123;</span><br><span class="line">                System.out.println(address);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201101100812594.png" alt="image-20201101100812594"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInetAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//主机名为IP</span></span><br><span class="line">        String host = <span class="string">&quot;192.168.43.1&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress[] addresses = InetAddress.getAllByName(host);</span><br><span class="line">            <span class="keyword">for</span> (InetAddress address : addresses) &#123;</span><br><span class="line">                System.out.println(address);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201101101140998.png" alt="image-20201101101140998"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInetAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String host = <span class="string">&quot;host&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress[] addresses = InetAddress.getAllByName(host);</span><br><span class="line">            <span class="keyword">for</span> (InetAddress address : addresses) &#123;</span><br><span class="line">                System.out.println(address);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未知主机异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会尝试解析，所以会运行一段时间，没有找到结果，报异常</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201101102151753.png" alt="image-20201101102151753"></p><h3 id="getByAddress-byte-addr"><a href="#getByAddress-byte-addr" class="headerlink" title="getByAddress(byte[] addr)"></a>getByAddress(byte[] addr)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title">getByAddress</span><span class="params">(<span class="keyword">byte</span>[] addr)</span>  <span class="keyword">throws</span> UnknownHostException</span></span><br></pre></td></tr></table></figure><blockquote><p>根据给定的IP地址组成的字节数组，生成一个InetAddress对象。不执行反向域名解析（不对IP地址绑定的域名进行查询）。IP地址为非法长度时，抛出异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetByAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//static InetAddress getByAddress(byte[] addr):</span></span><br><span class="line">        <span class="comment">//  通过给定的由IP地址组成的字节数组，获取指定的主机名称</span></span><br><span class="line">        <span class="keyword">byte</span>[] addr = &#123;(<span class="keyword">byte</span>)<span class="number">192</span>, (<span class="keyword">byte</span>)<span class="number">168</span>, <span class="number">43</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress address = InetAddress.getByAddress(addr);</span><br><span class="line">            System.out.println(address);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未知主机地址&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201101174953529.png" alt="image-20201101174953529"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetByAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//static InetAddress getByAddress(byte[] addr):</span></span><br><span class="line">        <span class="comment">//  IP地址长度不对</span></span><br><span class="line">        <span class="keyword">byte</span>[] addr = &#123;(<span class="keyword">byte</span>) <span class="number">192</span>, (<span class="keyword">byte</span>) <span class="number">168</span>, <span class="number">43</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress address = InetAddress.getByAddress(addr);</span><br><span class="line">            System.out.println(address);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未知主机地址&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201101175225153.png" alt="image-20201101175225153"></p><h3 id="getByAddress-String-host-byte-addr"><a href="#getByAddress-String-host-byte-addr" class="headerlink" title="getByAddress(String host, byte[] addr)"></a>getByAddress(String host, byte[] addr)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title">getByAddress</span><span class="params">(String host,<span class="keyword">byte</span>[] addr)</span><span class="keyword">throws</span> UnknownHostException</span></span><br></pre></td></tr></table></figure><blockquote><p>通过给定的主机名和IP地址创建一个InetAddress实例，不会检查地址的合理性。</p><p>主机名可以是域名也可以是IP地址。御冥夜不会进行合理性检查。</p><p>如果给定的是IPV4地址则返回一个Inet4Address对象，给定的是IPV6地址则返回Inet6Address对象。</p><p>当IP地址的长度不合法时，抛出异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetByAddress2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//域名/IPV4</span></span><br><span class="line">            <span class="keyword">byte</span>[] add1 = &#123;(<span class="keyword">byte</span>) <span class="number">192</span>, (<span class="keyword">byte</span>) <span class="number">168</span>, <span class="number">43</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            InetAddress address1 = InetAddress.getByAddress(<span class="string">&quot;localhost&quot;</span>, add1);</span><br><span class="line">            System.out.println(address1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//IPV4/IPV6</span></span><br><span class="line">            <span class="keyword">byte</span>[] add2 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            InetAddress address2 = InetAddress.getByAddress(<span class="string">&quot;127.0.0.1&quot;</span>, add2);</span><br><span class="line">            System.out.println(address2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//长度不对时，抛出异常</span></span><br><span class="line">            <span class="keyword">byte</span>[] add3 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            InetAddress address3 = InetAddress.getByAddress(<span class="string">&quot;1localhost&quot;</span>, add3);</span><br><span class="line">            System.out.println(address3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102192437569.png" alt="image-20201102192437569"></p><h3 id="getLocalHost"><a href="#getLocalHost" class="headerlink" title="getLocalHost()"></a>getLocalHost()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title">getLocalHost</span><span class="params">()</span>  <span class="keyword">throws</span> UnknownHostException</span></span><br></pre></td></tr></table></figure><blockquote><p>返回本地主机网络地址。通过系统找到主机域名，再返回一个InetAddress实例。</p><p>本地域名不能被处理为InetAddress时抛出异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetLocalHost</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress localHost = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(localHost);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102210510287-1604324397597.png" alt="image-20201102210510287"></p><h3 id="getLoopbackAddress"><a href="#getLoopbackAddress" class="headerlink" title="getLoopbackAddress()"></a>getLoopbackAddress()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title">getLoopbackAddress</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><p>返回环回地址。如果是IPV4地址，则返回<code>127.*.*.*</code>中的一个；IPV6则返回<code>::1</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetLoopbackAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InetAddress loopbackAddress = InetAddress.getLoopbackAddress();</span><br><span class="line">        System.out.println(loopbackAddress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102213715865-1604324397598.png" alt="image-20201102213715865"></p><h2 id="获取InetAddress实例的信息的方法"><a href="#获取InetAddress实例的信息的方法" class="headerlink" title="获取InetAddress实例的信息的方法"></a>获取InetAddress实例的信息的方法</h2><ul><li><code>byte[] getAddress()</code></li><li><code>String getHostAddress()</code></li><li><code>String getHostName()</code></li><li><code>getCanonicalHostName()</code></li></ul><h3 id="byte-getAddress"><a href="#byte-getAddress" class="headerlink" title="byte[] getAddress()"></a>byte[] getAddress()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getAddress()</span><br></pre></td></tr></table></figure><blockquote><p>返回调用该实例的对象的IP地址的字节数组形式。</p></blockquote><p>这个方法返回的 byte数组是有符号的。在Java中byte类型的取值范围是-128〜127。如果返回的IP地址的某个字节是大于127的整数，在byte数组中就是负数。由于Java中没有无符号byte类型，因此，要想显示正常的IP地址，必须使用int或long类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 用getByName()方法创建一个InetAddress实例</span></span><br><span class="line">            InetAddress inetAddress = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            <span class="comment">// getAddress()方法获取IP地址的字节数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] addresses = inetAddress.getAddress();</span><br><span class="line">            <span class="comment">// IP地址中的某一位如果大于127会得到一个负数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> address : addresses) &#123;</span><br><span class="line">                System.out.print(address + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="comment">// 对于IP地址中大于127的数字需要进行处理</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> address : addresses) &#123;</span><br><span class="line">                <span class="keyword">int</span> newAddress = (address &lt; <span class="number">0</span>) ? <span class="number">256</span> + address : address;</span><br><span class="line">                System.out.print(newAddress + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102221728984.png" alt="image-20201102221728984"></p><h3 id="String-getHostAddress"><a href="#String-getHostAddress" class="headerlink" title="String getHostAddress()"></a>String getHostAddress()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHostAddress</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><p>返回IP地址的字符串形式。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetHostAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取实例</span></span><br><span class="line">            InetAddress host = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取实例的IP地址</span></span><br><span class="line">            String hostAddress = host.getHostAddress();</span><br><span class="line">            System.out.println(hostAddress);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102222228979.png" alt="image-20201102222228979"></p><h3 id="String-getHostName"><a href="#String-getHostName" class="headerlink" title="String getHostName()"></a>String getHostName()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHostName</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><p>返回调用此方法的对象的域名。如果此对象是用域名方式创建的，则返回创建时使用的域名。否则，会根据系统配置进行反向域名解析。</p></blockquote><p>系统配置：<code>C:\Windows\System32\drivers\etc\host</code>中，<code>20.20.11.2 www.test.com</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetHostName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据IP地址创建对象</span></span><br><span class="line">        <span class="keyword">byte</span>[] address = &#123;<span class="number">20</span>,<span class="number">20</span>,<span class="number">11</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress host = InetAddress.getByAddress(address);</span><br><span class="line">            <span class="comment">// 调用getHostName()获取域名</span></span><br><span class="line">            String hostName = host.getHostName();</span><br><span class="line">            System.out.println(hostName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据域名获取对象</span></span><br><span class="line">            InetAddress localhost = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            String hostName1 = localhost.getHostName();</span><br><span class="line">            System.out.println(hostName1);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102223809432.png" alt="image-20201102223809432"></p><h3 id="getCanonicalHostName"><a href="#getCanonicalHostName" class="headerlink" title="getCanonicalHostName()"></a>getCanonicalHostName()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCanonicalHostName</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><p>返回全限定域名。</p></blockquote><h2 id="判断是否是特殊地址的方法"><a href="#判断是否是特殊地址的方法" class="headerlink" title="判断是否是特殊地址的方法"></a>判断是否是特殊地址的方法</h2><ul><li><code>boolean isAnyLocalAddress()</code></li><li><code>boolean isLinkLocalAddress()</code></li><li><code>boolean isLoopbackAddress()</code></li><li><code>boolean isMulticastAddress()</code></li><li><code>boolean isMCGlobal()</code></li><li><code>boolean isMCLinkLocal()</code></li><li><code>boolean isMCNodeLocal()</code></li><li><code>boolean isMCOrgLocal()</code></li><li><code>boolean isMCSiteLocal()</code></li><li><code>boolean isReachable(int timeout)</code></li><li><code>boolean isReachable(NetworkInterface netif, int ttl, int timeout)</code></li></ul><h1 id="NetworkInterface常用方法"><a href="#NetworkInterface常用方法" class="headerlink" title="NetworkInterface常用方法"></a>NetworkInterface常用方法</h1><ul><li><code>static EnumerationNetworkInterface getNetworkInterfaces()</code></li><li><code>static NetworkInterface getByInetAddress(InetAddress addr)</code></li><li><code>static NetworkInterface getByName(String name)</code></li><li><code>EnumerationInetAddress getInetAddresses()</code></li><li><code>String getName()</code></li><li><code>String getDisplayName()</code></li></ul><h2 id="getNetworkInterfaces"><a href="#getNetworkInterfaces" class="headerlink" title="getNetworkInterfaces()"></a>getNetworkInterfaces()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Enumeration&lt;NetworkInterface&gt; <span class="title">getNetworkInterfaces</span><span class="params">()</span> <span class="keyword">throws</span> SocketException</span></span><br></pre></td></tr></table></figure><blockquote><p>返回此机器上的所有网络接口的枚举类集合。该枚举类集合至少包含一个元素，可能代表只支持本地实例通信的环回接口。</p><p>发生IO错误，或者此机器没有配置任何接口时抛出异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> NetworkInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetNetworkInterfaces</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得一个本地机器全部网络接口的枚举类集合</span></span><br><span class="line">            Enumeration&lt;NetworkInterface&gt; networkInterfaces = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">            <span class="comment">// 遍历该集合</span></span><br><span class="line">            <span class="keyword">while</span>(networkInterfaces.hasMoreElements())&#123;</span><br><span class="line">                NetworkInterface networkInterface = networkInterfaces.nextElement();</span><br><span class="line">                System.out.println(networkInterface);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102231952283.png" alt="image-20201102231952283"></p><h2 id="getByInetAddress-InetAddress-addr"><a href="#getByInetAddress-InetAddress-addr" class="headerlink" title="getByInetAddress(InetAddress addr)"></a>getByInetAddress(InetAddress addr)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NetworkInterface <span class="title">getByInetAddress</span><span class="params">(InetAddress addr)</span> <span class="keyword">throws</span> SocketException</span></span><br></pre></td></tr></table></figure><blockquote><p>查找绑定了指定IP地址 的网络接口。</p><p>发生IO错误时，抛出<code>SocketException</code>异常。</p><p>指定的IP地址为null时，抛出<code>NullPointerException</code>异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> NetworkInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetByInetAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个InetAddress对象</span></span><br><span class="line">            <span class="keyword">byte</span>[] ip = &#123;<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">            InetAddress inetAddress = InetAddress.getByAddress(ip);</span><br><span class="line">            <span class="comment">// 通过getByInetAddress()获取该InetAddress的IP地址绑定的接口</span></span><br><span class="line">            NetworkInterface networkInterface = NetworkInterface.getByInetAddress(inetAddress);</span><br><span class="line">            System.out.println(networkInterface);</span><br><span class="line"></span><br><span class="line">            InetAddress inetAddress1 = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            NetworkInterface anInterface = NetworkInterface.getByInetAddress(inetAddress1);</span><br><span class="line">            System.out.println(anInterface);<span class="comment">//null NetworkInterface只能获取本地接口</span></span><br><span class="line"></span><br><span class="line">            NetworkInterface anInterface1 = NetworkInterface.getByInetAddress(<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(anInterface1);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102234208693.png" alt="image-20201102234208693"></p><h2 id="getByName-String-name"><a href="#getByName-String-name" class="headerlink" title="getByName(String name)"></a>getByName(String name)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NetworkInterface <span class="title">getByName</span><span class="params">(String name)</span> <span class="keyword">throws</span> SocketException</span></span><br></pre></td></tr></table></figure><blockquote><p>查找指定名称对应的网络接口。如果不存在，则返回null</p><p>发生IO错误时，抛出<code>SocketException</code>异常。</p><p>指定的IP地址为null时，抛出<code>NullPointerException</code>异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> NetworkInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetByName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            NetworkInterface networkInterface = NetworkInterface.getByName(<span class="string">&quot;lo&quot;</span>);</span><br><span class="line">            System.out.println(networkInterface);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不存在</span></span><br><span class="line">            NetworkInterface networkInterface1 = NetworkInterface.getByName(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">            System.out.println(networkInterface1);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102234450529.png" alt="image-20201102234450529"></p><h2 id="getInetAddresses"><a href="#getInetAddresses" class="headerlink" title="getInetAddresses()"></a>getInetAddresses()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Enumeration&lt;InetAddress&gt; <span class="title">getInetAddresses</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><p>返回该网络接口绑定的全部InetAddress或者其子集的一个枚举类集合。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> NetworkInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetInetAddress</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 先获得一个NetworkInterface对象</span></span><br><span class="line">            NetworkInterface anInterface = NetworkInterface.getByName(<span class="string">&quot;lo&quot;</span>);</span><br><span class="line">            <span class="comment">// 再通过getInetAddress()获取其InetAddress的枚举集合</span></span><br><span class="line">            Enumeration&lt;InetAddress&gt; inetAdds = anInterface.getInetAddresses();</span><br><span class="line">            <span class="comment">// 遍历枚举集合</span></span><br><span class="line">            <span class="keyword">while</span>(inetAdds.hasMoreElements())&#123;</span><br><span class="line">                InetAddress inetAdd = inetAdds.nextElement();</span><br><span class="line">                System.out.println(inetAdd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102235304239.png" alt="image-20201102235304239"></p><h2 id="getName"><a href="#getName" class="headerlink" title="getName()"></a>getName()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><p>获取该网络接口的名字。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> NetworkInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过InetAddress对象获取一个NetworkInterface对象</span></span><br><span class="line">            InetAddress inetAddress = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            NetworkInterface networkInterface = NetworkInterface.getByInetAddress(inetAddress);</span><br><span class="line">            <span class="comment">// 通过getName方法获取接口名字</span></span><br><span class="line">            String name = networkInterface.getName();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201102235715820.png" alt="image-20201102235715820"></p><h2 id="getDisplayName"><a href="#getDisplayName" class="headerlink" title="getDisplayName()"></a>getDisplayName()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDisplayName</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><p>返回该接口的描述名称。描述名称是易于人阅读的名称。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> NetworkInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetDisplayName</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            NetworkInterface anInterface = NetworkInterface.getByName(<span class="string">&quot;lo&quot;</span>);</span><br><span class="line">            String displayName = anInterface.getDisplayName();</span><br><span class="line">            System.out.println(displayName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201103000045568.png" alt="image-20201103000045568"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> java笔记 </tag>
            
            <tag> JAVA SOCKET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络基础</title>
      <link href="/posts/2434046563/"/>
      <url>/posts/2434046563/</url>
      
        <content type="html"><![CDATA[<h1 id="网络（Networks）、包（Packets）和协议（Protocols）"><a href="#网络（Networks）、包（Packets）和协议（Protocols）" class="headerlink" title="网络（Networks）、包（Packets）和协议（Protocols）"></a>网络（Networks）、包（Packets）和协议（Protocols）</h1><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>计算机网络由通过<strong>通信信道(communication channerls)**相互连接的机器组成。这些机器也叫作</strong>主机(hosts)<strong>或</strong>路由器(routers)**。</p><blockquote><p>通信信道，在这里指将一系列字节从一个主机转移到另一个主机的一种工具。可以是有线的，比如以太网（Ethernet）；可以是无线的，比如WiFi；或者是其他的连接方式。</p><p>主机是运行应用（诸如浏览器、QQ等应用）的计算机。运行在主机上的应用程序是该网络真正的“用户”</p><p>路由器是具有将<strong>信息（information）</strong>从一个通信信道<strong>转播（relay）或转发（forward）</strong>到另一个通信信道功能的机器。他们可能会运行程序，但通常不会运行应用程序。</p></blockquote><h2 id="Packet"><a href="#Packet" class="headerlink" title="Packet"></a>Packet</h2><p><strong>信息</strong>指的是被程序构造和解译的一系列字节。在计算机网络中，这些字节通常被称为<strong>包（packets)</strong> 。一个包包含能够用于完成计算机网络的任务的<strong>控制信息（control information）</strong>，有时还包含用户数据。比如，包含用于识别包需要到达的目的地的信息。路由器可以使用这些控制信息来找出怎样转发每一个包。</p><h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>协议是关于通信程序之间包交换以及包的含义的<strong>规则</strong>。协议指定了包的组成，（比如，目的地的信息在包中的位置以及大小）以及信息该如何被解译。</p><p>通常，不同的协议用来解决不同的问题。比如<strong>HTTP协议（HyperText Transfer Protocol超文本传输协议）</strong>是用来解决超文本对象的传输问题的。</p><h2 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>实现一个有用的网络，需要解决大量不同的问题。为了让事情变得易于管理和模块化，需要设计不同的协议来解决一类的问题。TCP/IP就是这样一个解决集合（collection of solutions），有时也叫作协议套件（Protocol suite）。</p><p>此后，提及网络，都指的是使用TCP/IP协议套件的网络。</p><p>TCP/IP协议套件中最主要的协议是 Internet Protocol (IP), the Transmission Control Protocol (TCP，用户传输协议) , User Datagram Protocol (UDP，用户数据报协议)。</p><h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><p>TCP/IP和其他所有协议套件都被分<strong>层（layer</strong>）了。</p><p>如图，展示了在主机和路由器上，协议、应用程序以及Sockets API之间的关系，也展示了从一个应用程序（使用TCP）发送到另一个应用程序的数据的流向。应用程序通过SocketsAPI获得TCP和UDP提供的服务。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201028162116324.png" alt="A TCP/IP network"></p><p>在TCP/IP协议中，最底层是由底层通信信道组成的（比方说以太网或者是拨号上网调制解调器连接）。这些信道被上一层的<strong>网络层</strong>所使用，网络层主要解决的问题是将包转发到他们的目的地（也就是路由器的功能）；网络层主要的协议是IP协议，它使得两台主机之间就好像是单一的host-to-host信道，即使这两台主机之间存在许多的通信信道和路由器。</p><blockquote><p>IP协议提供了<strong>数据报datagram</strong>服务：每一个包都是被网络单独发送出去的，因此每一个IP包必须包含目的<strong>地址</strong>信息。IP协议是最有效协议：它尝试发送每一个包。但是在网络中传递的时候，也会偶尔丢包，重新排列包，或是复制包。</p></blockquote><p>网络层之上是<strong>传输层（transport layer）</strong>，该层有两种协议可以选择：TCP或是UDP。两者都建立在IP协议提供的服务上，但根据应用需求不同，可以选择不同的协议。两者有一个共同的功能：<strong>寻址addressing</strong>。IP发送包给主机，但在主机需要更细分，因为一个主机可能运行了多个应用程序，需要决定应该把包发送给哪一个应用程序。TCP和UDP使用的地址，称作<strong>端口号port numbers</strong>。TCP/IP叫作<strong>端到端传输协议（end-to-end transport protocols）</strong>，因为它们总是将数据从一个应用程序传递到另一个应用程序。</p><blockquote><p>TCP需要检测和恢复，可能在IP协议提供的host-to-host信道中出现的：丢包，复制包或是其他错误。TCP提供了一个<strong>可信字节流信道reliable byte-stream channel</strong>，因此应用程序就不需要去处理上述可能出现的错误。TCP是一个<strong>连接导向协议connection-oriented protocol</strong>：在使用该协议进行通信之前，两个程序之间首先要建立TCP连接，这其中还包含了两台通信的计算机之间进行的<strong>握手</strong>信息的交换。</p><ul><li><p>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可<br>  靠。</p><ul><li><p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</p></li><li><p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</p></li><li><p>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201028171026514.png" alt="三次握手"></p><p>UDP则不检测IP阶段可能发生的错误，因此使用UDP协议的应用需要来检查和恢复出现的错误。</p></li></ul></li></ul></blockquote><h1 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h1><blockquote><p>When you mail a letter, you provide the address of the recipient in a form that the postal<br>service can understand. Before you can talk to someone on the phone, you must supply a<br>phone number to the telephone system. In a similar way, before a program can communicate<br>with another program, it must tell the network something to identify the other program. In<br>TCP/IP, it takes two pieces of information to identify a particular program: an <strong>Internet address</strong>,<br>used by IP, and a <strong>port number</strong>, the additional address interpreted by the transport protocol<br>(TCP or UDP).</p></blockquote><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>网络地址是二进制数字。根据IP协议版本的不同，分为IPV4地址和IPV6地址。在技术上来说，每个网络地址指的是一个主机和底层通信信道之间的连接，即<strong>网络接口network interface</strong>。一个主机可能有多个接口。</p><p>每个版本的IP协议，定义了一些特殊用途的地址：</p><ul><li><strong>回送地址loopback address</strong>：通常分配了一个特定的<strong>回送接口loopback interface</strong>。一个虚拟的设备会将传送包发送回本地。主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，协议软件立即返回之，不进行任何网络传输。</li><li>对于IPV4来说，还存在用于私有网络的保留地址。</li><li><strong>链路本地地址link-local</strong>：这样的地址只能用于连接同一网络的主机之间的通信，路由器不会转发它们。</li><li><strong>组播地址multicast address</strong>：一般的IP地址（称为<strong>单播地址unicast</strong>）只指向单一目的地，组播地址则指向多个目的地。</li></ul><h3 id="IPV4"><a href="#IPV4" class="headerlink" title="IPV4"></a>IPV4</h3><p>IPV4地址<strong>长32位（bits），4个字节（bytes）</strong>。IPV4地址可以使用<strong>点分法（dotted-quad）</strong>来书写，每一组数字代可以是十进制数字，代表一个字节，比如：<code>10.1.2.3</code>。每一位的取值范围是0-255。</p><p>IPV4的回送地址是<code>127.0.0.1</code>.严格来说任何127开头的地址都能回送。</p><p>IPV4用于私有网络的保留地址包括10开头和<code>192.168</code>开头的所有地址，以及172开头，第二位为16和31的所有地址。</p><p>IPV4的链路本地地址以<code>169.254</code>开头。</p><p>IPV4的组播地址包含从224开头的地址到239开头的地址。</p><h3 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h3><p>IPV6地址长<strong>128位（bits），16个字节（bytes）</strong>。IPV6地址使用十六进制数字来书写，每组数字代表2个字节，组与组之间用冒号隔开，比如<code>2000:fdb8:0000:0000:0001:00ab:853c:39a1</code>。前导0可以省略，比如：<code>2000:fdb8:0000:0000:1:ab:853c:39a1</code>。连续的只包含0的组可以一起省略（但只能省略一次），比如<code>2000:fdb8::1:00ab:853c:39a1</code>。</p><p>IPV6的回送地址是<code>0:0:0:0:0:0:0:1</code>,或者简写为<code>::1</code></p><p>IPV6的链路本地地址以<code>FE8</code>开头。</p><p>IPV6的组播地址以FF开头。</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>TCP或是UDP的端口号通常跟一个地址相关联。</p><blockquote><p>The postal service uses the street address to get the<br>letter to a mailbox; whoever empties the mailbox is then responsible for getting the letter to the<br>proper room within the building. Or consider a company with an internal telephone system:<br>to speak to an individual in the company, you first dial the company’s main phone number to<br>connect to the internal telephone system and then dial the extension of the particular telephone<br>of the individual you wish to speak with.</p><p><strong>the Internet address is the street address or the company’s main number, whereas the port corresponds to the room number or telephone extension.</strong></p></blockquote><p>端口号是16位的无符号二进制数字，其范围是1-65535（0号端口被保留）。</p><h1 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h1><p>我们已经习惯将一个名称（比如<code>host.example.com</code>）指向相应的主机。但是IP协议处理的是地址（二进制数字），而不是名称。</p><p>我们需要使用**域名系统Domain Name System (DNS)**和本地配置的数据库，来将域名和IP地址联系起来。</p><h1 id="服务端-amp-客户端"><a href="#服务端-amp-客户端" class="headerlink" title="服务端&amp;客户端"></a>服务端&amp;客户端</h1><p>客户端程序初始化通信，服务端程序被动的等待并且回复与它进行通信的客户端程序。服务端和客户端组成了应用。</p><p>一个程序是作为客户端还是服务端，决定了其使用sockets API来与其对等方（peer）进行通信的一般形式。（客户端是服务端的对等方，反之亦然）。因此，辨别服务端和客户端就很重要了，因为，客户端需要知道服务端的地址和端口号以便初始化通信。但是反过来不成立，因为通过sockets API，服务端在接收到客户端的初始化通信时便能够获取到客户端的地址信息</p><blockquote><p>in order to<br>be called, a person does not need to know the telephone number of the caller. As with a<br>telephone call, once the connection is established, the distinction between server and client<br>disappears.</p></blockquote><p>那么客户端又怎么能知道服务端的IP地址和端口号呢？通常，客户端知道他想要进行通信的服务端的名字即可。比方说，通过**统一资源定位符Universal Resource Locator (URL)**，诸如<code>https://www.baidu.com</code>此形式，然后再通过DNS即可知道相应的服务端的IP地址。</p><p>想要知道服务端的端口有点不同。理论上，服务端会使用任意的端口号，但是客户端又必须找到他。对一些特定的服务，规定了一些特定的端口号。比如，端口号21分配给了**文件传输协议File Transfer Protocol (FTP)**。</p><h1 id="什么是Socket"><a href="#什么是Socket" class="headerlink" title="什么是Socket"></a>什么是Socket</h1><blockquote><p>A socket is an abstraction through which an application may send and receive data，A socket allows an application to plug in to the network and communicate with other applications that are plugged in to the same network. Information written to the socket by an application on one machine can be read by an application on a different machine and vice<br>versa.</p></blockquote><p>不同类型的套接字与不同类型的协议套件以及协议套件中的不同协议栈相关联。</p><p>TCP/IP中主要的套接字类型是<code>stream sockets</code> 和 <code>datagram sockets</code>。<code>stream sockets</code>使用TCP作为端到端协议（底层通过IP协议），因此提供了一个可信赖的字节流（byte-stream）服务。一个TCP/IP <code>stream socket</code>代表了TCP连接的一端。<code>datagram sockets</code>使用的是UDP协议（底层通过IP协议），因此提供了一个最优数据报服务（best-effort datagram service），使得应用可以单次发送大约65500字节的信息。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201029010632768.png" alt="Sockets, protocols, and ports"></p><blockquote><p>Figure 1.2 depicts the logical relationships among applications, socket abstractions,<br>protocols, and port numbers within a single host. Note that a single socket abstraction can<br>be referenced by multiple application programs. Each program that has a reference to a particular socket can communicate through that socket. Earlier we said that a port identifies an<br>application on a host. Actually, a port identifies a socket on a host. From Figure 1.2, we see<br>that multiple programs on a host can access the same socket. In practice, separate programs<br>that access the same socket would usually belong to the same application (e.g., multiple copies<br>of a Web server program), although in principle they could belong to different applications.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> Java Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> java笔记 </tag>
            
            <tag> JAVA SOCKET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，拼出来的屌丝生活</title>
      <link href="/posts/21945543/"/>
      <url>/posts/21945543/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近，“拼单名媛”挺火的。一群女生拼单订酒店，订豪车，更有甚者拼单买丝袜，只为了拍照吸引所谓上流社会男士的关注，以图跻身名媛。</p><p>我以前，哪怕现在也喜欢使用拼单的方式，购买一些东西。说好听点，叫做节约，但其实说白了，还是穷啊。并不是说节约不好，相反，节约是一种美德。“量入为出，适度消费”，也应该是我们应该遵循的消费原则。</p><p>想想那些年，快乐真的很简单。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/90sYouthLife_2017_rgb.jpg" alt="90后的我的青春"></p><h1 id="小学阶段"><a href="#小学阶段" class="headerlink" title="小学阶段"></a>小学阶段</h1><p>我这一路走来，其实还挺顺风顺水的，基本没挨过老师的打，家里人也没怎么打过（是好事，也是坏事）。遇到的人也都是比较好的人，大家都对我很好，虽然最后可能因为各种原因，彼此渐渐疏远了。</p><p>小学毕业也十几年了，那时候也不懂事，记忆也渐渐模糊了。小学肯定也是和别人“拼单”买过东西的，或者是买一包辣条，或者是买一包冰棍。但终究还是记不住多少了。只记得那时候，没有同桌，只有前后桌。我的前桌是个有点邋遢的女生，但我们关系还是不错的，她人也很好。就记得有一次，没有带书，她把她的书给了我，然后她自己被老师批评。想想那时候，我拿她的书拿的心安理得，害别人被老师批评也没有一点愧疚，果然我什么时候都不是一个好的朋友。</p><p>后来她好像是转学了吧，记忆里关于她的片段很少很少，也许有一天我会连上面这件事也会忘掉吧。</p><p>小学的其他许多人都是这样，虽然就是一个村或是隔壁村的，但是，渐渐地就消失在了我们的生活里，连回忆里也不曾有他们的存在，但他们也确实在我的生活里给我留下过快乐和温暖！</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/1309990_Wallpaper2.webp" alt="背上书包离开家乡"></p><h1 id="初中"><a href="#初中" class="headerlink" title="初中"></a>初中</h1><p>初中的记忆，就很丰满了。那是我渐渐懂事的三年，也是情窦渐开的三年。</p><p>那时候，初一，我们还和高中部在一起，全校好几千人。到了饭点，我们不可避免的要跟年龄和身高都碾压我们的高年级学生抢饭吃。那时候，饭菜还不咋好吃，吃也吃不饱。胆大的都溜出校门出去觅食了，我胆子小啊，只敢在食堂吃饭。食堂是私人承包的，老板开起了小灶，专卖小锅炒的菜。味道肯定是比平常吃的大锅菜要好很多，自然价格也不是我能承受的起的。于是乎，又和平常在一起吃饭的LZY打起了主意。最后决定两人各出一半的钱，点一份炒菜吃。那叫一个香啊，虽然只有少的可怜的肉，但是油挺重的，还有蒜苗带来的香味，也算是解了我的馋了。有时候还能点一条鱼，虽然是鲫鱼，但对那时候还在长身体的我们来说，不异于山珍海味了。</p><p>那时候，每两周放一次假，但是周末下午是可以出去的。对于从农村去城里上学的我来说，学校周边的商店物资可以说是看花了眼了。那时候超级女声还很火，大家都喜欢喝酸酸乳之类的，反倒不喜欢喝纯牛奶。特别想喝酸酸乳咋办？虽然也只要几十块钱一箱，但是对我们穷学生来说，这几十是接下来一周的零用钱了。于是大伙又想到了拼单。两个人或是几个人合伙买一箱，一箱有二十四包，一天一包够喝好久了。现在再回过头来看，酸酸乳都只能算是一种饮料了，也没纯牛奶营养，但我依旧记得那时候喝过的芦荟味，蓝莓味的酸酸乳，就跟我现在喝快乐水一样，带给了我无限的快乐。当然那时候出去放风，除了牛奶，水果啥的也是我们拼单的对象。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/34mX4Nf4RiNX5cnQk2c_lMmC13jYm5sl.jpg" alt="快乐可以很简单，也可以很困难"></p><h1 id="高中阶段"><a href="#高中阶段" class="headerlink" title="高中阶段"></a>高中阶段</h1><p>高中又回到了初一时候待过的学校。日子也好过了不少，两个姑妈也会每周给我送饭送水果。但是钱就是那么不经花，大概是我吃零食吃太多了。所以又开始了和舍友CS拼饭的生活，两个人打一个四块钱的菜，然后再打一块钱饭，一餐就两块五解决了。因为好像食堂换了人承包，也没有小灶可以吃了。偶尔觉得食堂不好吃，就去吃泡面，后来发现学校商店泡面太贵，又和CS合伙批了一箱泡面，各种口味：老坛酸菜，红烧牛肉面。后来吃泡面都吃到吐了。</p><p>高三，又和CS一起，蹭TBW和XN家里送来的饭，四个人吃的那叫一个开心。后来我妈每天给我送饭，改为在寝室和其他室友一起拼桌吃法，日子也是很难忘的。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/article-5b84aa5611ba1.jpg" alt="终究还是分道扬镳"></p><h1 id="大学阶段"><a href="#大学阶段" class="headerlink" title="大学阶段"></a>大学阶段</h1><p>大学虽然不用那么窘迫了，但还是几个人一人点个菜，最后平摊，一份钱收获好几份快乐。后来啊，ZZD经常请我吃饭，都不用我付账，感觉就很过意不去。中间也闹过别扭，现在关系也有点问题，但那是后话了。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/resized.jpg" alt="resized"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>记忆越清晰，能写的东西越少。</p><p>那些和我拼单的兄弟，他们都已经有了不错的生活，而我还是一个屌丝。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/Luke-Christou-Verdict.jpg" alt="未来何去何从"></p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA构建错误:Gradle:Cause:zip END header not found</title>
      <link href="/posts/3790347158/"/>
      <url>/posts/3790347158/</url>
      
        <content type="html"><![CDATA[<h1 id="1-问题复现"><a href="#1-问题复现" class="headerlink" title="1.问题复现"></a>1.问题复现</h1><p>在<a href="https://hyperskill.org/">hyperskill</a>学习Java时，之前导入项目都好好的。由于换了个账号（可能是切换了账号的原因），打开学习项目时，提示如下，运行按钮是灰的，并且提示：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/20201018191932.png"></p><p>按提示点击按钮后，出现<code>build failed</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/20200917144049894.png" alt="没有截图，网上找的图"></p><h1 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h1><p>按照这篇教程：<a href="https://blog.csdn.net/bhfswrcn/article/details/107116657">idea使用gradle进行build时报错 Cause: zip END header not found</a>的方法，修改了配置</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/20201018193701.png" alt="修改配置"></p><p>重新构建，问题依然存在。</p><p>再次搜索了一下，按照这篇文章<a href="https://blog.csdn.net/haiquanquan123456/article/details/108642649">问题: gradle Cause: zip END header not found</a>试了一下，还是不行。</p><p>改变思路。</p><p>同时更改了<code>gradle-wrapper.properties</code>文件，配置如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">#把远程地址注释掉</span><br><span class="line">#distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-6.6.1-bin.zip</span></span><br><span class="line">#使用本地的gradle包</span><br><span class="line">distributionUrl=<span class="keyword">file</span>:<span class="comment">///D:/IdeaProjects/gradle-6.7-bin.zip</span></span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br></pre></td></tr></table></figure><p>找到<code>File-&gt;settings-&gt;Build,Execution,Deployment-&gt;Build Tools</code>下的<code>gradle</code>选项，设置为图中所示即可</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/20201018195116.png" alt="gradle设置"></p><p>重新build：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/20201018194314.png" alt="重新build中"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/20201018195444.png" alt="build成功"></p><p>build成功后，右键运行一次后，即可开始写代码了。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/20201018195702.png" alt="右键运行"></p><p>这里不再是灰色了！</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201018195813307.png" alt="ToolBar"></p><h1 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h1><p>中间踩过的其他坑就不详细记述了，我太难了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 教程 </category>
          
          <category> IDEA </category>
          
          <category> Gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 编译错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/posts/3546711884/"/>
      <url>/posts/3546711884/</url>
      
        <content type="html"><![CDATA[<h1 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>集合</strong>：集合是java中提供的一种容器，可以用来存储多个数据。</p><p>集合与数组的区别</p><ul><li>数组的长度是固定的。集合的长度是可变的。</li><li>数组中存储的是同一类型的元素，可以存储基本数据类型值，也可以存储对象。集合存储的都是对象。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。</li></ul><p>java.util.Collection类是所有<strong>单列集合</strong>的根接口；</p><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><p>JAVASE提供了满足各种需求的API，在使用这些API前，先了解其继承与接口操作架构，才能了解何时采用哪个类，以及类之间如何彼此合作，从而达到灵活应用。</p><h3 id="学习集合的目标"><a href="#学习集合的目标" class="headerlink" title="学习集合的目标"></a>学习集合的目标</h3><p>1.会使用集合存储数据</p><p>2.会遍历集合，把数据取出来</p><p>3.掌握每种集合的特性</p><h3 id="集合框架示意图"><a href="#集合框架示意图" class="headerlink" title="集合框架示意图"></a>集合框架示意图</h3><p>Java集合类主要是由两个根接口Collection和Map派生出来的。</p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic/imgs/集合框架图示.jpg"><p>Collection接口定义的是所有单列集合中共性的方法；所有单列集合都可以使用共性的方法；没有的带索引的方法。</p><ul><li>List接口：有序的集合（存储和取出元素顺序相同）；允许有重复的元素；有索引，可以使用普通的for循环遍历。</li><li>Set接口：不允许存储重复的元素；没有索引，不能使用普通的for循环遍历。TreeSet和HashSet是无序的集合（存储和取出元素顺序可能不同），LinkedHashSet是有序的集合。</li></ul><p>集合框架的学习方式：</p><p>学习顶层：学习顶层接口/抽象类中共性的方法，所有子类可以使用；</p><p>使用底层：顶层不是接口就是抽象类，无法创建对象使用，需要使用底层的子类创建对象使用。</p><h2 id="Collection集合常用功能-共性方法"><a href="#Collection集合常用功能-共性方法" class="headerlink" title="Collection集合常用功能 (共性方法)"></a>Collection集合常用功能 (共性方法)</h2><p>Collection是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p><ul><li><code>public boolean add(E e)</code>：  把给定的对象添加到当前集合中 。</li><li><code>public void clear()</code> :清空集合中所有的元素。</li><li><code>public boolean remove(E e)</code>: 把给定的对象在当前集合中删除。</li><li><code>public boolean contains(E e)</code>: 判断当前集合中是否包含给定的对象。</li><li><code>public boolean isEmpty()</code>: 判断当前集合是否为空。</li><li><code>public int size()</code>: 返回集合中元素的个数。</li><li><code>public Object[] toArray()</code>: 把集合中的元素，存储到数组中。</li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用多态创建一个Collection对象</span></span><br><span class="line">        Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//打印ArrayList对象，重写了toString方法</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//isEmpty方法判断该集合是否为空，如果为空，则返回true；不为空，则返回false</span></span><br><span class="line">        System.out.println(list.isEmpty());</span><br><span class="line">        <span class="comment">//通过add方法向集合中添加元素，添加成功返回true，添加失败返回false。一般都是添加成功</span></span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;田七&quot;</span>);</span><br><span class="line">        <span class="comment">//添加完元素后再次判断集合是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());</span><br><span class="line">        <span class="comment">//用size方法得到集合中元素的个数</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//用remove方法删除集合中对应的元素，如果存在该元素则删除该元素返回true；否则返回false</span></span><br><span class="line">        list.remove(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list.remove(<span class="string">&quot;赵四&quot;</span>));</span><br><span class="line">        <span class="comment">//用cotains方法判断集合中是否包含指定元素，包含则返回true，否则返回false</span></span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;赵四&quot;</span>));</span><br><span class="line">        <span class="comment">//用toArray方法将集合转为对象数组</span></span><br><span class="line">        Object[] arr = list.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用clear方法，清空集合</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h2><h3 id="接口介绍"><a href="#接口介绍" class="headerlink" title="接口介绍"></a>接口介绍</h3><p>在程序开发中，经常需要遍历集合中的所有元素。针对这种需求，JDK专门提供了一个接口<code>java.util.Iterator</code>。<code>Iterator</code>接口也是Java集合中的一员，但它与<code>Collection</code>、<code>Map</code>接口有所不同，<code>Collection</code>接口与<code>Map</code>接口主要用于存储元素，而<code>Iterator</code>主要用于迭代访问（即遍历）<code>Collection</code>中的元素，因此<code>Iterator</code>对象也被称为迭代器。</p><p>想要遍历Collection集合，那么就要获取该集合迭代器完成迭代操作，下面介绍一下获取迭代器的方法：</p><ul><li><code>public Iterator iterator()</code>: 获取集合对应的迭代器，用来遍历集合中的元素的。</li></ul><p>下面介绍一下迭代的概念：</p><ul><li><strong>迭代</strong>：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续在判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>boolean    hasNext()：Returns true if the iteration has more elements.<br>E    next()：Returns the next element in the iteration.</p><p>Iterator是一个接口，我们无法直接使用，需要使用Iterator的实现类来创建对象使用。但是获取实现类的方法比较特殊，我们可以利用Collection接口中的interator方法的返回值来创建一个Iterator接口的实现类对象。</p><h3 id="迭代器的使用步骤"><a href="#迭代器的使用步骤" class="headerlink" title="迭代器的使用步骤"></a>迭代器的使用步骤</h3><p>1、使用集合中的方法iterator()获取迭代器的实现类对象，使用Iterator接口接收（多态）；(Iterator也是有泛型的，集合是什么泛型，Iterator就是什么泛型)</p><p>2、使用Iterator接口中的方法hasNext判断集合中是否还有下一个元素；<br>3、使用Iterator接口中的方法next取出集合中的下一个元素</p><p>当没有下一个元素,执行next方法会报NoSuchElementException</p><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用多态创建一个Collection对象</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//向集合中添加一些元素，可以使用Collection的add方法</span></span><br><span class="line">        coll.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;田七&quot;</span>);</span><br><span class="line">        <span class="comment">//用Collection接口中的iterator()方法创建一个Iterator接口的实现类对象</span></span><br><span class="line">        <span class="comment">//迭代器的泛型与Collection的泛型一致</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = coll.iterator();</span><br><span class="line">        <span class="comment">//用Iterator接口中的hasNext方法判断集合中是否还有下一个元素，再用next方法获取下一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><p>增强for循环(也称for each循环)是<strong>JDK1.5</strong>以后出来的一个高级for循环，专门用来遍历数组和集合的。它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，<strong>不能对集合中的元素进行增删操作</strong>。也叫for-each循环</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>for(数据类型 变量名 : 数组名/集合名){</p><p>//其他操作</p><p>}</p><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.shenzc.java.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个整形数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//利用增强for循环遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : arr1)&#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//定义一个字符串数组</span></span><br><span class="line">        String[] arr2 = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//用增强for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String s : arr2)&#123;</span><br><span class="line">            System.out.print(s + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic/imgs/image-20200713102012312.png"></p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型概述"><a href="#泛型概述" class="headerlink" title="泛型概述"></a>泛型概述</h2><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@main/img/2020/10/17/image-20200816213305822.png" alt="泛型"></p><p>在前面学习集合时，我们都知道集合中是可以存放任意对象的，只要把对象存储到集合后，那么这时他们都会被提升成Object类型。当我们在取出每一个对象，并且进行相应的操作，这时必须采用类型转换。</p><p>大家观察下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">coll.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">coll.add(<span class="number">5</span>);<span class="comment">//由于集合没有做任何限定，任何类型都可以给其中存放</span></span><br><span class="line">Iterator it = coll.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line"><span class="comment">//需要打印每个字符串的长度,就要把迭代出来的对象转成String类型</span></span><br><span class="line">String str = (String) it.next();</span><br><span class="line">System.out.println(str.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序在运行时发生了问题<strong>java.lang.ClassCastException</strong>。                                                                                             为什么会发生类型转换异常呢？                                                                                                                                       我们来分析下：由于集合中什么类型的元素都可以存储。导致取出时强转引发运行时 ClassCastException。                                                                                                                                                       怎么来解决这个问题呢？                                                                                                                                                           Collection虽然可以存储各种对象，但实际上通常Collection只存储同一类型对象。例如都是存储字符串对象。因此在JDK5之后，新增了<strong>泛型</strong>(<strong>Generic</strong>)语法，让你在设计API时可以指定类或方法支持泛型，这样我们使用API的时候也变得更为简洁，并得到了编译时期的语法检查。</p><ul><li><strong>泛型</strong>：可以在类或方法中预支地使用未知的类型。</li></ul><blockquote><p>tips:一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Object类型。</p></blockquote><h2 id="使用泛型的好处"><a href="#使用泛型的好处" class="headerlink" title="使用泛型的好处"></a>使用泛型的好处</h2><ul><li>将运行时期的ClassCastException，转移到了编译时期变成了编译失败。</li><li>避免了类型强转的麻烦。</li></ul><p>弊端</p><p>集合只能存取特定类型的数据</p><h2 id="定义和使用含有泛型的类"><a href="#定义和使用含有泛型的类" class="headerlink" title="定义和使用含有泛型的类"></a>定义和使用含有泛型的类</h2><p>修饰符 class 类名&lt;代表泛型的变量&gt; {  }</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericClass</span>&lt;<span class="title">MVP</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//没有MVP类型，在这里代表 未知的一种数据类型 未来传递什么就是什么类型</span></span><br><span class="line"><span class="keyword">private</span> MVP mvp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMVP</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mvp = mvp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MVP <span class="title">getMVP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义和使用含有泛型的方法"><a href="#定义和使用含有泛型的方法" class="headerlink" title="定义和使用含有泛型的方法"></a>定义和使用含有泛型的方法</h2><p>泛型定义在方法的修饰符和返回值之间</p><p>格式：</p><p>修饰符 &lt;泛型&gt; 返回值类型 方法名 （参数列表（使用泛型））{</p><p>}</p><p>含有泛型的方法，在调用方法时确定泛型的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;M&gt; <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(M m)</span></span>&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericMethod ge = <span class="keyword">new</span> GenericMethod();</span><br><span class="line">        ge.method(<span class="number">4</span>);</span><br><span class="line">        ge.method(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义和使用含有泛型的接口"><a href="#定义和使用含有泛型的接口" class="headerlink" title="定义和使用含有泛型的接口"></a>定义和使用含有泛型的接口</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>格式</p><p><code>修饰符 interface 接口名&lt;泛型&gt;&#123;&#125;</code></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> E <span class="title">getE</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>1.定义类时确定泛型类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo02;</span><br><span class="line"><span class="comment">//在定义类时确定泛型的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl1</span> <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.接口是什么泛型，实现类就是什么泛型，在实现类创建对象时确定泛型类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo02;</span><br><span class="line"><span class="comment">//接口是什么泛型，实现类就是什么泛型，在实现类创建对象时确定泛型类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl2</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericInterfaceImpl1 ge1 = <span class="keyword">new</span> GenericInterfaceImpl1();</span><br><span class="line">        ge1.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        GenericInterfaceImpl2&lt;String&gt; ge2 = <span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        ge2.add(<span class="string">&quot;CDD&quot;</span>);</span><br><span class="line">        GenericInterfaceImpl2&lt;Integer&gt; ge3 = <span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        ge3.add(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型的通配符"><a href="#泛型的通配符" class="headerlink" title="泛型的通配符"></a>泛型的通配符</h2><p>当使用泛型类或者接口时，<strong>传递的数据</strong>中，泛型类型不确定，可以通过通配符&lt;?&gt;表示。但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h4 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h4><p>泛型的通配符:<strong>不知道使用什么类型来接收的时候,此时可以使用?,?表示未知通配符。</strong></p><p>此时只能接受数据,不能往该集合中存储数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wildcard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; coll1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;Integer&gt; coll2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        method(coll1);</span><br><span class="line">        method(coll2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Collection&lt;?&gt; coll)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通配符高级使用—-受限泛型"><a href="#通配符高级使用—-受限泛型" class="headerlink" title="通配符高级使用—-受限泛型"></a>通配符高级使用—-受限泛型</h4><p>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在JAVA的泛型中可以指定一个泛型的<strong>上限</strong>和<strong>下限</strong>。</p><p><strong>泛型的上限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? extends 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其子类</code></li></ul><p><strong>泛型的下限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? super 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其父类型</code></li></ul><p>比如：现已知Object类，String 类，Number类，Integer类，其中Number是Integer的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitedWildcard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        method1(list1);</span><br><span class="line">        method1(list2);</span><br><span class="line">        method1(list3);</span><br><span class="line">        method1(list4);</span><br><span class="line">        </span><br><span class="line">        method2(list1);</span><br><span class="line">        method2(list2);</span><br><span class="line">        method2(list3);</span><br><span class="line">        method2(list4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(Collection&lt;? extends Number&gt;coll)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt;coll)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic/imgs/20200817005015.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式</title>
      <link href="/posts/3150929911/"/>
      <url>/posts/3150929911/</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda的使用前提"><a href="#Lambda的使用前提" class="headerlink" title="Lambda的使用前提"></a>Lambda的使用前提</h1><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p><strong>The functional interface</strong> is an interface (not a class or enum) with a single abstract method (SAM type). Static and default methods are allowed here.</p><blockquote><p>函数式接口是一个只有单一抽象方法的接口（不是类或枚举类型）。静态方法和默认方法允许出现在函数式接口中。</p></blockquote><p>There is a special annotation <strong>@FunctionalInterface</strong> in <strong>The Java Class Library</strong>. It marks functional interfaces and indicates if the interface doesn’t  satisfy the requirements of a functional interface (compile-time error). The annotation is not mandatory but it’s recommended to mark functional interfaces.</p><blockquote><p>Java类库中指定了注解**@FunctionalInterface** 来标识函数式接口，使用此注解后不是函数式接口的接口将会出现编译期错误。此注解不是必须的，但建议用来标识函数式接口。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Func</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T val)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doNothingStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">doNothingByDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个泛型函数式接口。只有一个实例方法<strong>apply</strong>。</p><p>The interface represents a function (in the math sense). The function has an instance method apply which takes a value of type T and returns a result of type R.</p><blockquote><p>这个接口代表一个函数（数学意义上的）。这个函数有一个实例方法，该方法接收一个泛型T的值，返回一个泛型R的值。</p></blockquote><p>The functional interface is another way to model functions using object-oriented programming instead of methods.</p><h2 id="实现函数式接口"><a href="#实现函数式接口" class="headerlink" title="实现函数式接口"></a>实现函数式接口</h2><p>We can’t create an instance of the functional interface <strong>Func&lt;T, R&gt;</strong> because it’s an interface. First, we should implement it and then  create an instance of the concrete class. The main thing is to implement the <strong>apply</strong> method to get a concrete behavior.</p><blockquote><p>我们不能直接实例化函数式接口，因为它是一个接口。首先，我们需要用一个实现类实现这个接口，然后创建一个实现类的实例。主要的事情就是实现apply方法得到具体行为。</p></blockquote><p>Like any interface, a functional interface can be implemented using regular inheritance or anonymous classes.</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>To implement a functional interface let’s create an anonymous class and  override the method apply. The overridden method calculates the square  of a given value.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Func&lt;Long,Long&gt; square = <span class="keyword">new</span> Func&lt;Long,Long&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Long <span class="title">apply</span><span class="params">(Long va)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val * val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">long</span> val = square.apply(<span class="number">10L</span>);<span class="comment">//100L</span></span><br></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Func&lt;Long,Long&gt; square = val -&gt; val * val;</span><br><span class="line"><span class="keyword">long</span> val =  square.apply(<span class="number">10L</span>);<span class="comment">//100L</span></span><br></pre></td></tr></table></figure><h2 id="Lambda表达式作为参数传给方法"><a href="#Lambda表达式作为参数传给方法" class="headerlink" title="Lambda表达式作为参数传给方法"></a>Lambda表达式作为参数传给方法</h2><p>It’s possible to pass a lambda expression to a method if the method takes an object of type a suitable functional interface.</p><p>Here is an example. The method <strong>acceptFunctionalInterface</strong> takes an object of the standard type <strong>Function&lt;Integer, Integer&gt;</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">acceptFunctionalInterface</span><span class="params">(Function&lt;Integer, Integer&gt; f)</span> </span>&#123;</span><br><span class="line">   System.out.println(f.apply(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s pass some functions in the method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// it returns the next value</span></span><br><span class="line">Function&lt;Integer, Integer&gt; f = (x) -&gt; x + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">acceptFunctionalInterface(f); <span class="comment">// it prints 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or even without a reference</span></span><br><span class="line">acceptFunctionalInterface(x -&gt; x + <span class="number">1</span>); <span class="comment">// the result is the same: 11</span></span><br></pre></td></tr></table></figure><p>Inside the method <strong>acceptFunctionalInterface</strong>, the given function will be invoked. In enterprise programming, it is often called <strong>the callback</strong>.</p><p>According to Wikipedia: “<em>a callback is a piece of executable code that is passed as an argument to other code, which is expected to call  back (execute) the argument at some convenient time.”</em></p><p>In other words, in Java, we can pass our functions (presented by objects) in a method/function as its arguments.</p><p><strong>Note</strong>. In functional programming, a function (including methods in Java) that accepts or returns another function is called a <strong>higher-order function</strong>. A lot of features such as <strong>function composition</strong>, <strong>currying</strong>, <strong>monads</strong>, and some others are based on this idea.</p><h2 id="Usage-of-closures"><a href="#Usage-of-closures" class="headerlink" title="Usage of closures"></a>Usage of closures</h2><p>In the body of a lambda expression, it’s  possible to capture values from a context where the lambda is defined.  This technique is called <strong>closure</strong>.</p><p>Let’s see an example.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String hello = <span class="string">&quot;Hello, &quot;</span>;</span><br><span class="line">Function&lt;String, String&gt; helloFunction = (name) -&gt; hello + name;</span><br><span class="line"></span><br><span class="line">System.out.println(helloFunction.apply(<span class="string">&quot;John&quot;</span>));</span><br><span class="line">System.out.println(helloFunction.apply(<span class="string">&quot;Anastasia&quot;</span>));</span><br></pre></td></tr></table></figure><p>The lambda expression captured the final variable <strong>hello</strong>.</p><p>The result of this code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, John</span><br><span class="line">Hello, Anastasia</span><br></pre></td></tr></table></figure><p>It’s possible only if a context variable has a keyword <strong>final</strong> or it’s <strong>effectively final</strong>, i.e. variable can’t be changed. Otherwise, an error happens.</p><p>Let’s consider the example with an effectively final variable.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> constant = <span class="number">100</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; adder = x -&gt; x + constant;</span><br><span class="line"></span><br><span class="line">System.out.println(adder.apply(<span class="number">200</span>));</span><br><span class="line">System.out.println(adder.apply(<span class="number">300</span>));</span><br></pre></td></tr></table></figure><p>The variable <strong>constant</strong> is effectively final and being captured by the lambda expression.</p><p><strong>Note.</strong> If we use anonymous classes instead of lambdas, we can do the same tricks.</p><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：</p><ol><li>使用Lambda必须具有接口，且要求接口中有且仅有一个抽象方法。<br> 无论是JDK内置的 Runnable 、 Comparator 接口还是自定义的接口，只有当接口中的抽象方法存在且唯一<br> 时，才可以使用Lambda。</li><li>使用Lambda必须具有上下文推断。<br> 也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li></ol><blockquote><p>备注：有且仅有一个抽象方法的接口，称为“函数式接口”。</p></blockquote><h1 id="函数式编程思想概述"><a href="#函数式编程思想概述" class="headerlink" title="函数式编程思想概述"></a>函数式编程思想概述</h1><p>在数学中，函数就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过<br>分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——强调做什么，而不是以<br>什么形式做。<br>面向对象的思想:<br>做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.<br>函数式编程思想:<br>只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</p><h1 id="冗余的Runnable代码"><a href="#冗余的Runnable代码" class="headerlink" title="冗余的Runnable代码"></a>冗余的Runnable代码</h1><h2 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h2><p>当需要启动一个线程去完成任务时，通常会通过 java.lang.Runnable 接口来定义任务内容，并使用<br>java.lang.Thread 类来启动该线程。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用匿名内部类创建一个Runnable的实现类对象，作为参数传入Thread的构造器中，并重写Runnable的run方法设置线程任务，</span></span><br><span class="line">        <span class="comment">// 然后调用start方法，启动线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;重写了run方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个 Runnable 接口的匿名内部类对象来指定任务内<br>容，再将其交给一个线程来启动。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>对于 Runnable 的匿名内部类用法，可以分析出几点内容：</p><ul><li>Thread 类需要 Runnable 接口作为参数，其中的抽象 run 方法是用来指定线程任务内容的核心；</li><li>为了指定 run 的方法体，<strong>不得不</strong>需要 Runnable 接口的实现类；<br>  为了省去定义一个 RunnableImpl 实现类的麻烦，<strong>不得不</strong>使用匿名内部类；<br>  必须覆盖重写抽象 run 方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；<br>  而实际上，<strong>似乎只有方法体才是关键所在</strong>。</li></ul><h1 id="编程思想转换"><a href="#编程思想转换" class="headerlink" title="编程思想转换"></a>编程思想转换</h1><h1 id="改用更优的Lambda表达式"><a href="#改用更优的Lambda表达式" class="headerlink" title="改用更优的Lambda表达式"></a>改用更优的Lambda表达式</h1><p>借助Java 8的全新语法，上述 Runnable 接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*//使用匿名内部类创建一个Runnable的实现类对象，作为参数传入Thread的构造器中，并重写Runnable的run方法设置线程任务，</span></span><br><span class="line"><span class="comment">        // 然后调用start方法，启动线程</span></span><br><span class="line"><span class="comment">        new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void run() &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;重写了run方法&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;).start();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式写法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;重写了run方法&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码和刚才的执行效果是完全一样的，可以在1.8或更高的编译级别下通过。从代码的语义中可以看出：我们<br>启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。<br>不再有“不得不创建接口对象”的束缚，不再有“抽象方法覆盖重写”的负担，就是这么简单！</p><h1 id="匿名内部类回顾"><a href="#匿名内部类回顾" class="headerlink" title="匿名内部类回顾"></a>匿名内部类回顾</h1><h2 id="使用实现类"><a href="#使用实现类" class="headerlink" title="使用实现类"></a>使用实现类</h2><p>要启动一个线程，需要创建一个 Thread 类的对象并调用 start 方法。而为了指定线程执行的内容，需要调用<br>Thread 类的构造方法：<br>public Thread(Runnable target)<br>为了获取 Runnable 接口的实现对象，可以为该接口定义一个实现类 RunnableImpl，然后创建该实现类的对象作为 Thread 类的构造参数。</p><h2 id="使用匿名内部类"><a href="#使用匿名内部类" class="headerlink" title="使用匿名内部类"></a>使用匿名内部类</h2><p>这个 RunnableImpl 类只是为了实现 Runnable 接口而存在的，而且仅被使用了唯一一次，所以使用匿名内部类的<br>语法即可省去该类的单独定义。</p><h2 id="匿名内部类的好处与弊端"><a href="#匿名内部类的好处与弊端" class="headerlink" title="匿名内部类的好处与弊端"></a>匿名内部类的好处与弊端</h2><p>一方面，匿名内部类可以帮我们<strong>省去实现类的定义</strong>；另一方面，匿名内部类的<strong>语法——确实太复杂了</strong>！</p><h2 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h2><p>仔细分析该代码中的语义， Runnable 接口只有一个 run 方法的定义：<br>public abstract void run();<br>即制定了一种做事情的方案（其实就是一个函数）：</p><ul><li>无参数：不需要任何条件即可执行该方案。</li><li>无返回值：该方案不产生任何结果。</li><li>代码块（方法体）：该方案的具体执行步骤。</li></ul><p>同样的语义体现在 Lambda 语法中，要更加简单：</p><p><code>() -&gt; &#123; System.out.println(&quot;重写了run方法&quot;);&#125;</code></p><ul><li>前面的一对小括号即 run 方法的参数（无），代表不需要任何条件；</li><li>中间的一个箭头代表将前面的参数传递给后面的代码；</li><li>后面的输出语句即业务逻辑代码。</li></ul><h1 id="Lambda语句标准格式"><a href="#Lambda语句标准格式" class="headerlink" title="Lambda语句标准格式"></a>Lambda语句标准格式</h1><p>Lambda省去面向对象的条条框框，格式由3个部分组成：</p><ul><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ul><p>Lambda表达式的标准格式为：</p><p><code>(参数类型 参数名称) ‐&gt; &#123; 代码语句 &#125;</code></p><p>格式说明：<br>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。<br>-&gt; 是新引入的语法格式，代表指向动作。<br>大括号内的语法与传统方法体要求基本一致</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="示例1：无参无返回"><a href="#示例1：无参无返回" class="headerlink" title="示例1：无参无返回"></a>示例1：无参无返回</h3><p>给定一个厨子 Cook 接口，内含唯一的抽象方法 makeFood ，且无参数、无返回值。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cook</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，请使用Lambda的标准格式调用 invokeCook 方法，打印输出“吃饭啦！”字样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeCook</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 请在此使用Lambda【标准格式】调用invokeCook方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span><span class="params">(Cook cook)</span> </span>&#123;</span><br><span class="line">cook.makeFood();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeCook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用匿名内部类实现</span></span><br><span class="line">        invokeCook(<span class="keyword">new</span> Cook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吃饭啦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式</span></span><br><span class="line">        invokeCook(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;吃饭啦！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span><span class="params">(Cook cook)</span> </span>&#123;</span><br><span class="line">        cook.makeFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200912012644274.png"></p><h3 id="示例2：有参有返回"><a href="#示例2：有参有返回" class="headerlink" title="示例2：有参有返回"></a>示例2：有参有返回</h3><p>给定一个计算器 Calculator 接口，内含抽象方法 calc 可以将两个int数字相加得到和值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，请使用Lambda的标准格式调用 invokeCalc 方法，完成120和130的相加计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08InvokeCalc</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 请在此使用Lambda【标准格式】调用invokeCalc方法来计算120+130的结果ß</span></span><br><span class="line">&#125; <span class="function">p</span></span><br><span class="line"><span class="function">rivate <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCalc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Calculator calculator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = calculator.calc(a, b);</span><br><span class="line">System.out.println(<span class="string">&quot;结果是：&quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">120</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">130</span>;</span><br><span class="line">        <span class="comment">/*//匿名内部类方式</span></span><br><span class="line"><span class="comment">        invokeCalc(a, b, new Calculator() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int calc(int a, int b) &#123;</span></span><br><span class="line"><span class="comment">                return a + b;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda方式</span></span><br><span class="line">        invokeCalc(a, b, (<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCalc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Calculator calculator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = calculator.calc(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lambda省略格式"><a href="#Lambda省略格式" class="headerlink" title="Lambda省略格式"></a>Lambda省略格式</h1><h2 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h2><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内有且仅有一个参，则小括号可以省略；</li><li>如果大括号内有且仅有一个语句，则无论是否有返回值，都可以省略大括号、return关键字及语句分号（三个要一起省略）。</li></ol><h2 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeCook</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用匿名内部类实现</span></span><br><span class="line">        invokeCook(<span class="keyword">new</span> Cook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;吃饭啦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式</span></span><br><span class="line">        invokeCook(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;吃饭啦！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda省略格式</span></span><br><span class="line">        invokeCook(() -&gt; System.out.println(<span class="string">&quot;吃饭啦！&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCook</span><span class="params">(Cook cook)</span> </span>&#123;</span><br><span class="line">        cook.makeFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200912013249950.png"></p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> space.buercheng.java.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">120</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">130</span>;</span><br><span class="line">        <span class="comment">/*//匿名内部类方式</span></span><br><span class="line"><span class="comment">        invokeCalc(a, b, new Calculator() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int calc(int a, int b) &#123;</span></span><br><span class="line"><span class="comment">                return a + b;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda方式</span></span><br><span class="line">        invokeCalc(a, b, (<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda省略格式</span></span><br><span class="line">        invokeCalc(<span class="number">120</span>,<span class="number">130</span>,(x,y) -&gt; x + y);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeCalc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Calculator calculator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = calculator.calc(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200912013439324.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vercel部署hexo</title>
      <link href="/posts/776259585/"/>
      <url>/posts/776259585/</url>
      
        <content type="html"><![CDATA[<h1 id="第一部分：本地部署"><a href="#第一部分：本地部署" class="headerlink" title="第一部分：本地部署"></a>第一部分：本地部署</h1><p>这一步主要参考了<a href="https://zhuanlan.zhihu.com/p/44213627">知乎这篇文章</a>和<a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><p>官方地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p>淘宝镜像地址：<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p><h2 id="2-安装-Node-js"><a href="#2-安装-Node-js" class="headerlink" title="2.安装 Node.js"></a>2.安装 Node.js</h2><p>官方地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>淘宝镜像地址：<a href="https://npm.taobao.org/mirrors/node">https://npm.taobao.org/mirrors/node</a></p><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>至此就全部安装完了。</p><p>接下来初始化一下hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><p>这个myblog可以自己取什么名字都行，然后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myblog //进入这个myblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li></ul><p>继续执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。使用ctrl+c可以把服务关掉。</p><p>本地安装就基本结束了。</p><h1 id="第二部分：同步静态网页到github"><a href="#第二部分：同步静态网页到github" class="headerlink" title="第二部分：同步静态网页到github"></a>第二部分：同步静态网页到github</h1><blockquote><p>注意：这里同步的是利用<code>hexo g</code>生成的静态网页文件</p></blockquote><h2 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h2><p>github主页右上角，<code>New repository</code>，如果不需要使用githubpage部署的话，名字随便取，如果要使用githubpage部署的话，必须保证仓库名为<code>github用户名.github.io</code>。保证仓库为public，创建完成</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013183848372.png" alt="image-20201013183848372"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013184310009.png" alt="image-20201013184310009"></p><h2 id="2-生成SSH添加到Github"><a href="#2-生成SSH添加到Github" class="headerlink" title="2.生成SSH添加到Github"></a>2.生成SSH添加到Github</h2><p>回到你的git bash中，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>然后创建SSH,一路回车</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013184640451.png" alt="image-20201013184640451"></p><p>而后在GitHub的settings中，找到SSH keys的设置选项，点击<code>New SSH key</code> 把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013184817623.png" alt="image-20201013184817623"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013184921881.png" alt="image-20201013184921881"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013185039166.png" alt="image-20201013185039166"></p><p>在gitbash中，查看是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013185216648.png" alt="image-20201013185216648"></p><blockquote><p>不成功可能有很多原因，可以百度解决</p></blockquote><h1 id="第三部分：部署博客"><a href="#第三部分：部署博客" class="headerlink" title="第三部分：部署博客"></a>第三部分：部署博客</h1><h2 id="1-将博客部署到github"><a href="#1-将博客部署到github" class="headerlink" title="1.将博客部署到github"></a>1.将博客部署到github</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为 YourgithubName就是你的GitHub账户。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#分支名有可能默认为main</span></span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。在<code>myblog</code>目录下（以上命令也全是在该目录下，下同）打开gitbash，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #删除public目录</span><br><span class="line">hexo generate #生成静态网页文件</span><br><span class="line">hexo deploy #部署到github</span><br></pre></td></tr></table></figure><p>注意deploy时可能要你输入username和password。</p><p>得到类似的信息说明部署成功：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013190148372.png" alt="image-20201013190148372"></p><p>如果是用githubpage部署的，这时候访问<code>http://yourname.github.io</code>就能打开博客了。</p><h2 id="2-将博客部署到Vercel"><a href="#2-将博客部署到Vercel" class="headerlink" title="2.将博客部署到Vercel"></a>2.将博客部署到Vercel</h2><p>众所周知，GithubPage的访问速度很慢，但是有了Vercel（Zeit）咱就不用担心了。</p><p>进入<a href="https://vercel.com/">vercel</a>，使用邮箱注册或者使用github登录。</p><p>进入dashboard，选择<code>Import Project</code></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013190748764.png" alt="image-20201013190748764"></p><p>vercel提供了两种方式导入项目，这里我们选择第一种，直接导入仓库的静态网页文件。第二种是直接导入模板，在vercel服务器上生成网页，大概就是生成速度比较慢吧，但是部署简单。（我也没发现两者太大的区别）。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013191045347.png" alt="image-20201013191045347"></p><p>接下来，填入你之前生成的仓库地址，可以在github主页找到。形如<code>https://github.com/zerohk/hexo_blog.git</code></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013191250052.png" alt="image-20201013191250052"></p><p>接下来选择root路径，一般就是仓库名。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013191720346.png" alt="image-20201013191720346"></p><p>projectname就默认，框架就选择other，然后deploy部署</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013192006781.png" alt="image-20201013192006781"></p><p>部署成功就会显示礼花场景，然后会分配一个二级域名，打开就可以访问博客了。</p><h1 id="第四部分：添加自定义域名"><a href="#第四部分：添加自定义域名" class="headerlink" title="第四部分：添加自定义域名"></a>第四部分：添加自定义域名</h1><p>回到dashboard，点击项目</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013192319324.png" alt="image-20201013192319324"></p><p>view domains</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013192427234.png" alt="image-20201013192427234"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013192526447.png" alt="image-20201013192526447"></p><p>去域名商那里添加DNS记录即可。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013192755615.png" alt="image-20201013192755615"></p><h1 id="第五部分：发表文章、更改主题"><a href="#第五部分：发表文章、更改主题" class="headerlink" title="第五部分：发表文章、更改主题"></a>第五部分：发表文章、更改主题</h1><h2 id="1-发布文章更新站点"><a href="#1-发布文章更新站点" class="headerlink" title="1.发布文章更新站点"></a>1.发布文章更新站点</h2><p>参考<a href="https://blog.buercheng.space/posts/1820155650">发布文章指南</a>。都是在本地博客根目录，打开shell或gitbash执行这些命令。</p><p>执行<code>hexo d</code>到github后，vercel会自动更新部署。基本上，上传到github后，vercel就自动更新网站了。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20201013193433227.png" alt="image-20201013193433227"></p><h2 id="2-更改主题"><a href="#2-更改主题" class="headerlink" title="2.更改主题"></a>2.更改主题</h2><p>可以上<a href="https://hexo.io/">hexo官网</a>找到喜欢的主题，按照文档更改</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计</title>
      <link href="/posts/2215875518/"/>
      <url>/posts/2215875518/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><p>1.多表之间的关系</p><p>2.数据库设计的范式</p><h1 id="多表之间的关系"><a href="#多表之间的关系" class="headerlink" title="多表之间的关系"></a>多表之间的关系</h1><h2 id="1、一对一的关系（了解）"><a href="#1、一对一的关系（了解）" class="headerlink" title="1、一对一的关系（了解）"></a>1、一对一的关系（了解）</h2><p>比如，人和身份证。一个人对应一个身份证，一个身份证只能被一个人使用</p><h2 id="2、一对多（多对一）的关系"><a href="#2、一对多（多对一）的关系" class="headerlink" title="2、一对多（多对一）的关系"></a>2、一对多（多对一）的关系</h2><p>比如，员工和部门。一个员工只能在一个部门，一个部门可以有多个员工。员工相对部门是多对一的关系，部门相对员工是一对多的关系。</p><h2 id="3、多对多的关系"><a href="#3、多对多的关系" class="headerlink" title="3、多对多的关系"></a>3、多对多的关系</h2><p>比如，学生和课程。一个学生可以选择多个课程，一个课程可以被多个学生选择。</p><h1 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h1><h2 id="一对一的关系实现"><a href="#一对一的关系实现" class="headerlink" title="一对一的关系实现"></a>一对一的关系实现</h2><p>一对一关系的实现，可以在任意一方添加<strong>唯一</strong>的外键来指向另一方的主键。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200926225458347.png" alt="image-20200926225458347"></p><h2 id="一对多的关系实现"><a href="#一对多的关系实现" class="headerlink" title="一对多的关系实现"></a>一对多的关系实现</h2><p>一对多关系的实现，在多（n）的一方，建立外键，来指向一的一方的主键。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200926230326010.png" alt="image-20200926230326010"></p><h2 id="多对多的关系实现"><a href="#多对多的关系实现" class="headerlink" title="多对多的关系实现"></a>多对多的关系实现</h2><p>多对多关系的实现需要借助第三张表作为中间表，中间表至少要有两个字段，这两个字段分别作为第三张表的外键，指向多对多关系中额两张表的主键。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200926231202323.png" alt="image-20200926231202323"></p><h1 id="多表关系案例"><a href="#多表关系案例" class="headerlink" title="多表关系案例"></a>多表关系案例</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>三个表：旅游线路分类，旅游线路，游客。在数据库中实现。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200926232543530.png" alt="image-20200926232543530"></p><h2 id="表之间的关系"><a href="#表之间的关系" class="headerlink" title="表之间的关系"></a>表之间的关系</h2><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200926233322624.png" alt="image-20200926233322624"></p><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">-- 建立分类表</span><br><span class="line">-- cid 线路分类主键，自动增长</span><br><span class="line">-- cname 分类名称非空 唯一，字符串100</span><br><span class="line">CREATE TABLE tab_category(</span><br><span class="line">cid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">cname VARCHAR(100) NOT NULL UNIQUE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建线路表 tab_route</span><br><span class="line">/*</span><br><span class="line">rid:旅游线路主键，自动增长</span><br><span class="line">rname：旅游线路名称，唯一，非空，字符串100</span><br><span class="line">price：价格</span><br><span class="line">rdate：上架时间，日期类型</span><br><span class="line">cid：外键，所属线路分类</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_route(</span><br><span class="line">rid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">rname VARCHAR(100) NOT NULL UNIQUE,</span><br><span class="line">price DOUBLE,</span><br><span class="line">rdate DATE,</span><br><span class="line">cid INT,</span><br><span class="line">FOREIGN KEY (cid) REFERENCES tab_category(cid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建用户表</span><br><span class="line">/*</span><br><span class="line">uid 用户主键，自增长</span><br><span class="line">username 用户名长度 100，唯一，非空</span><br><span class="line">password 密码长度 30，非空</span><br><span class="line">name 真实姓名长度 100</span><br><span class="line">birthday 生日</span><br><span class="line">sex 性别，定长字符串 1</span><br><span class="line">telephone 手机号，字符串 11</span><br><span class="line">email 邮箱，字符串长度 100</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_user(</span><br><span class="line">uid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(100) NOT NULL UNIQUE,</span><br><span class="line">PASSWORD VARCHAR(30) NOT NULL,</span><br><span class="line">NAME VARCHAR(100),</span><br><span class="line">birthday DATE,</span><br><span class="line">sex VARCHAR(1) DEFAULT &#x27;男&#x27;,-- default 指定默认值</span><br><span class="line">telephone VARCHAR(11),</span><br><span class="line">email VARCHAR(100)</span><br><span class="line">);</span><br><span class="line">-- 添加数据  insert into 表名[(列名,...)] values(值),(值),...;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_category (cname) VALUES (&#x27;周边游&#x27;), (&#x27;出境游&#x27;), (&#x27;国内游&#x27;), (&#x27;港澳游&#x27;);</span><br><span class="line">SELECT * FROM tab_category;</span><br><span class="line"></span><br><span class="line">INSERT INTO tab_route VALUES</span><br><span class="line">(NULL, &#x27;【厦门+鼓浪屿+南普陀寺+曾厝垵 高铁 3 天 惠贵团】尝味友鸭面线 住 1 晚鼓浪屿&#x27;, 1499,&#x27;2018-01-27&#x27;, 1),</span><br><span class="line">(NULL, &#x27;【浪漫桂林 阳朔西街高铁 3 天纯玩 高级团】城徽象鼻山 兴坪漓江 西山公园&#x27;, 699, &#x27;2018-02-22&#x27;, 3),</span><br><span class="line">(NULL, &#x27;【爆款￥1699 秒杀】泰国 曼谷 芭堤雅 金沙岛 杜拉拉水上市场 双飞六天【含送签费 泰风情 广州往返 特价团】&#x27;, 1699, &#x27;2018-01-27&#x27;, 2),</span><br><span class="line">(NULL, &#x27;【经典•狮航 ￥2399 秒杀】巴厘岛双飞五天 抵玩【广州往返 特价团】&#x27;, 2399, &#x27;2017-12-23&#x27;,2),</span><br><span class="line">(NULL, &#x27;香港迪士尼乐园自由行 2 天【永东跨境巴士广东至迪士尼去程交通+迪士尼一日门票+香港如心海景酒店暨会议中心标准房 1 晚住宿】&#x27;, 799, &#x27;2018-04-10&#x27;, 4);</span><br><span class="line">SELECT * FROM tab_route;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO tab_user VALUES</span><br><span class="line">(NULL, &#x27;cz110&#x27;, 123456, &#x27;老王&#x27;, &#x27;1977-07-07&#x27;, &#x27;男&#x27;, &#x27;13888888888&#x27;, &#x27;66666@qq.com&#x27;),</span><br><span class="line">(NULL, &#x27;cz119&#x27;, 654321, &#x27;小王&#x27;, &#x27;1999-09-09&#x27;, &#x27;男&#x27;, &#x27;13999999999&#x27;, &#x27;99999@qq.com&#x27;);</span><br><span class="line">SELECT * FROM tab_user;</span><br><span class="line"></span><br><span class="line">-- 创建线路表和用户表的中间表 -- 收藏表</span><br><span class="line">/*</span><br><span class="line">创建收藏表 tab_favorite</span><br><span class="line">rid 旅游线路 id，外键</span><br><span class="line">date 收藏时间</span><br><span class="line">uid 用户 id，外键</span><br><span class="line">rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_favorite(</span><br><span class="line">rid INT,</span><br><span class="line">DATE DATE,</span><br><span class="line">uid INT,</span><br><span class="line">-- 创建联合主键</span><br><span class="line">PRIMARY KEY(rid,uid),</span><br><span class="line">FOREIGN KEY(rid) REFERENCES tab_route(rid),-- 添加外键的简化形式</span><br><span class="line">FOREIGN KEY(uid) REFERENCES tab_user(uid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加收藏数据</span><br><span class="line">INSERT INTO tab_favorite VALUES</span><br><span class="line">(1, &#x27;2018-01-01&#x27;, 1), -- 老王选择厦门</span><br><span class="line">(2, &#x27;2018-02-11&#x27;, 1), -- 老王选择桂林</span><br><span class="line">(3, &#x27;2018-03-21&#x27;, 1), -- 老王选择泰国</span><br><span class="line">(2, &#x27;2018-04-21&#x27;, 2), -- 小王选择桂林</span><br><span class="line">(3, &#x27;2018-05-08&#x27;, 2), -- 小王选择泰国</span><br><span class="line">(5, &#x27;2018-06-02&#x27;, 2); -- 小王选择迪士尼</span><br><span class="line"></span><br><span class="line">SELECT * FROM tab_favorite;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>设计数据库时需要遵循的规则。要满足后边的范式，必须遵循前面的范式。</p><blockquote><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。<br>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p></blockquote><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>满足前三大范式，数据库设计基本就可以了。</p><p><strong>1、第一范式（1NF）：</strong>数据库表的每一列都是不可分割的原子数据项。</p><p><strong>2、第二范式（2NF）：</strong>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上<strong>消除</strong>非主属性对主码的<strong>部分函数依赖</strong>）。</p><p><strong>3、第三范式（3NF）：</strong>在2NF基础上，任何非主<a href="https://baike.baidu.com/item/%E5%B1%9E%E6%80%A7">属性</a>不依赖于其它非主属性（在2NF基础上<strong>消除传递依赖</strong>）。</p><h2 id="三大范式详解"><a href="#三大范式详解" class="headerlink" title="三大范式详解"></a>三大范式详解</h2><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929081704933.png" alt="image-20200929081704933"></p><p>在如图示的学生信息表中，系这一列还可以分为系名和系主任，因此这个表不是每一项都是不可分割的原子项。（不满足第一范式）。</p><p>要让这个表满足第一范式，可以这样操作，直接将系名和系主任作为单独的列：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929082005067.png" alt="image-20200929082005067"></p><p>不满足第一范式，在数据库中连表都创建不出。</p><p>满足第一范式存在的问题：</p><p>1.存在非常严重的数据冗余（重复）：姓名，系名，系主任。</p><p>2.数据添加存在问题：比如添加新开设的系和系主任时，数据不合法。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929082329457.png" alt="image-20200929082329457"></p><p>3.删除数据存在问题：比如张无忌毕业了，删除数据，系名，系主任都会被删除。</p><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>几个概念：</p><p>1.函数依赖：A–&gt;B:如果通过A<strong>属性或属性组</strong>的值，可以确定<strong>唯一</strong>B属性的值，则说B函数依赖A</p><p>例如：学号–&gt;姓名，&lt;学号，课程名称&gt;–&gt;分数</p><p>2.完全函数依赖：A–&gt;B,如果A是一个<strong>属性组</strong>，B属性的确定需要依赖于A属性组中<strong>所有属性</strong>的值，则称B完全依赖于A。</p><p>例如：&lt;学号，课程名称&gt;–&gt;分数</p><p>3.部分函数依赖：A–&gt;B，如果A是一个<strong>属性组</strong>，B属性的确定只需要依赖于A属性组中<strong>部分属性</strong>的值，则称B部分依赖于A。</p><p>例如：&lt;学号，课程名称&gt;–&gt;姓名（只需学号就能确定姓名）</p><p>4。传递函数依赖：A–&gt;B，B–&gt;C：如果通过A<strong>属性或属性组</strong>的值，可以确定唯一B属性或属性组的值，同时，通过B属性或属性组的值，可以唯一确定C属性或属性组的值，则称C传递函数依赖于A</p><p>例如：学号–&gt;系名，系名–&gt;系主任</p><p>5.码：如果在一张表中，一个属性或属性组，被其他所有属性完全依赖，则称该属性或属性组为这个表的码。</p><p>例如：该表的码为：（学号，课程名称）</p><p>主属性：码属性组中的所有属性</p><p>非主属性：除码属性组的属性之外的属性。</p><p>满足第二范式的要求就是在第一范式基础上消除部分函数依赖。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929092617983.png" alt="image-20200929092617983"></p><p>（学号，课程名称）作为码的话，姓名，系名，系主任都是部分依赖于码（姓名，系名完全依赖于学号，系主任传递依赖于学号），只有分数完全依赖于（学号，课程名称）。所以，可以把表进行拆分，以满足第二范式：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929092915704.png" alt="image-20200929092915704"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929092951398.png" alt="image-20200929092951398"></p><p>满足第二范式存在的问题：</p><p>2.数据添加存在问题：添加新开设的系和系主任时，数据不合法<br>3.数据删除存在问题：张无忌同学毕业了，删除数据，会将系的数据一起删除。</p><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>满足第三范式需要在遵循第二范式的基础上消除传递依赖。</p><p>从第二范式的学生表来看，系主任传递依赖于学号，所以可以继续对表进行拆分。</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929093230866.png" alt="image-20200929093230866"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929093248278.png" alt="image-20200929093248278"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929093308020.png" alt="image-20200929093308020"></p><p>以上几个问题都不存在了。</p><h1 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h1><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 数据库名称 &gt; 保存路径\文件名.sql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929094414760.png" alt="image-20200929094414760"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929094616356.png" alt="image-20200929094616356"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929094639576.png" alt="image-20200929094639576"></p><h3 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h3><p>1.登录数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p;</span><br></pre></td></tr></table></figure><p>2.创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名;</span><br></pre></td></tr></table></figure><p>3.使用数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名</span><br></pre></td></tr></table></figure><p>4.执行文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source 保存路径\文件名.sql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929095755781.png" alt="image-20200929095755781"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929095815725.png" alt="image-20200929095815725"></p><h2 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h2><h3 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h3><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929100430802.png" alt="image-20200929100430802"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929100454200.png" alt="image-20200929100454200"></p><h2 id="还原-1"><a href="#还原-1" class="headerlink" title="还原"></a>还原</h2><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929100558175.png" alt="image-20200929100558175"></p><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">列名列表</span><br><span class="line">from </span><br><span class="line">表名列表</span><br><span class="line">where...</span><br></pre></td></tr></table></figure><p>创建两个表：部门表，员工表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-- 创建部门表</span><br><span class="line">CREATE TABLE dept(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO dept(NAME) VALUES(&#x27;开发部&#x27;),(&#x27;市场部&#x27;),(&#x27;财务部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 创建员工表</span><br><span class="line">CREATE TABLE emp(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(10),</span><br><span class="line">gender CHAR(1),</span><br><span class="line">salary DOUBLE,</span><br><span class="line">join_date DATE,</span><br><span class="line">dept_id INT,</span><br><span class="line">FOREIGN KEY (dept_id) REFERENCES dept(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;孙悟空&#x27;,&#x27;男&#x27;,7200,&#x27;2013-02-24&#x27;,1);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;猪八戒&#x27;,&#x27;男&#x27;,3600,&#x27;2010-12-02&#x27;,2);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;唐僧&#x27;,&#x27;男&#x27;,9000,&#x27;2008-08-08&#x27;,2);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;白骨精&#x27;,&#x27;女&#x27;,5000,&#x27;2015-10-07&#x27;,3);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;蜘蛛精&#x27;,&#x27;女&#x27;,4500,&#x27;2011-03-14&#x27;,1);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from dept,emp;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929103312328.png" alt="image-20200929103312328"></p><p>笛卡尔积：简单的说就是两个集合相乘的结果。</p><p>要完成多表查询需要消除无用查询。</p><h1 id="多表查询的分类"><a href="#多表查询的分类" class="headerlink" title="多表查询的分类"></a>多表查询的分类</h1><h2 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h2><p>组合两个表中的记录，返回关联字段相符的记录，也就是返回两个表的交集（阴影）部分。</p><p><img src="https://img-blog.csdn.net/20171209135846780?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGxnMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><h3 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h3><p>使用where条件来消除无用查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息和对应的部门信息</span><br><span class="line">SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`; -- 注意，不是单引号，是大键盘1旁边的符号 ，加或不加都一样</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929104250106.png" alt="image-20200929104250106"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工表的名称，性别，部门表的名称</span><br><span class="line">select emp.name,emp.gender,dept.name from emp,dept where emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><p>更常用的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">t1.name,</span><br><span class="line">t1.gender,</span><br><span class="line">t2.name</span><br><span class="line">from</span><br><span class="line">emp t1, -- 起别名</span><br><span class="line">dept t2 </span><br><span class="line">where</span><br><span class="line">t1.dept_id = t2.id;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929151319902.png" alt="image-20200929151319902"></p><h3 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名1 [inner] join 表名2 on 条件;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息和对应的部门信息</span><br><span class="line">select * from emp [inner] join dept on emp.`dept_id` = dept.`id`;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929152049136.png" alt="image-20200929152049136"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929152113819.png" alt="image-20200929152113819"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>从哪些表中查询数据；查询的条件是什么；查询哪些字段。</p><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><p>与显式内连接类似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表1名 left [outer] join 表2名 on 条件;</span><br></pre></td></tr></table></figure><p>假设新增了一个员工，但是未指定部门（即dept_id为NULL）</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/image-20200929210431997.png" alt="image-20200929210431997"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息，如果员工有部门，则显示部门名称，没有部门则不显示</span><br><span class="line">select</span><br><span class="line">t1.*,t2.name</span><br><span class="line">from</span><br><span class="line">emp t1,</span><br><span class="line">dept t2</span><br><span class="line">where</span><br><span class="line">t1.dept_id = t2.id;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/image-20200929210906698.png" alt="image-20200929210906698"></p><p>会发现上述查询并不显示部门为NULL的员工信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">t1.*,t2.name</span><br><span class="line">from</span><br><span class="line">emp t1</span><br><span class="line">left join</span><br><span class="line">dept t2</span><br><span class="line">on</span><br><span class="line">t1.dept_id = t2.id;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/image-20200929211218700.png" alt="image-20200929211218700"></p><p>左(外)连接，左表(相对)的记录将会全部表示出来，而右表(相对)只会显示符合搜索条件（两表交集）的记录。右表记录不足的地方均为NULL。</p><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/20171209142610819.png" alt="img"></p><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><p>与左(外)连接相反，右(外)连接，左表(a_table)只会显示符合搜索条件（两表交集 ）的记录，而右表(b_table)的记录将会全部表示出来。左表记录不足的地方均为NULL。</p><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/20171209144056668.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 右外连接</span><br><span class="line">SELECT </span><br><span class="line">t1.*,t2.`name`</span><br><span class="line">FROM</span><br><span class="line">emp t1</span><br><span class="line">RIGHT JOIN</span><br><span class="line">dept t2</span><br><span class="line">ON</span><br><span class="line">t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/image-20200929213603281.png" alt="image-20200929213603281"></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>查询中嵌套查询，称嵌套查询为子查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询工资最高的员工信息</span><br><span class="line">-- 1.查询工资最高是多少？9000</span><br><span class="line">select max(salary) from emp;</span><br><span class="line">-- 2.查询员工信息，并且工资等于9000</span><br><span class="line">select * from emp where emp.salary = 9000;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/image-20200929214500246.png" alt="image-20200929214500246"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 一步到位，不分开查询</span><br><span class="line">select * from emp where emp.salary = (select max(salary) from emp);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/image-20200929214730544.png" alt="image-20200929214730544"></p><h3 id="子查询的不同情况"><a href="#子查询的不同情况" class="headerlink" title="子查询的不同情况"></a>子查询的不同情况</h3><p>1.子查询的结果是单行单列的：</p><p>​    子查询可以作为条件，使用运算符（&gt;、＞＝、&lt;、＜=、=）去判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询小于平均工资的员工信息</span><br><span class="line">select * from emp where salary &lt; (select avg(salary) from emp);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/image-20200929221835583.png" alt="image-20200929221835583"></p><p>2.子查询的结果是多行单列的：</p><p>​    子查询可以作为条件，使用运算符in来判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询财务部和市场部所有员工的信息</span><br><span class="line">select id from dept where name = &#x27;财务部&#x27; or name = &#x27;市场部&#x27;;</span><br><span class="line">select * from emp where dept_id = 2 or dept_id = 3;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/image-20200929222714568.png" alt="image-20200929222714568"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 子查询</span><br><span class="line">select * from emp where dept_id in (select id from dept where name in(&#x27;市场部&#x27;,&#x27;财务部&#x27;));</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/image-20200929223223480.png" alt="image-20200929223223480"></p><p>3.子查询的结果是多行多列的：</p><p>子查询可以作为一张虚拟表来进行表的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询入职日期是2011-11-11之后的员工信息和部门信息</span><br><span class="line">-- 日期可以直接使用逻辑运算符来判断大小</span><br><span class="line">select * from emp where emp.join_date &gt; &#x27;2011-11-11&#x27;;-- 作为虚拟表</span><br><span class="line">select * from dept t1,(select * from emp where emp.join_date &gt; &#x27;2011-11-11&#x27;) t2 where t1.id = t2.dept_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/image-20200929224039502.png" alt="image-20200929224039502"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 数据库 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> java笔记 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础知识</title>
      <link href="/posts/2640443603/"/>
      <url>/posts/2640443603/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的安装、卸载"><a href="#数据库的安装、卸载" class="headerlink" title="数据库的安装、卸载"></a>数据库的安装、卸载</h1><h1 id="数据库的启动与登录"><a href="#数据库的启动与登录" class="headerlink" title="数据库的启动与登录"></a>数据库的启动与登录</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="通过服务启动MySQL服务。"><a href="#通过服务启动MySQL服务。" class="headerlink" title="通过服务启动MySQL服务。"></a>通过服务启动MySQL服务。</h3><p>1、可以通过右键计算机—&gt;管理—&gt;服务和应用程序—&gt;服务，找到MySQL服务启动。</p><p>2、可以通过win+R，输入services.msc快捷进入服务页面。</p><p>可以将MySQL服务设置为自动启动，就不再需要手动开启了。</p><h3 id="通过控制台启动MySQL服务"><a href="#通过控制台启动MySQL服务" class="headerlink" title="通过控制台启动MySQL服务"></a>通过控制台启动MySQL服务</h3><p>以管理员模式打开控制台。</p><blockquote><p>1、win10系统，按住win+x，选择图示选项即可快速以管理员模式打开powershell；</p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic/1.png" alt="win+X"></p><p>2、如果习惯了win+R的方式，可以添加新的命令进去以管理员模式打开cmd控制台，具体方法如下：</p><ul><li><p>在 <code>%windir%\system32\</code>目录下，找到cmd，添加快捷方式到<code>C:\Windows</code>目录下，为避免冲突给这个快捷方式起一个别名；</p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic/image-20210422230828986.png" alt="image-20210422230828986"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic/image-20210422231028599.png" alt="image-20210422231028599"></p></li><li><p>右键双击此快捷方式–&gt;快捷方式–&gt;高级–&gt;勾选以管理员方式运行</p><p>  <img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic/image-20210422231256468.png" alt="image-20210422231256468"></p></li><li><p>使用win+R，输入之前的别名即可以管理员方式打开cmd。</p></li></ul></blockquote><p><code>net start mysql</code>:启动MySQL服务。</p><p><code>net stop mysql</code>:关闭MySQL服务。</p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="本地数据库登录"><a href="#本地数据库登录" class="headerlink" title="本地数据库登录"></a>本地数据库登录</h3><p>1、<code>mysql -u用户名 -p密码</code></p><p>2、<code>mysql -u用户名 -p</code>:回车后要求输入密码</p><p>3、<code>mysql -h localhost -P 端口号 -u root -p[密码/回车]</code>:以本地服务器的方式登录数据库</p><blockquote><p>注意：<code>-h、-P、-u</code>后面的空格可有可无，<code>-p</code>后面如果直接跟密码则不能有空格</p></blockquote><h3 id="远程数据库登录"><a href="#远程数据库登录" class="headerlink" title="远程数据库登录"></a>远程数据库登录</h3><p>1、<code>mysql -h远程数据库地址 -u用户名 -p密码 </code></p><p>2、<code>mysql -h远程数据库地址 -u用户名 -p</code></p><p>3、<code>mysql --host=远程数据库地址 --user=用户名 --password=密码</code></p><p>4、<code>mysql --host=远程数据库地址 --user=用户名 --password</code></p><h3 id="数据库退出"><a href="#数据库退出" class="headerlink" title="数据库退出"></a>数据库退出</h3><ul><li><code>exit</code></li><li><code>Ctrl+c</code></li></ul><h1 id="数据库的目录结构"><a href="#数据库的目录结构" class="headerlink" title="数据库的目录结构"></a>数据库的目录结构</h1><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200921211212387.png" alt="image-20200921211212387"></p><p><code>bin</code>：执行文件</p><p><code>data</code>：用于放置一些日志文件以及数据库</p><p><code>include</code>：用于放置一些头文件</p><p><code>lib</code>:用于放置一系列库文件</p><p><code>share</code>:用于存放字符集、语言等信息</p><p><code>my.ini</code>:配置文件</p><h1 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Structured Query Language：结构化查询语言<br>    其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p><h2 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h2><ol><li><p>SQL 语句可以单行或多行书写，以分号结尾。</p></li><li><p>可使用空格和缩进来增强语句的可读性。</p></li><li><p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p></li><li><p>3 种注释</p></li></ol><ul><li>单行注释: – 注释内容（注意–后面的空格） 或 # 注释内容(mysql 特有) </li><li>多行注释: /* 注释 */（与java多行注释相似）</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>DDL(Data Definition Language)数据定义语言<pre><code> 用来定义数据库对象：**数据库，表，列**等。关键字：create, drop,alter 等</code></pre></li><li>DML(Data Manipulation Language)数据操作语言<pre><code> 用来对数据库中表的**数据**进行**增删改**。关键字：insert, delete, update 等</code></pre></li><li>DQL(Data Query Language)数据查询语言<pre><code> 用来**查询**数据库中表的**记录(数据)**。关键字：select, where 等</code></pre></li><li>DCL(Data Control Language)数据控制语言(了解)<pre><code> 用来定义数据库的**访问权限和安全级别，及创建用户**。关键字：GRANT， REVOKE 等</code></pre></li></ol><h1 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h1><h2 id="操作数据库："><a href="#操作数据库：" class="headerlink" title="操作数据库："></a>操作数据库：</h2><h3 id="CRUD语句"><a href="#CRUD语句" class="headerlink" title="CRUD语句"></a>CRUD语句</h3><p>CRUD定义：</p><ul><li>C(Create):创建</li><li>R(Retrieve)：查询</li><li>U(Update):修改</li><li>D(Delete):删除</li></ul><hr><h4 id="Create语句："><a href="#Create语句：" class="headerlink" title="Create语句："></a>Create语句：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名;    -- 创建数据库</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922003534168.png" alt="image-20200922003534168"></p><p>新创建的数据库与已知数据库重名时：</p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922003651221.png" alt="image-20200922003651221"></p><p>可以使用以下语句避免错误出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists  数据库名;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922004033053.png" alt="image-20200922004033053"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922004149497.png" alt="image-20200922004149497"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名 character set 字符集名称;    -- 创建数据库并指定字符集</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922004608579.png" alt="image-20200922004608579"></p><p>创建数据库db4，判断是否重名，并指定字符集为gbk:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists db4 character set gbk;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922004943303.png" alt="image-20200922004943303"></p><h4 id="Retrieve语句："><a href="#Retrieve语句：" class="headerlink" title="Retrieve语句："></a>Retrieve语句：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;     -- 查询所有已创建的数据库</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();     -- 查询当前所使用的数据库</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922001542219.png" alt="image-20200922001542219"></p><blockquote><p>在MySQL数据库的数据目录下（win7：<code>C:\ProgramData\MySQL\MySQL Server 5.5\data</code>）有三个文件夹，就是MySQL自带的数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922001933690.png" alt="image-20200922001933690"></p><p>**<code>information_schema</code>**：视图，并不是真正的数据库。它提供了访问数据库元数据的方式。没有在data目录下。</p><p><strong><code>mysql库</code>**：这个是mysql的核心数据库，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。</strong>不可以删除**。</p><p><strong><code>performance_schema</code>**：对性能提升进行操作的数据库。</strong>尽量别动**</p><p><strong><code>test</code></strong>:测试数据库。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create database 数据库名;    -- 查看某个数据库字符集的名称（安装时默认utf-8)、查看某个数据库的创建语句</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922003250158.png" alt="image-20200922003250158"></p><h4 id="Update语句："><a href="#Update语句：" class="headerlink" title="Update语句："></a>Update语句：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database 数据库名 character set 字符集;    -- 更改指定数据库的字符集</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922005857294.png" alt="image-20200922005857294"></p><h4 id="Delete语句："><a href="#Delete语句：" class="headerlink" title="Delete语句："></a>Delete语句：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名;    -- 删除指定数据库，删除不存在的数据库会报错</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922010138546.png" alt="image-20200922010138546"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists 数据库名;    -- 如果存在则删除</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922010340797.png" alt="image-20200922010340797"></p><h3 id="使用数据库的语句"><a href="#使用数据库的语句" class="headerlink" title="使用数据库的语句"></a>使用数据库的语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();     -- 查询当前使用的数据库</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922010702349.png" alt="image-20200922010702349"></p><p>返回NULL，当前未使用任何数据库；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名称;    -- 使用指定数据库</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922010821110.png" alt="image-20200922010821110"></p><h2 id="操作数据库的表："><a href="#操作数据库的表：" class="headerlink" title="操作数据库的表："></a>操作数据库的表：</h2><h3 id="Create："><a href="#Create：" class="headerlink" title="Create："></a>Create：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create 表名(</span><br><span class="line">列名1 数据类型1,</span><br><span class="line">列名2 数据类型2,</span><br><span class="line">...</span><br><span class="line">列名n 数据类型n</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><h4 id="MySQL常见数据类型："><a href="#MySQL常见数据类型：" class="headerlink" title="MySQL常见数据类型："></a>MySQL常见数据类型：</h4><ul><li>int：整数类型    <code>age int,</code></li><li>double:小数类型   <code>score  double(int digits1，int digits2),</code>digits1：位数，digits2：保留小数点后位数</li><li>date:日期，只包含年月日，格式：<code>yyyy-MM-dd</code></li><li>datetime:日期，包含年月日时分秒，格式：<code>yyyy-MM-dd HH:mm:ss</code></li><li>timestamp:时间戳日期，包含年月日时分秒，不赋值或赋值为NULL时，自动为其赋值为当前系统时间。</li><li>varchar:字符串，<code>name varchar(int length)</code>length:最多能容纳的字符数。name  varchar(20)名字最多容纳20个字符张三：两个字符——zhangsan：八个字符</li></ul></blockquote><p>在数据库db1中创建一个学生表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table Student(</span><br><span class="line">id int, -- 编号</span><br><span class="line">name varchar(20), -- 名字</span><br><span class="line">age int,  -- 年龄</span><br><span class="line">birthday date,   -- 出生日期</span><br><span class="line">score double(4,1),   -- 分数</span><br><span class="line">createTime timestamp  -- 创建时间</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​        <img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922022121545.png" alt="image-20200922022121545"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922022147065.png" alt="image-20200922022147065"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 新的表名 like 已存在的表名;  -- 复制表</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922022528398.png" alt="image-20200922022528398"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922022609381.png" alt="image-20200922022609381"></p><h3 id="Retrieve："><a href="#Retrieve：" class="headerlink" title="Retrieve："></a>Retrieve：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;    -- 查询正在使用的数据库中的所有表</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables from 数据库名;    -- 查询正在特定的数据库中的所有表，如果当前使用的是另一个数据库，执行命令后仍在此数据库，而不会切换到该特定数据库</span><br></pre></td></tr></table></figure><p>用use命令切换到mysql：</p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922011712171.png" alt="image-20200922011712171"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名称;   -- desc:description ,查询表结构</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922011913444.png" alt="image-20200922011913444"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名;   -- 展示表的字符集</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922023238467.png" alt="image-20200922023238467"></p><h3 id="Update："><a href="#Update：" class="headerlink" title="Update："></a>Update：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 rename to 新的表名;    -- 修改表名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922023028607.png" alt="image-20200922023028607"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 character set 字符集名;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922023457614.png" alt="image-20200922023457614"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 列名 数据类型;  -- 给表添加一列</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922023844489.png" alt="image-20200922023844489"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 change 列名 新的列名 新的数据类型; -- 修改表的列名及数据类型</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922024110363.png" alt="image-20200922024110363"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify 列名 新数据类型;  -- 修改列的数据类型</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922024259774.png" alt="image-20200922024259774"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop 列名;   -- 删除列</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922024440724.png" alt="image-20200922024440724"></p><h3 id="Delete："><a href="#Delete：" class="headerlink" title="Delete："></a>Delete：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists 表名;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922022657901.png" alt="image-20200922022657901"></p><h1 id="DML-操作数据库中表的记录"><a href="#DML-操作数据库中表的记录" class="headerlink" title="DML:操作数据库中表的记录"></a>DML:操作数据库中表的记录</h1><p>重点掌握。包括添加数据，删除数据，修改数据。</p><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(列名1,列名2,...,列名n) values(值1,值2,...,值n);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922160000237.png" alt="image-20200922160000237"></p><p>查询表中记录(DQL语句):</p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922160545422.png" alt="image-20200922160545422"></p><p>注意事项：</p><p>1、列名和值要一 一对应（数据类型和个数都要一致）；</p><p>2、如果表名后不定义列名，则默认给所有列添加值（不想添加值的value可以用NULL表示）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 values(值1,值2,...,值n);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922161232693.png" alt="image-20200922161232693"></p><p>3、除了数字，其他类型都需要用引号（单双引号皆可）括起来。</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete form 表名 [where 条件];    -- []中是可选的</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922162308779.png" alt="image-20200922162308779"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922162401069.png" alt="image-20200922162401069"></p><p>不加条件时，默认删除表中所有记录。不推荐使用，因为表中有多少条记录，就会执行多少次删除操作，效率较低。</p><p>推荐使用以下语句，删除全部记录，效率比较高：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table 表名;    -- 先删除表，再创建一个一模一样的表</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922162737278.png" alt="image-20200922162737278"></p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列名1=值1,列名2=值2,...[where 条件];</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922164110490.png" alt="image-20200922164110490"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922164237142.png" alt="image-20200922164237142"></p><p>如果不加任何条件，则会将表中所有记录全部修改。</p><h1 id="DQL：数据查询"><a href="#DQL：数据查询" class="headerlink" title="DQL：数据查询"></a>DQL：数据查询</h1><p>最重要的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">字段列表</span><br><span class="line">from</span><br><span class="line">表名列表</span><br><span class="line">where</span><br><span class="line">条件列表</span><br><span class="line">group by</span><br><span class="line">分组字段</span><br><span class="line">having</span><br><span class="line">分组之后的条件</span><br><span class="line">order by</span><br><span class="line">按【】排序</span><br><span class="line">limit</span><br><span class="line">分页限定</span><br></pre></td></tr></table></figure><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名;  -- 查询表中所有记录</span><br></pre></td></tr></table></figure><h3 id="多字段查询"><a href="#多字段查询" class="headerlink" title="多字段查询"></a>多字段查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名1,列名2,... from 表名; -- 多字段查询</span><br></pre></td></tr></table></figure><h3 id="查询细节"><a href="#查询细节" class="headerlink" title="查询细节"></a>查询细节</h3><p>添加着重号可区分关键字和字段。<br>比方说，<code>myemployees</code>表中有个字段为<code>name</code>,如果不添加着重号，查询时会把<code>name</code>当作关键字，使得查询出错：<br><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/%E6%89%B9%E6%B3%A8%202021-04-24%20002627.jpg"><br>给<code>name</code>字段加上着重号，可以避免查询出错：<br><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/%E6%89%B9%E6%B3%A8%202021-04-24%20003028.jpg"></p><h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><p>1.创建一个表student：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student( </span><br><span class="line">id int, -- 编号 </span><br><span class="line">name varchar(20), -- 姓名 </span><br><span class="line">age int, -- 年龄 </span><br><span class="line">sex varchar(5), -- 性别 </span><br><span class="line">address varchar(100), -- 地址 </span><br><span class="line">math int, -- 数学 </span><br><span class="line">english int -- 英语 </span><br><span class="line">); </span><br><span class="line">INSERT INTO </span><br><span class="line">student(id,NAME,age,sex,address,math,english) </span><br><span class="line">VALUES </span><br><span class="line">(1,&#x27;马云&#x27;,55,&#x27;男&#x27;,&#x27;杭州&#x27;,66,78),</span><br><span class="line">(2,&#x27;马化腾&#x27;,45,&#x27;女&#x27;,&#x27;深圳&#x27;,98,87),</span><br><span class="line">(3,&#x27;马景涛&#x27;,55,&#x27;男&#x27;,&#x27;香港&#x27;,56,77),</span><br><span class="line">(4,&#x27;柳岩&#x27;,20,&#x27;女&#x27;,&#x27;湖南&#x27;,76,65),</span><br><span class="line">(5,&#x27;柳青&#x27;,20,&#x27;男&#x27;,&#x27;湖南&#x27;,86,NULL),</span><br><span class="line">(6,&#x27;刘德华&#x27;,57,&#x27;男&#x27;,&#x27;香港&#x27;,99,99),</span><br><span class="line">(7,&#x27;马德&#x27;,22,&#x27;女&#x27;,&#x27;香港&#x27;,99,99),</span><br><span class="line">(8,&#x27;德玛西亚&#x27;,18,&#x27;男&#x27;,&#x27;南京&#x27;,56,65);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922173407504.png" alt="image-20200922173407504"></p><p>2.从student表中查询姓名，math，和English</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,math,english from student;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922173618963.png" alt="image-20200922173618963"></p><h3 id="去重查询"><a href="#去重查询" class="headerlink" title="去重查询"></a>去重查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select address from student;</span><br></pre></td></tr></table></figure><p>使用该语句查询时，会出现重复的项目：</p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922173926807.png" alt="image-20200922173926807"></p><p>可以使用关键字 <code>distinct</code>去重查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct address from student;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922174106138.png" alt="image-20200922174106138"></p><p>只有查询出的结果完全一致时才会去重，比如以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct name,address from student;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922174229579.png" alt="image-20200922174229579"></p><p>因为姓名有一致的，即使地址重复了，且使用了地distinct关键字也不会将重复地址筛选掉。</p><h3 id="计算列"><a href="#计算列" class="headerlink" title="计算列"></a>计算列</h3><p> 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,math,english,math+english from student; -- 查询名字，数学成绩，英语成绩并计算总成绩</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922174559726.png" alt="image-20200922174559726"></p><h4 id="ifnull-exp1-exp2-函数"><a href="#ifnull-exp1-exp2-函数" class="headerlink" title="ifnull(exp1,exp2)函数"></a>ifnull(exp1,exp2)函数</h4><p>从上述操作中可以发现，当查询的值中存在NULL时，进行四则运算后得到的值也会是NULL。为了避免出现这种问题，我们可以使用<code>ifnull</code>函数来进行处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifnull(exp1,exp2)   -- exp1表示可能为null的值，exp2表示将NULL替换掉的值</span><br></pre></td></tr></table></figure><p>因此上述计算总分的查询语句可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,math,english,math+ifnull(english,0) from student; -- 为NULL时就将值用0替换</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922175500877.png" alt="image-20200922175500877"></p><h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><p>从上述查询我们发现列<code>math+ifnull(english,0)</code>在结果中不好看，所以我们可以对其设置别名，当然任意列都可以设置别名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列名 as 别名 -- 使用关键字as对列名设置别名</span><br></pre></td></tr></table></figure><p><strong>别名的好处</strong>：</p><ul><li>便于理解</li><li>如果要查询的字段存在重复名称时，使用别名可以区分开来</li></ul><h4 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,math,english,math+ifnull(english,0) as 总分 from student;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922180001216.png" alt="image-20200922180001216"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name as 姓名,math as 数学,english as 英语,math+ifnull(english,0) as 总分 from student;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922180146752.png" alt="image-20200922180146752"></p><h4 id="起别名简化形式"><a href="#起别名简化形式" class="headerlink" title="起别名简化形式"></a>起别名简化形式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名1 别名1,列名2 别名2,... from 表名;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,math 数学,english 英语,math+ifnull(english,0) 总分 from student;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922180414253.png" alt="image-20200922180414253"></p><blockquote><p>当别名中存在关键字时，可以将别名用引号（单双皆可）包括起来。</p></blockquote><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>where子句后加条件。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th>比较运算符</th><th>备注</th></tr></thead><tbody><tr><td>&gt;、&lt;、=、&gt;=、&lt;=、&lt;&gt;</td><td>&lt;&gt;在SQL中表示不等于，在mysql中也可以使用!=没有==</td></tr><tr><td>BETWEEN…AND…</td><td>在一个范围之内，包头又包尾</td></tr><tr><td>IN(集合)</td><td>集合表示多个值，各个值之间用逗号隔开</td></tr><tr><td>LIKE ‘张%’</td><td>模糊查询</td></tr><tr><td>IS [NOT] NULL</td><td>查询某一列为[NOT]NULL的值，注：不能写=NULL(!=NULL)</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>备注</th></tr></thead><tbody><tr><td>&amp;&amp;或 AND</td><td>与，SQL中建议使用AND，&amp;&amp;并不通用。</td></tr><tr><td>|| 或 OR</td><td>或，SQL中建议使用OR，||并不通用。</td></tr><tr><td>! 或 NOT</td><td>非，SQL中建议使用NOT，!并不通用。</td></tr></tbody></table><blockquote><p>注：null不能用<code>=、&gt;、&lt;</code>等符号来进行判断。判断一个字段是否为null，除了使用IS NULL之外，还可以使用安全等于：<code>&lt;=&gt;</code>。此外安全等于也可以用于判断非NULL的字段是否相等。<br><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/%E6%89%B9%E6%B3%A8%202021-04-24%20230952.jpg" alt="使用IS NULL判断字段是否为NULL"><br><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/%E6%89%B9%E6%B3%A8%202021-04-24%20231157.jpg" alt="使用安全等于判断字段是否为NULL"><br><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/%E6%89%B9%E6%B3%A8%202021-04-24%20231520.jpg" alt="使用=查询字段是否满足"><br><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@pics/img/%E6%89%B9%E6%B3%A8%202021-04-24%20231625.jpg" alt="使用安全等于"></p></blockquote><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><p>1.查询math大于80的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where math &gt; 80;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922222724078.png" alt="image-20200922222724078"></p><p>查询English小于90的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where english &lt; 90;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922222757117.png" alt="image-20200922222757117"></p><p>查询sex等于女的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where sex = &#x27;女&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922222936439.png" alt="image-20200922222936439"></p><p>2、查询年龄位于18-30（包含两头）之间的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 以下查询效果一致</span><br><span class="line">select * from student where age &gt;= 18 &amp;&amp; age &lt;= 30;</span><br><span class="line">select * from student where age &gt;= 18 AND age &lt;= 30; -- 推荐使用AND,不推荐&amp;&amp;</span><br><span class="line">select * from student where age BETWEEN 18 AND 30;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922223444233.png" alt="image-20200922223444233"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922223514518.png" alt="image-20200922223514518"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922223625776.png" alt="image-20200922223625776"></p><p>3.查询英语成绩为空的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where english IS NULL;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922223931763.png" alt="image-20200922223931763"></p><p>4.查询英语成绩不为空的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where english IS NOT NULL;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922224126958.png" alt="image-20200922224126958"></p><p>5.查询年龄为18，22，50的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 以下查询结果一致</span><br><span class="line">select * from student where age IN(18,22,50);</span><br><span class="line">select * from student where age = 18 OR age = 22 OR age = 50;-- 推荐使用OR，不推荐||</span><br><span class="line">select * from student where age = 18 || age = 22 || age = 50;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922224250640.png" alt="image-20200922224250640"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922224557584.png" alt="image-20200922224557584"></p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922224637532.png" alt="image-20200922224637532"></p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>MySQL通配符：_:匹配单个任意字符；%:匹配任意多个字符。</p><p>查询姓马的有哪些人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where name LIKE &#x27;马%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922230728661.png" alt="image-20200922230728661"></p><p>查询姓名第二个字为化的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where name LIKE &#x27;_化%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922230954627.png" alt="image-20200922230954627"></p><p>查询名字包含德字的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where name LIKE &#x27;%德%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922231144759.png" alt="image-20200922231144759"></p><p>查询名字是三个字的人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where name LIKE &#x27;___&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200922231318145.png" alt="image-20200922231318145"></p><h4 id="使用转义字符"><a href="#使用转义字符" class="headerlink" title="使用转义字符"></a>使用转义字符</h4><p>如果想要查询结果中包含<code>_、%</code>的字段可以使用转义字符</p><ul><li>使用<code>\</code>来转义</li><li>使用<code>escape</code>关键字来定义任意符号为转义字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查询员工中，名字第二个字为_的员工信息</span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE last_name LIKE &#x27;_\_&#x27; ; #用\将_转义，不再作为通配字符</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE last_name LIKE &#x27;_$_&#x27; ESCAPE &#x27;$&#x27; ; # 使用ESCAPE关键字将$设置为转义字符，$将_转义，不再作为通配字符</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">  * </span><br><span class="line">FROM</span><br><span class="line">  employees </span><br><span class="line">WHERE last_name LIKE &#x27;_a_&#x27; ESCAPE &#x27;a&#x27; ; # 使用ESCAPE关键字将a设置为转义字符，a将_转义，不再作为通配字符</span><br></pre></td></tr></table></figure><h1 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h1><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>涉及多张表的操作。</p><p>数据有冗余的时候，进行表的拆分，然后利用外键对拆分的表进行关联。</p><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><p>1.在创建表时添加外键约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">...</span><br><span class="line">    外键列：外键列名称 数据类型,</span><br><span class="line">    constraint 外键名称 foreign key (外键列名称) references 主键表名(主键列名称),</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中，外键名称可以任意取，主键表名，即为关联的表名。</p><p>2.在表创建完成之后添加外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 外键名 foreign key(外键列名) references 主表名(主键列名);</span><br></pre></td></tr></table></figure><h4 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一个部门表，作为主表，因为副表需要引用他，所以需要先创建</span><br><span class="line">CREATE TABLE department(</span><br><span class="line">dep_id INT INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">dep VARCHAR(20),</span><br><span class="line">dep_loacation VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">-- 向表中添加两个部门</span><br><span class="line">INSERT INTO department VALUES(NULL, &#x27;研发部&#x27;,&#x27;广州&#x27;),(NULL, &#x27;销售部&#x27;, &#x27;深圳&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200926164650983.png" alt="image-20200926164650983"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 创建员工表，利用外键和部门表产生关联</span><br><span class="line">CREATE TABLE employee(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(20),</span><br><span class="line">age INT,</span><br><span class="line">dep_id INT,  -- 外键列，与主表主键列类型要一致</span><br><span class="line">CONSTRAINT emp_dep_id FOREIGN KEY(dep_id) REFERENCES department(dep_id)</span><br><span class="line">);</span><br><span class="line">-- 添加员工信息</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES </span><br><span class="line">(&#x27;张三&#x27;, 20, 1),</span><br><span class="line">(&#x27;李四&#x27;, 21, 1),</span><br><span class="line">(&#x27;王五&#x27;, 20, 1),</span><br><span class="line">(&#x27;老王&#x27;, 20, 2),</span><br><span class="line">(&#x27;大王&#x27;, 22, 2),</span><br><span class="line">(&#x27;小王&#x27;, 18, 2);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200926165713224.png" alt="image-20200926165713224"></p><p>添加约束后，主键的列不能被删除，因为和从表产生了关联</p><p><img src="https://cdn.jsdelivr.net/gh/bu2cheng/picpic@master/blogimg/image-20200926165821510.png" alt="image-20200926165821510"></p><h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop foreign key 外键名称;</span><br></pre></td></tr></table></figure><h2 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h2><p>添加级联操作时需要谨慎对待。在添加外键约束的语句中添加相应的语法，以便主表改变时，从表发生相应变化。级联操作有两种：级联更新和级联删除。级联更新：主表的主键发生变化时，从表的外键也会发生相应变化。级联删除：主表删除主键列的数据时，相应的从表的外键列会被全部删除。因此添加级联操作时要慎之又慎。</p><h3 id="级联更新"><a href="#级联更新" class="headerlink" title="级联更新"></a>级联更新</h3><p>在添加外键约束的语句中添加相应的语法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on update cascade</span><br></pre></td></tr></table></figure><p>1.创建表时添加级联更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">...</span><br><span class="line">    外键列：外键列名 数据类型,</span><br><span class="line">    constraint 外键名称 foreign key(外键列名) references 主表名(主键名) on update cascade,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>2.创建完表后添加级联更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 外键名称 foreign key(外键列名) refereces 主表名(主键列名) on update cascade;</span><br></pre></td></tr></table></figure><p>3.删除级联更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop foreign key  外键名称;</span><br></pre></td></tr></table></figure><h3 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on delete cascade</span><br></pre></td></tr></table></figure><p>1.创建表时添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">...</span><br><span class="line">    外键列：外键列名 数据类型,</span><br><span class="line">    constraint 外键名称 foreign key(外键列名) references 主表名(主键名) on delete cascade,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>2.创建完表后添加级联更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 外键名称 foreign key(外键列名) refereces 主表名(主键列名) on delete cascade;</span><br></pre></td></tr></table></figure><p>3.删除级联更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop foreign key  外键名称;</span><br></pre></td></tr></table></figure><h3 id="同时添加两种级联操作"><a href="#同时添加两种级联操作" class="headerlink" title="同时添加两种级联操作"></a>同时添加两种级联操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">...</span><br><span class="line">    外键列：外键列名 数据类型,</span><br><span class="line">    constraint 外键名称 foreign key(外键列名) references 主表名(主键名)on update cascade on delete cascade,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 数据库 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> java笔记 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于github图床搭建问题</title>
      <link href="/posts/1800832272/"/>
      <url>/posts/1800832272/</url>
      
        <content type="html"><![CDATA[<p>按照网上的教程，使用github+PicGo+jsDelivr的方式搭建免费图床，配置如下，</p><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/%E5%85%B3%E4%BA%8Egithub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%981.png"></p><p>一直显示服务端出错，请重试。</p><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/%E5%85%B3%E4%BA%8Egithub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%982.png" alt="image-20201008184820098"></p><p>按照网上的教程，改了又改，怎么都不能上传成功。最后去github看，主分支变成了<code>main</code>，而不再是<code>master</code>。于是把配置中的分支改为了<code>main</code></p><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/%E5%85%B3%E4%BA%8Egithub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%983.png"></p><p>测试了一下，上传成功！</p><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/%E5%85%B3%E4%BA%8Egithub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%984.png" alt="image-20201008190221582"></p><p>查了一下原因，原来是BLM的原因，说来实在可笑！</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@main/%E5%85%B3%E4%BA%8Egithub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%985.png"></p><p>这个问题解决了，新的问题随之产生了！发现从picgo自动生成的链接导入typora后，图片加载不出来。直接使用浏览器访问时，出现如下问题：</p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@main/%E5%85%B3%E4%BA%8Egithub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%986.png"></p><p>上网查了一下，是github的问题，时墙时不墙。没有什么特别好的方法。所以暂时也只能把图片都同步到vercel了。</p><p><strong>已解决！</strong></p><p>还是<code>master</code>的问题。将自定义域名改为<code>https://cdn.jsdelivr.net/gh/zerohk/blogpic@main</code>的形式即可</p><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/%E5%85%B3%E4%BA%8Egithub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%987.png"></p><p>相册区能正确显示，浏览器也能正确显示。</p><p><img src="https://gitee.com/fkso/blogpics/raw/master/master/%E5%85%B3%E4%BA%8Egithub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%988.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zerohk/blogpic@main/%E5%85%B3%E4%BA%8Egithub%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%989.png"></p><p>但是github还是时好时坏，无法解决。</p><hr><p>10-12再次更新。</p><p>发现有时候不是网络原因，可能是账号原因，换个账号，换个token又能继续上传了。总之，还是不要滥用为好，毕竟是白嫖。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布文章指南</title>
      <link href="/posts/1820155650/"/>
      <url>/posts/1820155650/</url>
      
        <content type="html"><![CDATA[<h1 id="一、创建新的页面和文章"><a href="#一、创建新的页面和文章" class="headerlink" title="一、创建新的页面和文章"></a>一、创建新的页面和文章</h1><p>使用默认hexo命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建新页面</span></span><br><span class="line">hexo new page pagename </span><br><span class="line"><span class="meta">#</span><span class="bash"> 简化命令</span></span><br><span class="line">hexo n page pagename</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建新文章</span></span><br><span class="line">hexo new post postname</span><br><span class="line"><span class="meta">#</span><span class="bash"> 简化命令</span></span><br><span class="line">hexo n post postname</span><br></pre></td></tr></table></figure><p>由于butterfly主题的一些特性，所以更改了<code>./scaffolds</code>目录下的<code>page.md</code>和<code>post.md</code>，使得其在生成页面或文章的时候，会自动生成主题可能需要的<code>Front-matter</code></p><blockquote><p>Front-matter 是文档最上方以 — 分隔的区域，用于指定各种参数。</p></blockquote><p>下面分别是page页和post页的Front-matter的参数和各参数的用法。</p><h2 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h2><h3 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="参数用法"><a href="#参数用法" class="headerlink" title="参数用法"></a>参数用法</h3><table><thead><tr><th>参数</th><th>用途</th></tr></thead><tbody><tr><td>title</td><td>【必需】頁面標題</td></tr><tr><td>date</td><td>【必需】頁面創建日期</td></tr><tr><td>type</td><td>【必需】標籤、分類和友情鏈接三個頁面需要配置</td></tr><tr><td>updated</td><td>【可選】頁面更新日期</td></tr><tr><td>description</td><td>【可選】頁面描述</td></tr><tr><td>keywords</td><td>【可選】頁面關鍵字</td></tr><tr><td>comments</td><td>【可選】顯示頁面評論模塊(默認 true)</td></tr><tr><td>top_img</td><td>【可選】頁面頂部圖片，可输入url地址，也可以设置为false，不显示顶图</td></tr><tr><td>mathjax</td><td>【可選】顯示mathjax(當設置mathjax的per_page: false時，才需要配置，默認 false)（暂未安装）</td></tr><tr><td>katex</td><td>【可選】顯示katex(當設置katex的per_page: false時，才需要配置，默認 false)（暂未安装）</td></tr><tr><td>aside</td><td>【可選】顯示側邊欄 (默認 true)</td></tr><tr><td>aplayer</td><td>【可選】在需要的頁面加載aplayer的js和css（暂未配置）</td></tr><tr><td>highlight_shrink</td><td>【可選】配置代碼框是否展開(true/false)(默認為設置中highlight_shrink的配置)</td></tr></tbody></table><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>如果没有特殊需求，除了必选项，其余各项缺省即可</p><h2 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h2><h3 id="参数列表-1"><a href="#参数列表-1" class="headerlink" title="参数列表"></a>参数列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">title: </span><br><span class="line">date: </span><br><span class="line">updated:</span><br><span class="line">sticky:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">password: </span><br><span class="line">abstract: </span><br><span class="line">message: .</span><br><span class="line">wrong<span class="emphasis">_pass_</span>message: </span><br><span class="line">wrong<span class="emphasis">_hash_</span>message: </span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">auto<span class="emphasis">_open:</span></span><br><span class="line"><span class="emphasis">copyright:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author:</span><br><span class="line">copyright<span class="emphasis">_author_</span>href:</span><br><span class="line">copyright<span class="emphasis">_url:</span></span><br><span class="line"><span class="emphasis">copyright_</span>info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight<span class="emphasis">_shrink:</span></span><br></pre></td></tr></table></figure><h3 id="参数用法-1"><a href="#参数用法-1" class="headerlink" title="参数用法"></a>参数用法</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><table><thead><tr><th>参数</th><th>用途</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章標題</td></tr><tr><td>date</td><td>【必需】文章創建日期</td></tr><tr><td>updated</td><td>【可選】文章更新日期</td></tr><tr><td>sticky</td><td>【可选】文章置顶，数字越大，优先级越高</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>password</td><td>【可选】给博客加密，在此处输入密码即可</td></tr><tr><td>abstract:</td><td>【可选】未知</td></tr><tr><td>message</td><td>【可選】加密文章提示</td></tr><tr><td>wrong_pass_message</td><td>【可选】加密文章密码错误提示</td></tr><tr><td>wrong_hash_message</td><td>【可选】未知</td></tr><tr><td>keywords</td><td>【可選】文章關鍵字</td></tr><tr><td>description</td><td>【可選】文章描述</td></tr><tr><td>comments</td><td>【可選】顯示文章評論模塊(默認 true)</td></tr><tr><td>top_img</td><td>【可選】文章頂部圖片</td></tr><tr><td>cover</td><td>【可选】文章縮略圖(如果沒有設置top_img,文章頁頂部將顯示縮略圖，可設為false/圖片地址/留空)</td></tr><tr><td>toc</td><td>【可選】顯示文章TOC(默認為設置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可選】顯示toc_number(默認為設置中toc的number配置)</td></tr><tr><td>auto_open</td><td>【可選】是否自動打開TOC(默認為設置中toc的auto_open配置)</td></tr><tr><td>copyright</td><td>【可選】顯示文章版權模塊(默認為設置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可選】文章版權模塊的<strong>文章作者</strong></td></tr><tr><td>copyright_author_href</td><td>【可選】文章版權模塊的<strong>文章作者</strong>鏈接</td></tr><tr><td>copyright_url</td><td>【可選】文章版權模塊的<strong>文章連結</strong>鏈接</td></tr><tr><td>copyright_info</td><td>【可選】文章版權模塊的<strong>版權聲明</strong>文字</td></tr><tr><td>mathjax</td><td>【可選】顯示mathjax(當設置mathjax的per_page: false時，才需要配置，默認 false)（暂未安装）</td></tr><tr><td>katex</td><td>【可選】顯示katex(當設置katex的per_page: false時，才需要配置，默認 false)（暂未安装）</td></tr><tr><td>aplayer</td><td>【可選】在需要的頁面加載aplayer的js和css（暂未配置）</td></tr><tr><td>highlight_shrink</td><td>【可選】配置代碼框是否展開(true/false)(默認為設置中highlight_shrink的配置)</td></tr></tbody></table><h3 id="备注-1"><a href="#备注-1" class="headerlink" title="备注"></a>备注</h3><p>如果没有特殊需求，除了必选项，其余各项缺省即可。</p><h1 id="二、更新站点"><a href="#二、更新站点" class="headerlink" title="二、更新站点"></a>二、更新站点</h1><p>由于安装了<code>hexo-douban</code>和<code>hexo-calendar</code>两个插件，和默认命令有冲突，所以文章写好后，不能使用简化命令直接对站点进行更新，需要采用以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">清空缓存，删除pulic目录</span></span><br><span class="line">hexo clean </span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成静态文件，生成public目录</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不可直接用hexo g来生成静态文件，但可以使用以下简化命令</span></span><br><span class="line">hexo ge</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署网站</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不可直接用hexo d来部署，但可以使用一下简化命令</span></span><br><span class="line">hexo de</span><br></pre></td></tr></table></figure><p>可选命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Usage: hexo generate</span><br><span class="line">Description:</span><br><span class="line">Generate static files.</span><br><span class="line">Options:</span><br><span class="line">  -b, --bail         Raise an error if any unhandled exception is thrown during generation</span><br><span class="line">  -c, --concurrency  Maximum number of files to be generated in parallel. Default is infinity</span><br><span class="line">  -d, --deploy       Deploy after generated,生成后直接部署</span><br><span class="line">  -f, --force        Force regenerate</span><br><span class="line">  -w, --watch        Watch file changes，只生成发生改变的页面</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在执行hexo generate之后，可以使用该命令更新豆瓣数据，默认会生成books,game,movies页面</span></span><br><span class="line">hexo douban</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">########</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Usage: hexo douban</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Description:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Generate pages from douban</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Options:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  -b, --books   Generate douban books only</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  -g, --games   Generate douban games only</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  -m, --movies  Generate douban movies only</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">########因为只有books和movies进行了标记只需要执行以下命令即可</span></span></span><br><span class="line">  hexo douban -bm</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在执行hexo generate之后，可以使用该命令更新关于页面网站活动数据</span></span><br><span class="line">hexo gc -w=40</span><br><span class="line"><span class="meta">#</span><span class="bash">Usage: hexo gc</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Generate calendar.json</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
